2025-05-16 10:45:53,208 - __main__ - INFO - Starting bond text parsing service...
2025-05-16 10:48:26,295 - __main__ - INFO - Starting bond text parsing service...
2025-05-16 10:48:40,020 - __main__ - INFO - Received request to parse bond text: 21国债01 买入 1000万 3.5% 可议价
2025-05-16 10:48:40,031 - __main__ - INFO - Calling Ollama model with text: 21国债01 买入 1000万 3.5% 可议价
2025-05-16 10:48:40,054 - __main__ - INFO - Ollama service is available
2025-05-16 10:48:40,063 - __main__ - ERROR - qwen:0.6b model is not available
2025-05-16 10:48:40,076 - __main__ - ERROR - Error checking model availability: 
2025-05-16 10:48:40,077 - __main__ - ERROR - Unexpected error in call_ollama_model: 
2025-05-16 10:48:42,799 - __main__ - INFO - Received request to parse bond text: 21国债01 买入 1000万 3.5% 可议价
2025-05-16 10:48:42,815 - __main__ - INFO - Calling Ollama model with text: 21国债01 买入 1000万 3.5% 可议价
2025-05-16 10:48:42,825 - __main__ - INFO - Ollama service is available
2025-05-16 10:48:42,848 - __main__ - ERROR - qwen:0.6b model is not available
2025-05-16 10:48:42,863 - __main__ - ERROR - Error checking model availability: 
2025-05-16 10:48:42,864 - __main__ - ERROR - Unexpected error in call_ollama_model: 
2025-05-16 10:52:26,679 - __main__ - INFO - Received request to parse bond text: 21国债01 买入 1000万 3.5% 可议价
2025-05-16 10:52:26,695 - __main__ - INFO - Calling Ollama model with text: 21国债01 买入 1000万 3.5% 可议价
2025-05-16 10:52:26,706 - __main__ - INFO - Ollama service is available
2025-05-16 10:52:26,730 - __main__ - ERROR - qwen:0.6b model is not available
2025-05-16 10:52:26,744 - __main__ - ERROR - Error checking model availability: 
2025-05-16 10:52:26,744 - __main__ - ERROR - Unexpected error in call_ollama_model: 
2025-05-16 10:52:42,103 - __main__ - INFO - Received request to parse bond text: 21国债01 买入 1000万 3.5% 可议价
2025-05-16 10:52:42,104 - __main__ - INFO - Calling Ollama model with text: 21国债01 买入 1000万 3.5% 可议价
2025-05-16 10:52:42,113 - __main__ - INFO - Ollama service is available
2025-05-16 10:52:42,122 - __main__ - ERROR - qwen:0.6b model is not available
2025-05-16 10:52:42,122 - __main__ - ERROR - Error checking model availability: 
2025-05-16 10:52:42,122 - __main__ - ERROR - Unexpected error in call_ollama_model: 
2025-05-16 10:54:02,194 - __main__ - INFO - Starting bond text parsing service...
2025-05-16 10:56:33,997 - __main__ - INFO - Starting bond text parsing service...
2025-05-16 10:58:29,299 - __main__ - INFO - Received request to parse bond text: 21国债01 买入 1000万 3.5% 可议价
2025-05-16 10:58:29,314 - __main__ - INFO - Calling Ollama model with text: 21国债01 买入 1000万 3.5% 可议价
2025-05-16 10:58:29,342 - __main__ - INFO - Ollama service is available
2025-05-16 10:58:29,367 - __main__ - INFO - Available models: {"models": [{"name": "qwen3:0.6b", "model": "qwen3:0.6b", "modified_at": "2025-05-08T01:27:52.753829715+08:00", "size": 522653526, "digest": "3bae9c93586b27bedaa979979733c2b0edd1d0defc745e9638f2161192a0ccf0", "details": {"parent_model": "", "format": "gguf", "family": "qwen3", "families": ["qwen3"], "parameter_size": "751.63M", "quantization_level": "Q4_K_M"}}]}
2025-05-16 10:58:29,367 - __main__ - INFO - Sending request to Ollama: {"model": "qwen3:0.6b", "prompt": "Parse the following bond trading text and extract key information in JSON format:\n            21国债01 买入 1000万 3.5% 可议价\n            \n            Extract the following fields:\n            - assetCode: Bond code\n            - assetName: Bond name\n            - trdSide: Trading side (buy/sell)\n            - amount: Trading amount\n            - rate: Interest rate\n            - amountReqFlag: Whether amount is required\n            - rateReqFlag: Whether rate is required\n            \n            Return only the JSON object.", "stream": false}
2025-05-16 10:58:50,254 - __main__ - INFO - Received response from Ollama: {"model": "qwen3:0.6b", "created_at": "2025-05-16T02:58:45.985745Z", "response": "<think>\nOkay, let's see. The user provided a bond trading text and wants me to extract specific fields into JSON. Let me start by reading the text carefully.\n\nThe text is: \"21国债01 买入 1000万 3.5% 可议价\". So, the first part is the bond code and name. The code is 21国债01, which I think is the bond code. The name is \"国债01\", so that's assetName. Then the trdSide is \"买入\", which means buying. The amount is 1000万, which is 1,000 million. The rate is 3.5%, and the amountReqFlag is set to true, and rateReqFlag is also true. \n\nWait, the amountReqFlag is whether the amount is required. Since the amount is given as 1000万, which is a number, so it's a required amount. Similarly, the rate is 3.5%, which is a number, so it's also required. So those flags should be true. \n\nNow, I need to structure this into JSON with the specified fields. Let me double-check each part. AssetCode is 21国债01, assetName is \"国债01\", trdSide is buy, amount is 1000, rate is 3.5, amountReqFlag is true, rateReqFlag is true. Then return only the JSON. \n\nI think that's all. No other fields are mentioned. Let me make sure there's no extra text. The user said to extract only the JSON, so no explanation or anything else. Alright, that's it.\n</think>\n\n{\n  \"assetCode\": \"21国债01\",\n  \"assetName\": \"国债01\",\n  \"trdSide\": \"买入\",\n  \"amount\": 1000,\n  \"rate\": 3.5,\n  \"amountReqFlag\": true,\n  \"rateReqFlag\": true\n}", "done": true, "done_reason": "stop", "context": [151644, 872, 198, 14463, 279, 2701, 10815, 11133, 1467, 323, 8649, 1376, 1995, 304, 4718, 3561, 510, 310, 220, 17, 16, 114418, 15, 16, 220, 108532, 220, 16, 15, 15, 15, 31207, 220, 18, 13, 20, 4, 26853, 107, 96422, 50292, 18574, 310, 22826, 279, 2701, 5043, 510, 310, 481, 9329, 2078, 25, 23618, 2038, 198, 310, 481, 9329, 675, 25, 23618, 829, 198, 310, 481, 489, 67, 16384, 25, 31604, 3108, 320, 19783, 2687, 613, 340, 310, 481, 3311, 25, 31604, 3311, 198, 310, 481, 4379, 25, 24106, 4379, 198, 310, 481, 3311, 27234, 12135, 25, 13139, 3311, 374, 2567, 198, 310, 481, 4379, 27234, 12135, 25, 13139, 4379, 374, 2567, 18574, 310, 3411, 1172, 279, 4718, 1633, 13, 151645, 198, 151644, 77091, 198, 151667, 198, 32313, 11, 1077, 594, 1490, 13, 576, 1196, 3897, 264, 10815, 11133, 1467, 323, 6801, 752, 311, 8649, 3151, 5043, 1119, 4718, 13, 6771, 752, 1191, 553, 5290, 279, 1467, 15516, 382, 785, 1467, 374, 25, 330, 17, 16, 114418, 15, 16, 220, 108532, 220, 16, 15, 15, 15, 31207, 220, 18, 13, 20, 4, 26853, 107, 96422, 50292, 3263, 2055, 11, 279, 1156, 949, 374, 279, 10815, 2038, 323, 829, 13, 576, 2038, 374, 220, 17, 16, 114418, 15, 16, 11, 892, 358, 1744, 374, 279, 10815, 2038, 13, 576, 829, 374, 330, 114418, 15, 16, 497, 773, 429, 594, 9329, 675, 13, 5005, 279, 489, 67, 16384, 374, 330, 108532, 497, 892, 3363, 11833, 13, 576, 3311, 374, 220, 16, 15, 15, 15, 31207, 11, 892, 374, 220, 16, 11, 15, 15, 15, 3526, 13, 576, 4379, 374, 220, 18, 13, 20, 13384, 323, 279, 3311, 27234, 12135, 374, 738, 311, 830, 11, 323, 4379, 27234, 12135, 374, 1083, 830, 13, 4710, 14190, 11, 279, 3311, 27234, 12135, 374, 3425, 279, 3311, 374, 2567, 13, 8704, 279, 3311, 374, 2661, 438, 220, 16, 15, 15, 15, 31207, 11, 892, 374, 264, 1372, 11, 773, 432, 594, 264, 2567, 3311, 13, 34239, 11, 279, 4379, 374, 220, 18, 13, 20, 13384, 892, 374, 264, 1372, 11, 773, 432, 594, 1083, 2567, 13, 2055, 1846, 8042, 1265, 387, 830, 13, 4710, 7039, 11, 358, 1184, 311, 5944, 419, 1119, 4718, 448, 279, 5189, 5043, 13, 6771, 752, 1990, 15934, 1817, 949, 13, 22605, 2078, 374, 220, 17, 16, 114418, 15, 16, 11, 9329, 675, 374, 330, 114418, 15, 16, 497, 489, 67, 16384, 374, 3695, 11, 3311, 374, 220, 16, 15, 15, 15, 11, 4379, 374, 220, 18, 13, 20, 11, 3311, 27234, 12135, 374, 830, 11, 4379, 27234, 12135, 374, 830, 13, 5005, 470, 1172, 279, 4718, 13, 4710, 40, 1744, 429, 594, 678, 13, 2308, 1008, 5043, 525, 9733, 13, 6771, 752, 1281, 2704, 1052, 594, 902, 4960, 1467, 13, 576, 1196, 1053, 311, 8649, 1172, 279, 4718, 11, 773, 902, 16148, 476, 4113, 770, 13, 97593, 11, 429, 594, 432, 624, 151668, 271, 515, 220, 330, 9852, 2078, 788, 330, 17, 16, 114418, 15, 16, 756, 220, 330, 9852, 675, 788, 330, 114418, 15, 16, 756, 220, 330, 376, 67, 16384, 788, 330, 108532, 756, 220, 330, 6045, 788, 220, 16, 15, 15, 15, 345, 220, 330, 7698, 788, 220, 18, 13, 20, 345, 220, 330, 6045, 27234, 12135, 788, 830, 345, 220, 330, 7698, 27234, 12135, 788, 830, 198, 92], "total_duration": 16613050961, "load_duration": 3352379754, "prompt_eval_count": 125, "prompt_eval_duration": 1471442257, "eval_count": 427, "eval_duration": 11777531066}
2025-05-16 10:58:50,256 - __main__ - INFO - Validating Ollama response: {"model": "qwen3:0.6b", "created_at": "2025-05-16T02:58:45.985745Z", "response": "<think>\nOkay, let's see. The user provided a bond trading text and wants me to extract specific fields into JSON. Let me start by reading the text carefully.\n\nThe text is: \"21国债01 买入 1000万 3.5% 可议价\". So, the first part is the bond code and name. The code is 21国债01, which I think is the bond code. The name is \"国债01\", so that's assetName. Then the trdSide is \"买入\", which means buying. The amount is 1000万, which is 1,000 million. The rate is 3.5%, and the amountReqFlag is set to true, and rateReqFlag is also true. \n\nWait, the amountReqFlag is whether the amount is required. Since the amount is given as 1000万, which is a number, so it's a required amount. Similarly, the rate is 3.5%, which is a number, so it's also required. So those flags should be true. \n\nNow, I need to structure this into JSON with the specified fields. Let me double-check each part. AssetCode is 21国债01, assetName is \"国债01\", trdSide is buy, amount is 1000, rate is 3.5, amountReqFlag is true, rateReqFlag is true. Then return only the JSON. \n\nI think that's all. No other fields are mentioned. Let me make sure there's no extra text. The user said to extract only the JSON, so no explanation or anything else. Alright, that's it.\n</think>\n\n{\n  \"assetCode\": \"21国债01\",\n  \"assetName\": \"国债01\",\n  \"trdSide\": \"买入\",\n  \"amount\": 1000,\n  \"rate\": 3.5,\n  \"amountReqFlag\": true,\n  \"rateReqFlag\": true\n}", "done": true, "done_reason": "stop", "context": [151644, 872, 198, 14463, 279, 2701, 10815, 11133, 1467, 323, 8649, 1376, 1995, 304, 4718, 3561, 510, 310, 220, 17, 16, 114418, 15, 16, 220, 108532, 220, 16, 15, 15, 15, 31207, 220, 18, 13, 20, 4, 26853, 107, 96422, 50292, 18574, 310, 22826, 279, 2701, 5043, 510, 310, 481, 9329, 2078, 25, 23618, 2038, 198, 310, 481, 9329, 675, 25, 23618, 829, 198, 310, 481, 489, 67, 16384, 25, 31604, 3108, 320, 19783, 2687, 613, 340, 310, 481, 3311, 25, 31604, 3311, 198, 310, 481, 4379, 25, 24106, 4379, 198, 310, 481, 3311, 27234, 12135, 25, 13139, 3311, 374, 2567, 198, 310, 481, 4379, 27234, 12135, 25, 13139, 4379, 374, 2567, 18574, 310, 3411, 1172, 279, 4718, 1633, 13, 151645, 198, 151644, 77091, 198, 151667, 198, 32313, 11, 1077, 594, 1490, 13, 576, 1196, 3897, 264, 10815, 11133, 1467, 323, 6801, 752, 311, 8649, 3151, 5043, 1119, 4718, 13, 6771, 752, 1191, 553, 5290, 279, 1467, 15516, 382, 785, 1467, 374, 25, 330, 17, 16, 114418, 15, 16, 220, 108532, 220, 16, 15, 15, 15, 31207, 220, 18, 13, 20, 4, 26853, 107, 96422, 50292, 3263, 2055, 11, 279, 1156, 949, 374, 279, 10815, 2038, 323, 829, 13, 576, 2038, 374, 220, 17, 16, 114418, 15, 16, 11, 892, 358, 1744, 374, 279, 10815, 2038, 13, 576, 829, 374, 330, 114418, 15, 16, 497, 773, 429, 594, 9329, 675, 13, 5005, 279, 489, 67, 16384, 374, 330, 108532, 497, 892, 3363, 11833, 13, 576, 3311, 374, 220, 16, 15, 15, 15, 31207, 11, 892, 374, 220, 16, 11, 15, 15, 15, 3526, 13, 576, 4379, 374, 220, 18, 13, 20, 13384, 323, 279, 3311, 27234, 12135, 374, 738, 311, 830, 11, 323, 4379, 27234, 12135, 374, 1083, 830, 13, 4710, 14190, 11, 279, 3311, 27234, 12135, 374, 3425, 279, 3311, 374, 2567, 13, 8704, 279, 3311, 374, 2661, 438, 220, 16, 15, 15, 15, 31207, 11, 892, 374, 264, 1372, 11, 773, 432, 594, 264, 2567, 3311, 13, 34239, 11, 279, 4379, 374, 220, 18, 13, 20, 13384, 892, 374, 264, 1372, 11, 773, 432, 594, 1083, 2567, 13, 2055, 1846, 8042, 1265, 387, 830, 13, 4710, 7039, 11, 358, 1184, 311, 5944, 419, 1119, 4718, 448, 279, 5189, 5043, 13, 6771, 752, 1990, 15934, 1817, 949, 13, 22605, 2078, 374, 220, 17, 16, 114418, 15, 16, 11, 9329, 675, 374, 330, 114418, 15, 16, 497, 489, 67, 16384, 374, 3695, 11, 3311, 374, 220, 16, 15, 15, 15, 11, 4379, 374, 220, 18, 13, 20, 11, 3311, 27234, 12135, 374, 830, 11, 4379, 27234, 12135, 374, 830, 13, 5005, 470, 1172, 279, 4718, 13, 4710, 40, 1744, 429, 594, 678, 13, 2308, 1008, 5043, 525, 9733, 13, 6771, 752, 1281, 2704, 1052, 594, 902, 4960, 1467, 13, 576, 1196, 1053, 311, 8649, 1172, 279, 4718, 11, 773, 902, 16148, 476, 4113, 770, 13, 97593, 11, 429, 594, 432, 624, 151668, 271, 515, 220, 330, 9852, 2078, 788, 330, 17, 16, 114418, 15, 16, 756, 220, 330, 9852, 675, 788, 330, 114418, 15, 16, 756, 220, 330, 376, 67, 16384, 788, 330, 108532, 756, 220, 330, 6045, 788, 220, 16, 15, 15, 15, 345, 220, 330, 7698, 788, 220, 18, 13, 20, 345, 220, 330, 6045, 27234, 12135, 788, 830, 345, 220, 330, 7698, 27234, 12135, 788, 830, 198, 92], "total_duration": 16613050961, "load_duration": 3352379754, "prompt_eval_count": 125, "prompt_eval_duration": 1471442257, "eval_count": 427, "eval_duration": 11777531066}
2025-05-16 10:58:50,257 - __main__ - INFO - Raw model response: <think>
Okay, let's see. The user provided a bond trading text and wants me to extract specific fields into JSON. Let me start by reading the text carefully.

The text is: "21国债01 买入 1000万 3.5% 可议价". So, the first part is the bond code and name. The code is 21国债01, which I think is the bond code. The name is "国债01", so that's assetName. Then the trdSide is "买入", which means buying. The amount is 1000万, which is 1,000 million. The rate is 3.5%, and the amountReqFlag is set to true, and rateReqFlag is also true. 

Wait, the amountReqFlag is whether the amount is required. Since the amount is given as 1000万, which is a number, so it's a required amount. Similarly, the rate is 3.5%, which is a number, so it's also required. So those flags should be true. 

Now, I need to structure this into JSON with the specified fields. Let me double-check each part. AssetCode is 21国债01, assetName is "国债01", trdSide is buy, amount is 1000, rate is 3.5, amountReqFlag is true, rateReqFlag is true. Then return only the JSON. 

I think that's all. No other fields are mentioned. Let me make sure there's no extra text. The user said to extract only the JSON, so no explanation or anything else. Alright, that's it.
</think>

{
  "assetCode": "21国债01",
  "assetName": "国债01",
  "trdSide": "买入",
  "amount": 1000,
  "rate": 3.5,
  "amountReqFlag": true,
  "rateReqFlag": true
}
2025-05-16 10:58:50,258 - __main__ - ERROR - JSON decode error: Expecting value: line 1 column 1 (char 0)
2025-05-16 10:58:50,259 - __main__ - ERROR - Could not extract JSON from response: <think>
Okay, let's see. The user provided a bond trading text and wants me to extract specific fields into JSON. Let me start by reading the text carefully.

The text is: "21国债01 买入 1000万 3.5% 可议价". So, the first part is the bond code and name. The code is 21国债01, which I think is the bond code. The name is "国债01", so that's assetName. Then the trdSide is "买入", which means buying. The amount is 1000万, which is 1,000 million. The rate is 3.5%, and the amountReqFlag is set to true, and rateReqFlag is also true. 

Wait, the amountReqFlag is whether the amount is required. Since the amount is given as 1000万, which is a number, so it's a required amount. Similarly, the rate is 3.5%, which is a number, so it's also required. So those flags should be true. 

Now, I need to structure this into JSON with the specified fields. Let me double-check each part. AssetCode is 21国债01, assetName is "国债01", trdSide is buy, amount is 1000, rate is 3.5, amountReqFlag is true, rateReqFlag is true. Then return only the JSON. 

I think that's all. No other fields are mentioned. Let me make sure there's no extra text. The user said to extract only the JSON, so no explanation or anything else. Alright, that's it.
</think>

{
  "assetCode": "21国债01",
  "assetName": "国债01",
  "trdSide": "买入",
  "amount": 1000,
  "rate": 3.5,
  "amountReqFlag": true,
  "rateReqFlag": true
}
2025-05-16 10:58:50,260 - __main__ - ERROR - Error validating Ollama response: Could not extract valid JSON from model response
2025-05-16 10:58:50,261 - __main__ - ERROR - Unexpected error in call_ollama_model: Could not extract valid JSON from model response
Traceback (most recent call last):
  File "/Users/liuyi/CursorProject/pythonProject1/main.py", line 53, in validate_ollama_response
    parsed_response = json.loads(response_text)
  File "/usr/local/Cellar/python@3.9/3.9.1_4/Frameworks/Python.framework/Versions/3.9/lib/python3.9/json/__init__.py", line 346, in loads
    return _default_decoder.decode(s)
  File "/usr/local/Cellar/python@3.9/3.9.1_4/Frameworks/Python.framework/Versions/3.9/lib/python3.9/json/decoder.py", line 337, in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
  File "/usr/local/Cellar/python@3.9/3.9.1_4/Frameworks/Python.framework/Versions/3.9/lib/python3.9/json/decoder.py", line 355, in raw_decode
    raise JSONDecodeError("Expecting value", s, err.value) from None
json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/liuyi/CursorProject/pythonProject1/main.py", line 141, in call_ollama_model
    parsed_data = validate_ollama_response(result)
  File "/Users/liuyi/CursorProject/pythonProject1/main.py", line 70, in validate_ollama_response
    raise ValueError("Could not extract valid JSON from model response")
ValueError: Could not extract valid JSON from model response
2025-05-16 11:00:48,417 - __main__ - INFO - Starting bond text parsing service...
2025-05-16 11:01:00,885 - __main__ - INFO - Received request to parse bond text: 21国债01 买入 1000万 3.5% 可议价
2025-05-16 11:01:00,885 - __main__ - INFO - Calling Ollama model with text: 21国债01 买入 1000万 3.5% 可议价
2025-05-16 11:01:00,907 - __main__ - INFO - Ollama service is available
2025-05-16 11:01:00,921 - __main__ - INFO - Available models: {"models": [{"name": "qwen3:0.6b", "model": "qwen3:0.6b", "modified_at": "2025-05-08T01:27:52.753829715+08:00", "size": 522653526, "digest": "3bae9c93586b27bedaa979979733c2b0edd1d0defc745e9638f2161192a0ccf0", "details": {"parent_model": "", "format": "gguf", "family": "qwen3", "families": ["qwen3"], "parameter_size": "751.63M", "quantization_level": "Q4_K_M"}}]}
2025-05-16 11:01:00,924 - __main__ - INFO - Sending request to Ollama: {"model": "qwen3:0.6b", "prompt": "请将以下债券交易文本解析为JSON格式，只返回JSON对象，不要包含其他文字说明：\n            21国债01 买入 1000万 3.5% 可议价\n            \n            需要提取的字段：\n            - assetCode: 债券代码\n            - assetName: 债券名称\n            - trdSide: 交易方向（买入/卖出）\n            - amount: 交易金额（数字）\n            - rate: 利率（数字）\n            - amountReqFlag: 金额是否可议（布尔值）\n            - rateReqFlag: 利率是否可议（布尔值）\n            \n            示例输出格式：\n            {\n                \"assetCode\": \"21国债01\",\n                \"assetName\": \"21国债01\",\n                \"trdSide\": \"买入\",\n                \"amount\": 10000000,\n                \"rate\": 3.5,\n                \"amountReqFlag\": true,\n                \"rateReqFlag\": true\n            }", "stream": false}
2025-05-16 11:01:09,563 - __main__ - INFO - Received response from Ollama: {"model": "qwen3:0.6b", "created_at": "2025-05-16T03:01:09.549943Z", "response": "<think>\n好的，我现在需要处理用户提供的债券交易文本，将其解析为指定的JSON格式。首先，我要仔细阅读用户提供的文本和要求的字段。用户给出的文本是：“21国债01 买入 1000万 3.5% 可议价”。我需要提取出符合要求的字段，并确保不包含其他文字说明。\n\n首先，确定每个字段的正确性。assetCode应该是债券代码，这里直接提取“21国债01”没问题。assetName也是“21国债01”，看起来是对的。trdSide是“买入”，符合用户要求的买入方向。amount是1000万，但要注意单位是数字，这里直接转换为10000000，因为中文数字可能需要转换为数值类型。rate是3.5，是数字，没问题。amountReqFlag是true，因为“可议价”是布尔值，这里正确。rateReqFlag也是true，同样正确。\n\n接下来，检查是否有遗漏的字段，比如用户提到的其他字段是否都包含在内。所有要求的字段都已经被提取，没有多余的说明。最后，确保JSON格式正确，没有语法错误，并且键名正确对应。确认无误后，就可以将结果返回给用户了。\n</think>\n\n{\n    \"assetCode\": \"21国债01\",\n    \"assetName\": \"21国债01\",\n    \"trdSide\": \"买入\",\n    \"amount\": 10000000,\n    \"rate\": 3.5,\n    \"amountReqFlag\": true,\n    \"rateReqFlag\": true\n}", "done": true, "done_reason": "stop", "context": [151644, 872, 198, 14880, 44063, 87752, 104976, 99886, 108704, 106637, 17714, 5370, 68805, 3837, 91680, 31526, 5370, 64429, 3837, 100148, 102298, 92894, 87335, 66394, 28311, 310, 220, 17, 16, 114418, 15, 16, 220, 108532, 220, 16, 15, 15, 15, 31207, 220, 18, 13, 20, 4, 26853, 107, 96422, 50292, 18574, 310, 18137, 250, 222, 30534, 107439, 9370, 44931, 28311, 310, 481, 9329, 2078, 25, 4891, 222, 118, 100054, 46100, 198, 310, 481, 9329, 675, 25, 4891, 222, 118, 100054, 29991, 198, 310, 481, 489, 67, 16384, 25, 220, 99886, 100696, 9909, 108532, 14, 109430, 23083, 310, 481, 3311, 25, 220, 99886, 80094, 9909, 82587, 23083, 310, 481, 4379, 25, 19468, 102, 95355, 9909, 82587, 23083, 310, 481, 3311, 27234, 12135, 25, 220, 80094, 64471, 30440, 96422, 9909, 117661, 25511, 23083, 310, 481, 4379, 27234, 12135, 25, 19468, 102, 95355, 64471, 30440, 96422, 9909, 117661, 25511, 23083, 3374, 310, 80426, 66017, 68805, 28311, 310, 341, 394, 330, 9852, 2078, 788, 330, 17, 16, 114418, 15, 16, 756, 394, 330, 9852, 675, 788, 330, 17, 16, 114418, 15, 16, 756, 394, 330, 376, 67, 16384, 788, 330, 108532, 756, 394, 330, 6045, 788, 220, 16, 15, 15, 15, 15, 15, 15, 15, 345, 394, 330, 7698, 788, 220, 18, 13, 20, 345, 394, 330, 6045, 27234, 12135, 788, 830, 345, 394, 330, 7698, 27234, 12135, 788, 830, 198, 310, 335, 151645, 198, 151644, 77091, 198, 151667, 198, 99692, 3837, 107520, 85106, 54542, 20002, 103008, 104976, 99886, 108704, 3837, 105278, 106637, 17714, 105146, 9370, 5370, 68805, 1773, 101140, 3837, 104515, 104857, 101113, 20002, 103008, 108704, 33108, 101882, 9370, 44931, 1773, 20002, 107485, 9370, 108704, 20412, 36987, 17, 16, 114418, 15, 16, 220, 108532, 220, 16, 15, 15, 15, 31207, 220, 18, 13, 20, 4, 26853, 107, 96422, 50292, 55807, 35946, 85106, 107439, 20221, 101137, 101882, 9370, 44931, 90395, 103944, 16530, 102298, 92894, 87335, 66394, 3407, 101140, 3837, 60610, 103991, 44931, 9370, 88991, 33071, 1773, 9852, 2078, 104583, 104976, 46100, 3837, 99817, 101041, 107439, 2073, 17, 16, 114418, 15, 16, 854, 114815, 1773, 9852, 675, 100000, 2073, 17, 16, 114418, 15, 16, 33590, 104544, 106273, 9370, 1773, 376, 67, 16384, 20412, 2073, 108532, 33590, 101137, 20002, 101882, 9370, 108532, 100696, 1773, 6045, 20412, 16, 15, 15, 15, 31207, 3837, 77288, 105213, 75317, 20412, 82587, 3837, 99817, 101041, 105359, 17714, 16, 15, 15, 15, 15, 15, 15, 15, 3837, 99519, 104811, 82587, 87267, 85106, 105359, 17714, 111944, 31905, 1773, 7698, 20412, 18, 13, 20, 3837, 20412, 82587, 3837, 114815, 1773, 6045, 27234, 12135, 20412, 1866, 3837, 99519, 2073, 30440, 96422, 50292, 854, 20412, 117661, 25511, 3837, 99817, 88991, 1773, 7698, 27234, 12135, 100000, 1866, 3837, 101165, 88991, 3407, 104326, 3837, 101071, 107189, 114078, 9370, 44931, 3837, 101912, 20002, 104496, 9370, 92894, 44931, 64471, 71268, 102298, 18493, 31843, 1773, 55338, 101882, 9370, 44931, 71268, 108308, 107439, 3837, 80443, 115917, 66394, 1773, 100161, 3837, 103944, 5370, 68805, 88991, 3837, 80443, 117206, 32100, 90395, 100136, 60949, 13072, 88991, 103124, 1773, 81167, 42192, 29056, 33447, 3837, 102003, 44063, 59151, 31526, 89012, 20002, 34187, 8997, 151668, 271, 515, 262, 330, 9852, 2078, 788, 330, 17, 16, 114418, 15, 16, 756, 262, 330, 9852, 675, 788, 330, 17, 16, 114418, 15, 16, 756, 262, 330, 376, 67, 16384, 788, 330, 108532, 756, 262, 330, 6045, 788, 220, 16, 15, 15, 15, 15, 15, 15, 15, 345, 262, 330, 7698, 788, 220, 18, 13, 20, 345, 262, 330, 6045, 27234, 12135, 788, 830, 345, 262, 330, 7698, 27234, 12135, 788, 830, 198, 92], "total_duration": 8608947162, "load_duration": 31819133, "prompt_eval_count": 233, "prompt_eval_duration": 1948317152, "eval_count": 349, "eval_duration": 6627602334}
2025-05-16 11:01:09,563 - __main__ - INFO - Validating Ollama response: {"model": "qwen3:0.6b", "created_at": "2025-05-16T03:01:09.549943Z", "response": "<think>\n好的，我现在需要处理用户提供的债券交易文本，将其解析为指定的JSON格式。首先，我要仔细阅读用户提供的文本和要求的字段。用户给出的文本是：“21国债01 买入 1000万 3.5% 可议价”。我需要提取出符合要求的字段，并确保不包含其他文字说明。\n\n首先，确定每个字段的正确性。assetCode应该是债券代码，这里直接提取“21国债01”没问题。assetName也是“21国债01”，看起来是对的。trdSide是“买入”，符合用户要求的买入方向。amount是1000万，但要注意单位是数字，这里直接转换为10000000，因为中文数字可能需要转换为数值类型。rate是3.5，是数字，没问题。amountReqFlag是true，因为“可议价”是布尔值，这里正确。rateReqFlag也是true，同样正确。\n\n接下来，检查是否有遗漏的字段，比如用户提到的其他字段是否都包含在内。所有要求的字段都已经被提取，没有多余的说明。最后，确保JSON格式正确，没有语法错误，并且键名正确对应。确认无误后，就可以将结果返回给用户了。\n</think>\n\n{\n    \"assetCode\": \"21国债01\",\n    \"assetName\": \"21国债01\",\n    \"trdSide\": \"买入\",\n    \"amount\": 10000000,\n    \"rate\": 3.5,\n    \"amountReqFlag\": true,\n    \"rateReqFlag\": true\n}", "done": true, "done_reason": "stop", "context": [151644, 872, 198, 14880, 44063, 87752, 104976, 99886, 108704, 106637, 17714, 5370, 68805, 3837, 91680, 31526, 5370, 64429, 3837, 100148, 102298, 92894, 87335, 66394, 28311, 310, 220, 17, 16, 114418, 15, 16, 220, 108532, 220, 16, 15, 15, 15, 31207, 220, 18, 13, 20, 4, 26853, 107, 96422, 50292, 18574, 310, 18137, 250, 222, 30534, 107439, 9370, 44931, 28311, 310, 481, 9329, 2078, 25, 4891, 222, 118, 100054, 46100, 198, 310, 481, 9329, 675, 25, 4891, 222, 118, 100054, 29991, 198, 310, 481, 489, 67, 16384, 25, 220, 99886, 100696, 9909, 108532, 14, 109430, 23083, 310, 481, 3311, 25, 220, 99886, 80094, 9909, 82587, 23083, 310, 481, 4379, 25, 19468, 102, 95355, 9909, 82587, 23083, 310, 481, 3311, 27234, 12135, 25, 220, 80094, 64471, 30440, 96422, 9909, 117661, 25511, 23083, 310, 481, 4379, 27234, 12135, 25, 19468, 102, 95355, 64471, 30440, 96422, 9909, 117661, 25511, 23083, 3374, 310, 80426, 66017, 68805, 28311, 310, 341, 394, 330, 9852, 2078, 788, 330, 17, 16, 114418, 15, 16, 756, 394, 330, 9852, 675, 788, 330, 17, 16, 114418, 15, 16, 756, 394, 330, 376, 67, 16384, 788, 330, 108532, 756, 394, 330, 6045, 788, 220, 16, 15, 15, 15, 15, 15, 15, 15, 345, 394, 330, 7698, 788, 220, 18, 13, 20, 345, 394, 330, 6045, 27234, 12135, 788, 830, 345, 394, 330, 7698, 27234, 12135, 788, 830, 198, 310, 335, 151645, 198, 151644, 77091, 198, 151667, 198, 99692, 3837, 107520, 85106, 54542, 20002, 103008, 104976, 99886, 108704, 3837, 105278, 106637, 17714, 105146, 9370, 5370, 68805, 1773, 101140, 3837, 104515, 104857, 101113, 20002, 103008, 108704, 33108, 101882, 9370, 44931, 1773, 20002, 107485, 9370, 108704, 20412, 36987, 17, 16, 114418, 15, 16, 220, 108532, 220, 16, 15, 15, 15, 31207, 220, 18, 13, 20, 4, 26853, 107, 96422, 50292, 55807, 35946, 85106, 107439, 20221, 101137, 101882, 9370, 44931, 90395, 103944, 16530, 102298, 92894, 87335, 66394, 3407, 101140, 3837, 60610, 103991, 44931, 9370, 88991, 33071, 1773, 9852, 2078, 104583, 104976, 46100, 3837, 99817, 101041, 107439, 2073, 17, 16, 114418, 15, 16, 854, 114815, 1773, 9852, 675, 100000, 2073, 17, 16, 114418, 15, 16, 33590, 104544, 106273, 9370, 1773, 376, 67, 16384, 20412, 2073, 108532, 33590, 101137, 20002, 101882, 9370, 108532, 100696, 1773, 6045, 20412, 16, 15, 15, 15, 31207, 3837, 77288, 105213, 75317, 20412, 82587, 3837, 99817, 101041, 105359, 17714, 16, 15, 15, 15, 15, 15, 15, 15, 3837, 99519, 104811, 82587, 87267, 85106, 105359, 17714, 111944, 31905, 1773, 7698, 20412, 18, 13, 20, 3837, 20412, 82587, 3837, 114815, 1773, 6045, 27234, 12135, 20412, 1866, 3837, 99519, 2073, 30440, 96422, 50292, 854, 20412, 117661, 25511, 3837, 99817, 88991, 1773, 7698, 27234, 12135, 100000, 1866, 3837, 101165, 88991, 3407, 104326, 3837, 101071, 107189, 114078, 9370, 44931, 3837, 101912, 20002, 104496, 9370, 92894, 44931, 64471, 71268, 102298, 18493, 31843, 1773, 55338, 101882, 9370, 44931, 71268, 108308, 107439, 3837, 80443, 115917, 66394, 1773, 100161, 3837, 103944, 5370, 68805, 88991, 3837, 80443, 117206, 32100, 90395, 100136, 60949, 13072, 88991, 103124, 1773, 81167, 42192, 29056, 33447, 3837, 102003, 44063, 59151, 31526, 89012, 20002, 34187, 8997, 151668, 271, 515, 262, 330, 9852, 2078, 788, 330, 17, 16, 114418, 15, 16, 756, 262, 330, 9852, 675, 788, 330, 17, 16, 114418, 15, 16, 756, 262, 330, 376, 67, 16384, 788, 330, 108532, 756, 262, 330, 6045, 788, 220, 16, 15, 15, 15, 15, 15, 15, 15, 345, 262, 330, 7698, 788, 220, 18, 13, 20, 345, 262, 330, 6045, 27234, 12135, 788, 830, 345, 262, 330, 7698, 27234, 12135, 788, 830, 198, 92], "total_duration": 8608947162, "load_duration": 31819133, "prompt_eval_count": 233, "prompt_eval_duration": 1948317152, "eval_count": 349, "eval_duration": 6627602334}
2025-05-16 11:01:09,563 - __main__ - INFO - Raw model response: <think>
好的，我现在需要处理用户提供的债券交易文本，将其解析为指定的JSON格式。首先，我要仔细阅读用户提供的文本和要求的字段。用户给出的文本是：“21国债01 买入 1000万 3.5% 可议价”。我需要提取出符合要求的字段，并确保不包含其他文字说明。

首先，确定每个字段的正确性。assetCode应该是债券代码，这里直接提取“21国债01”没问题。assetName也是“21国债01”，看起来是对的。trdSide是“买入”，符合用户要求的买入方向。amount是1000万，但要注意单位是数字，这里直接转换为10000000，因为中文数字可能需要转换为数值类型。rate是3.5，是数字，没问题。amountReqFlag是true，因为“可议价”是布尔值，这里正确。rateReqFlag也是true，同样正确。

接下来，检查是否有遗漏的字段，比如用户提到的其他字段是否都包含在内。所有要求的字段都已经被提取，没有多余的说明。最后，确保JSON格式正确，没有语法错误，并且键名正确对应。确认无误后，就可以将结果返回给用户了。
</think>

{
    "assetCode": "21国债01",
    "assetName": "21国债01",
    "trdSide": "买入",
    "amount": 10000000,
    "rate": 3.5,
    "amountReqFlag": true,
    "rateReqFlag": true
}
2025-05-16 11:01:09,563 - __main__ - ERROR - JSON decode error: Expecting value: line 1 column 1 (char 0)
2025-05-16 11:01:09,564 - __main__ - INFO - Extracted JSON string: {
    "assetCode": "21国债01",
    "assetName": "21国债01",
    "trdSide": "买入",
    "amount": 10000000,
    "rate": 3.5,
    "amountReqFlag": true,
    "rateReqFlag": true
}
2025-05-16 11:01:09,564 - __main__ - INFO - Successfully parsed bond data: {'assetCode': '21国债01', 'assetName': '21国债01', 'trdSide': '买入', 'amount': 10000000, 'rate': 3.5, 'amountReqFlag': True, 'rateReqFlag': True}
2025-05-16 11:01:09,565 - __main__ - INFO - Successfully validated and returned parsed data: assetCode='21国债01' assetName='21国债01' trdSide='买入' amount=10000000.0 rate=3.5 amountReqFlag=True rateReqFlag=True
2025-05-16 11:01:17,957 - __main__ - INFO - Received request to parse bond text: 21国债01 买入 1000万 3.5% 可议价
2025-05-16 11:01:17,974 - __main__ - INFO - Calling Ollama model with text: 21国债01 买入 1000万 3.5% 可议价
2025-05-16 11:01:17,983 - __main__ - INFO - Ollama service is available
2025-05-16 11:01:17,992 - __main__ - INFO - Available models: {"models": [{"name": "qwen3:0.6b", "model": "qwen3:0.6b", "modified_at": "2025-05-08T01:27:52.753829715+08:00", "size": 522653526, "digest": "3bae9c93586b27bedaa979979733c2b0edd1d0defc745e9638f2161192a0ccf0", "details": {"parent_model": "", "format": "gguf", "family": "qwen3", "families": ["qwen3"], "parameter_size": "751.63M", "quantization_level": "Q4_K_M"}}]}
2025-05-16 11:01:18,005 - __main__ - INFO - Sending request to Ollama: {"model": "qwen3:0.6b", "prompt": "请将以下债券交易文本解析为JSON格式，只返回JSON对象，不要包含其他文字说明：\n            21国债01 买入 1000万 3.5% 可议价\n            \n            需要提取的字段：\n            - assetCode: 债券代码\n            - assetName: 债券名称\n            - trdSide: 交易方向（买入/卖出）\n            - amount: 交易金额（数字）\n            - rate: 利率（数字）\n            - amountReqFlag: 金额是否可议（布尔值）\n            - rateReqFlag: 利率是否可议（布尔值）\n            \n            示例输出格式：\n            {\n                \"assetCode\": \"21国债01\",\n                \"assetName\": \"21国债01\",\n                \"trdSide\": \"买入\",\n                \"amount\": 10000000,\n                \"rate\": 3.5,\n                \"amountReqFlag\": true,\n                \"rateReqFlag\": true\n            }", "stream": false}
2025-05-16 11:01:27,981 - __main__ - INFO - Received response from Ollama: {"model": "qwen3:0.6b", "created_at": "2025-05-16T03:01:27.973573Z", "response": "<think>\n好的，我现在需要处理用户提供的债券交易文本，并将其解析为指定的JSON格式。首先，我要仔细阅读用户的要求，确保完全理解所有细节。\n\n用户给出的文本是：“21国债01 买入 1000万 3.5% 可议价”。需要提取的字段包括assetCode、assetName、trdSide、amount、rate、amountReqFlag和rateReqFlag。同时，输出必须严格符合JSON格式，不能有其他文字说明。\n\n首先，我需要识别每个字段。assetCode应该是债券代码，这里明显是“21国债01”。assetName是名称，也是“21国债01”。trdSide是买入，所以填“买入”。amount是交易金额，用户提供的数字是1000万，也就是10,000,000元，所以amount应该是10000000。rate是3.5%，即0.035。amountReqFlag是布尔值，这里应该是true，因为金额可议。rateReqFlag也是true，因为利率可议。所有字段都正确对应，没有遗漏。\n\n需要检查是否有其他可能的错误，比如单位转换是否正确，或者数值是否正确。例如，金额是否正确处理为数字类型，而不是字符串。这里用户已经明确给出数字，所以没问题。\n\n最后，确保JSON格式正确，没有额外的逗号或括号，严格按照示例输出格式。确认所有字段都正确无误后，就可以生成最终的JSON对象了。\n</think>\n\n{\n  \"assetCode\": \"21国债01\",\n  \"assetName\": \"21国债01\",\n  \"trdSide\": \"买入\",\n  \"amount\": 10000000,\n  \"rate\": 3.5,\n  \"amountReqFlag\": true,\n  \"rateReqFlag\": true\n}", "done": true, "done_reason": "stop", "context": [151644, 872, 198, 14880, 44063, 87752, 104976, 99886, 108704, 106637, 17714, 5370, 68805, 3837, 91680, 31526, 5370, 64429, 3837, 100148, 102298, 92894, 87335, 66394, 28311, 310, 220, 17, 16, 114418, 15, 16, 220, 108532, 220, 16, 15, 15, 15, 31207, 220, 18, 13, 20, 4, 26853, 107, 96422, 50292, 18574, 310, 18137, 250, 222, 30534, 107439, 9370, 44931, 28311, 310, 481, 9329, 2078, 25, 4891, 222, 118, 100054, 46100, 198, 310, 481, 9329, 675, 25, 4891, 222, 118, 100054, 29991, 198, 310, 481, 489, 67, 16384, 25, 220, 99886, 100696, 9909, 108532, 14, 109430, 23083, 310, 481, 3311, 25, 220, 99886, 80094, 9909, 82587, 23083, 310, 481, 4379, 25, 19468, 102, 95355, 9909, 82587, 23083, 310, 481, 3311, 27234, 12135, 25, 220, 80094, 64471, 30440, 96422, 9909, 117661, 25511, 23083, 310, 481, 4379, 27234, 12135, 25, 19468, 102, 95355, 64471, 30440, 96422, 9909, 117661, 25511, 23083, 3374, 310, 80426, 66017, 68805, 28311, 310, 341, 394, 330, 9852, 2078, 788, 330, 17, 16, 114418, 15, 16, 756, 394, 330, 9852, 675, 788, 330, 17, 16, 114418, 15, 16, 756, 394, 330, 376, 67, 16384, 788, 330, 108532, 756, 394, 330, 6045, 788, 220, 16, 15, 15, 15, 15, 15, 15, 15, 345, 394, 330, 7698, 788, 220, 18, 13, 20, 345, 394, 330, 6045, 27234, 12135, 788, 830, 345, 394, 330, 7698, 27234, 12135, 788, 830, 198, 310, 335, 151645, 198, 151644, 77091, 198, 151667, 198, 99692, 3837, 107520, 85106, 54542, 20002, 103008, 104976, 99886, 108704, 90395, 105278, 106637, 17714, 105146, 9370, 5370, 68805, 1773, 101140, 3837, 104515, 104857, 101113, 20002, 104272, 3837, 103944, 100372, 101128, 55338, 104449, 3407, 20002, 107485, 9370, 108704, 20412, 36987, 17, 16, 114418, 15, 16, 220, 108532, 220, 16, 15, 15, 15, 31207, 220, 18, 13, 20, 4, 26853, 107, 96422, 50292, 55807, 85106, 107439, 9370, 44931, 100630, 9852, 2078, 5373, 9852, 675, 5373, 376, 67, 16384, 5373, 6045, 5373, 7698, 5373, 6045, 27234, 12135, 33108, 7698, 27234, 12135, 1773, 91572, 3837, 66017, 100645, 100470, 101137, 5370, 68805, 3837, 53153, 18830, 92894, 87335, 66394, 3407, 101140, 3837, 35946, 85106, 102450, 103991, 44931, 1773, 9852, 2078, 104583, 104976, 46100, 3837, 99817, 100687, 20412, 2073, 17, 16, 114418, 15, 16, 55807, 9852, 675, 20412, 29991, 3837, 100000, 2073, 17, 16, 114418, 15, 16, 55807, 376, 67, 16384, 20412, 108532, 3837, 99999, 68756, 2073, 108532, 55807, 6045, 20412, 99886, 80094, 3837, 20002, 103008, 82587, 20412, 16, 15, 15, 15, 31207, 3837, 102200, 16, 15, 11, 15, 15, 15, 11, 15, 15, 15, 23305, 3837, 99999, 6045, 104583, 16, 15, 15, 15, 15, 15, 15, 15, 1773, 7698, 20412, 18, 13, 20, 69982, 91676, 15, 13, 15, 18, 20, 1773, 6045, 27234, 12135, 20412, 117661, 25511, 3837, 99817, 104583, 1866, 3837, 99519, 80094, 30440, 96422, 1773, 7698, 27234, 12135, 100000, 1866, 3837, 99519, 102299, 30440, 96422, 1773, 55338, 44931, 71268, 88991, 103124, 3837, 80443, 114078, 3407, 85106, 101071, 107189, 92894, 87267, 9370, 32100, 3837, 101912, 75317, 105359, 64471, 88991, 3837, 100631, 111944, 64471, 88991, 1773, 77557, 3837, 80094, 64471, 88991, 54542, 17714, 82587, 31905, 3837, 104610, 66558, 1773, 99817, 20002, 99461, 100692, 107485, 82587, 3837, 99999, 114815, 3407, 100161, 3837, 103944, 5370, 68805, 88991, 3837, 80443, 108593, 9370, 107463, 17992, 57191, 100139, 17992, 3837, 110439, 19793, 26355, 66017, 68805, 1773, 81167, 55338, 44931, 71268, 88991, 42192, 29056, 33447, 3837, 102003, 43959, 103941, 9370, 5370, 64429, 34187, 8997, 151668, 271, 515, 220, 330, 9852, 2078, 788, 330, 17, 16, 114418, 15, 16, 756, 220, 330, 9852, 675, 788, 330, 17, 16, 114418, 15, 16, 756, 220, 330, 376, 67, 16384, 788, 330, 108532, 756, 220, 330, 6045, 788, 220, 16, 15, 15, 15, 15, 15, 15, 15, 345, 220, 330, 7698, 788, 220, 18, 13, 20, 345, 220, 330, 6045, 27234, 12135, 788, 830, 345, 220, 330, 7698, 27234, 12135, 788, 830, 198, 92], "total_duration": 9960672602, "load_duration": 25516200, "prompt_eval_count": 233, "prompt_eval_duration": 26089424, "eval_count": 401, "eval_duration": 9907984780}
2025-05-16 11:01:27,981 - __main__ - INFO - Validating Ollama response: {"model": "qwen3:0.6b", "created_at": "2025-05-16T03:01:27.973573Z", "response": "<think>\n好的，我现在需要处理用户提供的债券交易文本，并将其解析为指定的JSON格式。首先，我要仔细阅读用户的要求，确保完全理解所有细节。\n\n用户给出的文本是：“21国债01 买入 1000万 3.5% 可议价”。需要提取的字段包括assetCode、assetName、trdSide、amount、rate、amountReqFlag和rateReqFlag。同时，输出必须严格符合JSON格式，不能有其他文字说明。\n\n首先，我需要识别每个字段。assetCode应该是债券代码，这里明显是“21国债01”。assetName是名称，也是“21国债01”。trdSide是买入，所以填“买入”。amount是交易金额，用户提供的数字是1000万，也就是10,000,000元，所以amount应该是10000000。rate是3.5%，即0.035。amountReqFlag是布尔值，这里应该是true，因为金额可议。rateReqFlag也是true，因为利率可议。所有字段都正确对应，没有遗漏。\n\n需要检查是否有其他可能的错误，比如单位转换是否正确，或者数值是否正确。例如，金额是否正确处理为数字类型，而不是字符串。这里用户已经明确给出数字，所以没问题。\n\n最后，确保JSON格式正确，没有额外的逗号或括号，严格按照示例输出格式。确认所有字段都正确无误后，就可以生成最终的JSON对象了。\n</think>\n\n{\n  \"assetCode\": \"21国债01\",\n  \"assetName\": \"21国债01\",\n  \"trdSide\": \"买入\",\n  \"amount\": 10000000,\n  \"rate\": 3.5,\n  \"amountReqFlag\": true,\n  \"rateReqFlag\": true\n}", "done": true, "done_reason": "stop", "context": [151644, 872, 198, 14880, 44063, 87752, 104976, 99886, 108704, 106637, 17714, 5370, 68805, 3837, 91680, 31526, 5370, 64429, 3837, 100148, 102298, 92894, 87335, 66394, 28311, 310, 220, 17, 16, 114418, 15, 16, 220, 108532, 220, 16, 15, 15, 15, 31207, 220, 18, 13, 20, 4, 26853, 107, 96422, 50292, 18574, 310, 18137, 250, 222, 30534, 107439, 9370, 44931, 28311, 310, 481, 9329, 2078, 25, 4891, 222, 118, 100054, 46100, 198, 310, 481, 9329, 675, 25, 4891, 222, 118, 100054, 29991, 198, 310, 481, 489, 67, 16384, 25, 220, 99886, 100696, 9909, 108532, 14, 109430, 23083, 310, 481, 3311, 25, 220, 99886, 80094, 9909, 82587, 23083, 310, 481, 4379, 25, 19468, 102, 95355, 9909, 82587, 23083, 310, 481, 3311, 27234, 12135, 25, 220, 80094, 64471, 30440, 96422, 9909, 117661, 25511, 23083, 310, 481, 4379, 27234, 12135, 25, 19468, 102, 95355, 64471, 30440, 96422, 9909, 117661, 25511, 23083, 3374, 310, 80426, 66017, 68805, 28311, 310, 341, 394, 330, 9852, 2078, 788, 330, 17, 16, 114418, 15, 16, 756, 394, 330, 9852, 675, 788, 330, 17, 16, 114418, 15, 16, 756, 394, 330, 376, 67, 16384, 788, 330, 108532, 756, 394, 330, 6045, 788, 220, 16, 15, 15, 15, 15, 15, 15, 15, 345, 394, 330, 7698, 788, 220, 18, 13, 20, 345, 394, 330, 6045, 27234, 12135, 788, 830, 345, 394, 330, 7698, 27234, 12135, 788, 830, 198, 310, 335, 151645, 198, 151644, 77091, 198, 151667, 198, 99692, 3837, 107520, 85106, 54542, 20002, 103008, 104976, 99886, 108704, 90395, 105278, 106637, 17714, 105146, 9370, 5370, 68805, 1773, 101140, 3837, 104515, 104857, 101113, 20002, 104272, 3837, 103944, 100372, 101128, 55338, 104449, 3407, 20002, 107485, 9370, 108704, 20412, 36987, 17, 16, 114418, 15, 16, 220, 108532, 220, 16, 15, 15, 15, 31207, 220, 18, 13, 20, 4, 26853, 107, 96422, 50292, 55807, 85106, 107439, 9370, 44931, 100630, 9852, 2078, 5373, 9852, 675, 5373, 376, 67, 16384, 5373, 6045, 5373, 7698, 5373, 6045, 27234, 12135, 33108, 7698, 27234, 12135, 1773, 91572, 3837, 66017, 100645, 100470, 101137, 5370, 68805, 3837, 53153, 18830, 92894, 87335, 66394, 3407, 101140, 3837, 35946, 85106, 102450, 103991, 44931, 1773, 9852, 2078, 104583, 104976, 46100, 3837, 99817, 100687, 20412, 2073, 17, 16, 114418, 15, 16, 55807, 9852, 675, 20412, 29991, 3837, 100000, 2073, 17, 16, 114418, 15, 16, 55807, 376, 67, 16384, 20412, 108532, 3837, 99999, 68756, 2073, 108532, 55807, 6045, 20412, 99886, 80094, 3837, 20002, 103008, 82587, 20412, 16, 15, 15, 15, 31207, 3837, 102200, 16, 15, 11, 15, 15, 15, 11, 15, 15, 15, 23305, 3837, 99999, 6045, 104583, 16, 15, 15, 15, 15, 15, 15, 15, 1773, 7698, 20412, 18, 13, 20, 69982, 91676, 15, 13, 15, 18, 20, 1773, 6045, 27234, 12135, 20412, 117661, 25511, 3837, 99817, 104583, 1866, 3837, 99519, 80094, 30440, 96422, 1773, 7698, 27234, 12135, 100000, 1866, 3837, 99519, 102299, 30440, 96422, 1773, 55338, 44931, 71268, 88991, 103124, 3837, 80443, 114078, 3407, 85106, 101071, 107189, 92894, 87267, 9370, 32100, 3837, 101912, 75317, 105359, 64471, 88991, 3837, 100631, 111944, 64471, 88991, 1773, 77557, 3837, 80094, 64471, 88991, 54542, 17714, 82587, 31905, 3837, 104610, 66558, 1773, 99817, 20002, 99461, 100692, 107485, 82587, 3837, 99999, 114815, 3407, 100161, 3837, 103944, 5370, 68805, 88991, 3837, 80443, 108593, 9370, 107463, 17992, 57191, 100139, 17992, 3837, 110439, 19793, 26355, 66017, 68805, 1773, 81167, 55338, 44931, 71268, 88991, 42192, 29056, 33447, 3837, 102003, 43959, 103941, 9370, 5370, 64429, 34187, 8997, 151668, 271, 515, 220, 330, 9852, 2078, 788, 330, 17, 16, 114418, 15, 16, 756, 220, 330, 9852, 675, 788, 330, 17, 16, 114418, 15, 16, 756, 220, 330, 376, 67, 16384, 788, 330, 108532, 756, 220, 330, 6045, 788, 220, 16, 15, 15, 15, 15, 15, 15, 15, 345, 220, 330, 7698, 788, 220, 18, 13, 20, 345, 220, 330, 6045, 27234, 12135, 788, 830, 345, 220, 330, 7698, 27234, 12135, 788, 830, 198, 92], "total_duration": 9960672602, "load_duration": 25516200, "prompt_eval_count": 233, "prompt_eval_duration": 26089424, "eval_count": 401, "eval_duration": 9907984780}
2025-05-16 11:01:27,981 - __main__ - INFO - Raw model response: <think>
好的，我现在需要处理用户提供的债券交易文本，并将其解析为指定的JSON格式。首先，我要仔细阅读用户的要求，确保完全理解所有细节。

用户给出的文本是：“21国债01 买入 1000万 3.5% 可议价”。需要提取的字段包括assetCode、assetName、trdSide、amount、rate、amountReqFlag和rateReqFlag。同时，输出必须严格符合JSON格式，不能有其他文字说明。

首先，我需要识别每个字段。assetCode应该是债券代码，这里明显是“21国债01”。assetName是名称，也是“21国债01”。trdSide是买入，所以填“买入”。amount是交易金额，用户提供的数字是1000万，也就是10,000,000元，所以amount应该是10000000。rate是3.5%，即0.035。amountReqFlag是布尔值，这里应该是true，因为金额可议。rateReqFlag也是true，因为利率可议。所有字段都正确对应，没有遗漏。

需要检查是否有其他可能的错误，比如单位转换是否正确，或者数值是否正确。例如，金额是否正确处理为数字类型，而不是字符串。这里用户已经明确给出数字，所以没问题。

最后，确保JSON格式正确，没有额外的逗号或括号，严格按照示例输出格式。确认所有字段都正确无误后，就可以生成最终的JSON对象了。
</think>

{
  "assetCode": "21国债01",
  "assetName": "21国债01",
  "trdSide": "买入",
  "amount": 10000000,
  "rate": 3.5,
  "amountReqFlag": true,
  "rateReqFlag": true
}
2025-05-16 11:01:27,982 - __main__ - ERROR - JSON decode error: Expecting value: line 1 column 1 (char 0)
2025-05-16 11:01:27,982 - __main__ - INFO - Extracted JSON string: {
  "assetCode": "21国债01",
  "assetName": "21国债01",
  "trdSide": "买入",
  "amount": 10000000,
  "rate": 3.5,
  "amountReqFlag": true,
  "rateReqFlag": true
}
2025-05-16 11:01:27,982 - __main__ - INFO - Successfully parsed bond data: {'assetCode': '21国债01', 'assetName': '21国债01', 'trdSide': '买入', 'amount': 10000000, 'rate': 3.5, 'amountReqFlag': True, 'rateReqFlag': True}
2025-05-16 11:01:27,983 - __main__ - INFO - Successfully validated and returned parsed data: assetCode='21国债01' assetName='21国债01' trdSide='买入' amount=10000000.0 rate=3.5 amountReqFlag=True rateReqFlag=True
2025-05-16 11:02:01,343 - __main__ - INFO - Received request to parse bond text: 21国债01 买入 *1000万 *3.5% 
2025-05-16 11:02:01,355 - __main__ - INFO - Calling Ollama model with text: 21国债01 买入 *1000万 *3.5% 
2025-05-16 11:02:01,363 - __main__ - INFO - Ollama service is available
2025-05-16 11:02:01,388 - __main__ - INFO - Available models: {"models": [{"name": "qwen3:0.6b", "model": "qwen3:0.6b", "modified_at": "2025-05-08T01:27:52.753829715+08:00", "size": 522653526, "digest": "3bae9c93586b27bedaa979979733c2b0edd1d0defc745e9638f2161192a0ccf0", "details": {"parent_model": "", "format": "gguf", "family": "qwen3", "families": ["qwen3"], "parameter_size": "751.63M", "quantization_level": "Q4_K_M"}}]}
2025-05-16 11:02:01,402 - __main__ - INFO - Sending request to Ollama: {"model": "qwen3:0.6b", "prompt": "请将以下债券交易文本解析为JSON格式，只返回JSON对象，不要包含其他文字说明：\n            21国债01 买入 *1000万 *3.5% \n            \n            需要提取的字段：\n            - assetCode: 债券代码\n            - assetName: 债券名称\n            - trdSide: 交易方向（买入/卖出）\n            - amount: 交易金额（数字）\n            - rate: 利率（数字）\n            - amountReqFlag: 金额是否可议（布尔值）\n            - rateReqFlag: 利率是否可议（布尔值）\n            \n            示例输出格式：\n            {\n                \"assetCode\": \"21国债01\",\n                \"assetName\": \"21国债01\",\n                \"trdSide\": \"买入\",\n                \"amount\": 10000000,\n                \"rate\": 3.5,\n                \"amountReqFlag\": true,\n                \"rateReqFlag\": true\n            }", "stream": false}
2025-05-16 11:02:13,126 - __main__ - INFO - Received response from Ollama: {"model": "qwen3:0.6b", "created_at": "2025-05-16T03:02:13.119509Z", "response": "<think>\n好的，我现在需要处理用户提供的债券交易文本，将其解析为JSON格式。首先，我要仔细阅读用户提供的文本和要求的字段。用户给的例子中，文本是“21国债01 买入 *1000万 *3.5%”，并要求提取资产代码、名称、交易方向、金额、利率、金额是否可议、利率是否可议等字段。\n\n首先，资产代码应该是“21国债01”，这看起来直接对应文本中的第一个数字，所以没问题。债券名称也是一样的，所以“assetName”填入“21国债01”是正确的。\n\n接下来是交易方向，用户提供的文本中有“买入”，所以trdSide设为“买入”。金额是1000万，这里用户用了中文数字“*1000万”，需要转换为数字类型。注意用户可能希望金额以数字形式存储，所以这里直接写10000000即可。\n\n利率是3.5%，但用户可能希望以数值形式存储，所以rate设为3.5。金额是否可议是true，因为用户用了“*1000万”，但实际金额是1000万，可能这个标记是可议的，所以amountReqFlag设为true。同样，利率是否可议也是true，所以rateReqFlag设为true。\n\n现在检查所有字段是否符合要求，确保没有遗漏。比如，用户提到“金额是否可议”和“利率是否可议”，这两个字段都是布尔值，这里正确设置为true。确认所有字段都在JSON对象中，没有多余的文字说明，直接输出即可。\n</think>\n\n{\n  \"assetCode\": \"21国债01\",\n  \"assetName\": \"21国债01\",\n  \"trdSide\": \"买入\",\n  \"amount\": 10000000,\n  \"rate\": 3.5,\n  \"amountReqFlag\": true,\n  \"rateReqFlag\": true\n}", "done": true, "done_reason": "stop", "context": [151644, 872, 198, 14880, 44063, 87752, 104976, 99886, 108704, 106637, 17714, 5370, 68805, 3837, 91680, 31526, 5370, 64429, 3837, 100148, 102298, 92894, 87335, 66394, 28311, 310, 220, 17, 16, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 353, 18, 13, 20, 4, 83913, 310, 18137, 250, 222, 30534, 107439, 9370, 44931, 28311, 310, 481, 9329, 2078, 25, 4891, 222, 118, 100054, 46100, 198, 310, 481, 9329, 675, 25, 4891, 222, 118, 100054, 29991, 198, 310, 481, 489, 67, 16384, 25, 220, 99886, 100696, 9909, 108532, 14, 109430, 23083, 310, 481, 3311, 25, 220, 99886, 80094, 9909, 82587, 23083, 310, 481, 4379, 25, 19468, 102, 95355, 9909, 82587, 23083, 310, 481, 3311, 27234, 12135, 25, 220, 80094, 64471, 30440, 96422, 9909, 117661, 25511, 23083, 310, 481, 4379, 27234, 12135, 25, 19468, 102, 95355, 64471, 30440, 96422, 9909, 117661, 25511, 23083, 3374, 310, 80426, 66017, 68805, 28311, 310, 341, 394, 330, 9852, 2078, 788, 330, 17, 16, 114418, 15, 16, 756, 394, 330, 9852, 675, 788, 330, 17, 16, 114418, 15, 16, 756, 394, 330, 376, 67, 16384, 788, 330, 108532, 756, 394, 330, 6045, 788, 220, 16, 15, 15, 15, 15, 15, 15, 15, 345, 394, 330, 7698, 788, 220, 18, 13, 20, 345, 394, 330, 6045, 27234, 12135, 788, 830, 345, 394, 330, 7698, 27234, 12135, 788, 830, 198, 310, 335, 151645, 198, 151644, 77091, 198, 151667, 198, 99692, 3837, 107520, 85106, 54542, 20002, 103008, 104976, 99886, 108704, 3837, 105278, 106637, 17714, 5370, 68805, 1773, 101140, 3837, 104515, 104857, 101113, 20002, 103008, 108704, 33108, 101882, 9370, 44931, 1773, 20002, 89012, 111564, 15946, 3837, 108704, 20412, 2073, 17, 16, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 353, 18, 13, 20, 4, 33590, 62926, 101882, 107439, 99814, 46100, 5373, 29991, 5373, 99886, 100696, 5373, 80094, 5373, 102299, 5373, 80094, 64471, 30440, 96422, 5373, 102299, 64471, 30440, 96422, 49567, 44931, 3407, 101140, 3837, 99814, 46100, 104583, 2073, 17, 16, 114418, 15, 16, 33590, 43288, 104544, 101041, 103124, 108704, 101047, 102344, 82587, 3837, 99999, 114815, 1773, 104976, 29991, 74763, 99639, 100535, 3837, 99999, 2073, 9852, 675, 854, 68756, 17254, 2073, 17, 16, 114418, 15, 16, 854, 20412, 105045, 3407, 104326, 20412, 99886, 100696, 3837, 20002, 103008, 108704, 105656, 2073, 108532, 33590, 99999, 376, 67, 16384, 29635, 17714, 2073, 108532, 55807, 80094, 20412, 16, 15, 15, 15, 31207, 3837, 99817, 20002, 105764, 104811, 82587, 2073, 9, 16, 15, 15, 15, 31207, 33590, 85106, 105359, 17714, 82587, 31905, 1773, 60533, 20002, 87267, 99880, 80094, 23031, 82587, 100414, 105653, 3837, 99999, 99817, 101041, 61443, 16, 15, 15, 15, 15, 15, 15, 15, 104180, 3407, 102299, 20412, 18, 13, 20, 69982, 77288, 20002, 87267, 99880, 23031, 111944, 100414, 105653, 3837, 99999, 7698, 29635, 17714, 18, 13, 20, 1773, 80094, 64471, 30440, 96422, 20412, 1866, 3837, 99519, 20002, 105764, 2073, 9, 16, 15, 15, 15, 31207, 33590, 77288, 99912, 80094, 20412, 16, 15, 15, 15, 31207, 3837, 87267, 99487, 113743, 20412, 30440, 96422, 9370, 3837, 99999, 6045, 27234, 12135, 29635, 17714, 1866, 1773, 101165, 3837, 102299, 64471, 30440, 96422, 100000, 1866, 3837, 99999, 7698, 27234, 12135, 29635, 17714, 1866, 3407, 99601, 101071, 55338, 44931, 64471, 101137, 101882, 3837, 103944, 80443, 114078, 1773, 101912, 3837, 20002, 104496, 2073, 80094, 64471, 30440, 96422, 854, 33108, 2073, 102299, 64471, 30440, 96422, 33590, 105932, 44931, 100132, 117661, 25511, 3837, 99817, 88991, 43918, 17714, 1866, 1773, 81167, 55338, 44931, 102070, 5370, 64429, 15946, 3837, 80443, 115916, 109502, 66394, 3837, 101041, 66017, 104180, 8997, 151668, 271, 515, 220, 330, 9852, 2078, 788, 330, 17, 16, 114418, 15, 16, 756, 220, 330, 9852, 675, 788, 330, 17, 16, 114418, 15, 16, 756, 220, 330, 376, 67, 16384, 788, 330, 108532, 756, 220, 330, 6045, 788, 220, 16, 15, 15, 15, 15, 15, 15, 15, 345, 220, 330, 7698, 788, 220, 18, 13, 20, 345, 220, 330, 6045, 27234, 12135, 788, 830, 345, 220, 330, 7698, 27234, 12135, 788, 830, 198, 92], "total_duration": 11711022248, "load_duration": 25823781, "prompt_eval_count": 229, "prompt_eval_duration": 1717419659, "eval_count": 424, "eval_duration": 9967036200}
2025-05-16 11:02:13,126 - __main__ - INFO - Validating Ollama response: {"model": "qwen3:0.6b", "created_at": "2025-05-16T03:02:13.119509Z", "response": "<think>\n好的，我现在需要处理用户提供的债券交易文本，将其解析为JSON格式。首先，我要仔细阅读用户提供的文本和要求的字段。用户给的例子中，文本是“21国债01 买入 *1000万 *3.5%”，并要求提取资产代码、名称、交易方向、金额、利率、金额是否可议、利率是否可议等字段。\n\n首先，资产代码应该是“21国债01”，这看起来直接对应文本中的第一个数字，所以没问题。债券名称也是一样的，所以“assetName”填入“21国债01”是正确的。\n\n接下来是交易方向，用户提供的文本中有“买入”，所以trdSide设为“买入”。金额是1000万，这里用户用了中文数字“*1000万”，需要转换为数字类型。注意用户可能希望金额以数字形式存储，所以这里直接写10000000即可。\n\n利率是3.5%，但用户可能希望以数值形式存储，所以rate设为3.5。金额是否可议是true，因为用户用了“*1000万”，但实际金额是1000万，可能这个标记是可议的，所以amountReqFlag设为true。同样，利率是否可议也是true，所以rateReqFlag设为true。\n\n现在检查所有字段是否符合要求，确保没有遗漏。比如，用户提到“金额是否可议”和“利率是否可议”，这两个字段都是布尔值，这里正确设置为true。确认所有字段都在JSON对象中，没有多余的文字说明，直接输出即可。\n</think>\n\n{\n  \"assetCode\": \"21国债01\",\n  \"assetName\": \"21国债01\",\n  \"trdSide\": \"买入\",\n  \"amount\": 10000000,\n  \"rate\": 3.5,\n  \"amountReqFlag\": true,\n  \"rateReqFlag\": true\n}", "done": true, "done_reason": "stop", "context": [151644, 872, 198, 14880, 44063, 87752, 104976, 99886, 108704, 106637, 17714, 5370, 68805, 3837, 91680, 31526, 5370, 64429, 3837, 100148, 102298, 92894, 87335, 66394, 28311, 310, 220, 17, 16, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 353, 18, 13, 20, 4, 83913, 310, 18137, 250, 222, 30534, 107439, 9370, 44931, 28311, 310, 481, 9329, 2078, 25, 4891, 222, 118, 100054, 46100, 198, 310, 481, 9329, 675, 25, 4891, 222, 118, 100054, 29991, 198, 310, 481, 489, 67, 16384, 25, 220, 99886, 100696, 9909, 108532, 14, 109430, 23083, 310, 481, 3311, 25, 220, 99886, 80094, 9909, 82587, 23083, 310, 481, 4379, 25, 19468, 102, 95355, 9909, 82587, 23083, 310, 481, 3311, 27234, 12135, 25, 220, 80094, 64471, 30440, 96422, 9909, 117661, 25511, 23083, 310, 481, 4379, 27234, 12135, 25, 19468, 102, 95355, 64471, 30440, 96422, 9909, 117661, 25511, 23083, 3374, 310, 80426, 66017, 68805, 28311, 310, 341, 394, 330, 9852, 2078, 788, 330, 17, 16, 114418, 15, 16, 756, 394, 330, 9852, 675, 788, 330, 17, 16, 114418, 15, 16, 756, 394, 330, 376, 67, 16384, 788, 330, 108532, 756, 394, 330, 6045, 788, 220, 16, 15, 15, 15, 15, 15, 15, 15, 345, 394, 330, 7698, 788, 220, 18, 13, 20, 345, 394, 330, 6045, 27234, 12135, 788, 830, 345, 394, 330, 7698, 27234, 12135, 788, 830, 198, 310, 335, 151645, 198, 151644, 77091, 198, 151667, 198, 99692, 3837, 107520, 85106, 54542, 20002, 103008, 104976, 99886, 108704, 3837, 105278, 106637, 17714, 5370, 68805, 1773, 101140, 3837, 104515, 104857, 101113, 20002, 103008, 108704, 33108, 101882, 9370, 44931, 1773, 20002, 89012, 111564, 15946, 3837, 108704, 20412, 2073, 17, 16, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 353, 18, 13, 20, 4, 33590, 62926, 101882, 107439, 99814, 46100, 5373, 29991, 5373, 99886, 100696, 5373, 80094, 5373, 102299, 5373, 80094, 64471, 30440, 96422, 5373, 102299, 64471, 30440, 96422, 49567, 44931, 3407, 101140, 3837, 99814, 46100, 104583, 2073, 17, 16, 114418, 15, 16, 33590, 43288, 104544, 101041, 103124, 108704, 101047, 102344, 82587, 3837, 99999, 114815, 1773, 104976, 29991, 74763, 99639, 100535, 3837, 99999, 2073, 9852, 675, 854, 68756, 17254, 2073, 17, 16, 114418, 15, 16, 854, 20412, 105045, 3407, 104326, 20412, 99886, 100696, 3837, 20002, 103008, 108704, 105656, 2073, 108532, 33590, 99999, 376, 67, 16384, 29635, 17714, 2073, 108532, 55807, 80094, 20412, 16, 15, 15, 15, 31207, 3837, 99817, 20002, 105764, 104811, 82587, 2073, 9, 16, 15, 15, 15, 31207, 33590, 85106, 105359, 17714, 82587, 31905, 1773, 60533, 20002, 87267, 99880, 80094, 23031, 82587, 100414, 105653, 3837, 99999, 99817, 101041, 61443, 16, 15, 15, 15, 15, 15, 15, 15, 104180, 3407, 102299, 20412, 18, 13, 20, 69982, 77288, 20002, 87267, 99880, 23031, 111944, 100414, 105653, 3837, 99999, 7698, 29635, 17714, 18, 13, 20, 1773, 80094, 64471, 30440, 96422, 20412, 1866, 3837, 99519, 20002, 105764, 2073, 9, 16, 15, 15, 15, 31207, 33590, 77288, 99912, 80094, 20412, 16, 15, 15, 15, 31207, 3837, 87267, 99487, 113743, 20412, 30440, 96422, 9370, 3837, 99999, 6045, 27234, 12135, 29635, 17714, 1866, 1773, 101165, 3837, 102299, 64471, 30440, 96422, 100000, 1866, 3837, 99999, 7698, 27234, 12135, 29635, 17714, 1866, 3407, 99601, 101071, 55338, 44931, 64471, 101137, 101882, 3837, 103944, 80443, 114078, 1773, 101912, 3837, 20002, 104496, 2073, 80094, 64471, 30440, 96422, 854, 33108, 2073, 102299, 64471, 30440, 96422, 33590, 105932, 44931, 100132, 117661, 25511, 3837, 99817, 88991, 43918, 17714, 1866, 1773, 81167, 55338, 44931, 102070, 5370, 64429, 15946, 3837, 80443, 115916, 109502, 66394, 3837, 101041, 66017, 104180, 8997, 151668, 271, 515, 220, 330, 9852, 2078, 788, 330, 17, 16, 114418, 15, 16, 756, 220, 330, 9852, 675, 788, 330, 17, 16, 114418, 15, 16, 756, 220, 330, 376, 67, 16384, 788, 330, 108532, 756, 220, 330, 6045, 788, 220, 16, 15, 15, 15, 15, 15, 15, 15, 345, 220, 330, 7698, 788, 220, 18, 13, 20, 345, 220, 330, 6045, 27234, 12135, 788, 830, 345, 220, 330, 7698, 27234, 12135, 788, 830, 198, 92], "total_duration": 11711022248, "load_duration": 25823781, "prompt_eval_count": 229, "prompt_eval_duration": 1717419659, "eval_count": 424, "eval_duration": 9967036200}
2025-05-16 11:02:13,127 - __main__ - INFO - Raw model response: <think>
好的，我现在需要处理用户提供的债券交易文本，将其解析为JSON格式。首先，我要仔细阅读用户提供的文本和要求的字段。用户给的例子中，文本是“21国债01 买入 *1000万 *3.5%”，并要求提取资产代码、名称、交易方向、金额、利率、金额是否可议、利率是否可议等字段。

首先，资产代码应该是“21国债01”，这看起来直接对应文本中的第一个数字，所以没问题。债券名称也是一样的，所以“assetName”填入“21国债01”是正确的。

接下来是交易方向，用户提供的文本中有“买入”，所以trdSide设为“买入”。金额是1000万，这里用户用了中文数字“*1000万”，需要转换为数字类型。注意用户可能希望金额以数字形式存储，所以这里直接写10000000即可。

利率是3.5%，但用户可能希望以数值形式存储，所以rate设为3.5。金额是否可议是true，因为用户用了“*1000万”，但实际金额是1000万，可能这个标记是可议的，所以amountReqFlag设为true。同样，利率是否可议也是true，所以rateReqFlag设为true。

现在检查所有字段是否符合要求，确保没有遗漏。比如，用户提到“金额是否可议”和“利率是否可议”，这两个字段都是布尔值，这里正确设置为true。确认所有字段都在JSON对象中，没有多余的文字说明，直接输出即可。
</think>

{
  "assetCode": "21国债01",
  "assetName": "21国债01",
  "trdSide": "买入",
  "amount": 10000000,
  "rate": 3.5,
  "amountReqFlag": true,
  "rateReqFlag": true
}
2025-05-16 11:02:13,127 - __main__ - ERROR - JSON decode error: Expecting value: line 1 column 1 (char 0)
2025-05-16 11:02:13,127 - __main__ - INFO - Extracted JSON string: {
  "assetCode": "21国债01",
  "assetName": "21国债01",
  "trdSide": "买入",
  "amount": 10000000,
  "rate": 3.5,
  "amountReqFlag": true,
  "rateReqFlag": true
}
2025-05-16 11:02:13,127 - __main__ - INFO - Successfully parsed bond data: {'assetCode': '21国债01', 'assetName': '21国债01', 'trdSide': '买入', 'amount': 10000000, 'rate': 3.5, 'amountReqFlag': True, 'rateReqFlag': True}
2025-05-16 11:02:13,129 - __main__ - INFO - Successfully validated and returned parsed data: assetCode='21国债01' assetName='21国债01' trdSide='买入' amount=10000000.0 rate=3.5 amountReqFlag=True rateReqFlag=True
2025-05-16 11:02:19,408 - __main__ - INFO - Received request to parse bond text: 21国债01 买入 *1000万 3.5% 
2025-05-16 11:02:19,424 - __main__ - INFO - Calling Ollama model with text: 21国债01 买入 *1000万 3.5% 
2025-05-16 11:02:19,433 - __main__ - INFO - Ollama service is available
2025-05-16 11:02:19,457 - __main__ - INFO - Available models: {"models": [{"name": "qwen3:0.6b", "model": "qwen3:0.6b", "modified_at": "2025-05-08T01:27:52.753829715+08:00", "size": 522653526, "digest": "3bae9c93586b27bedaa979979733c2b0edd1d0defc745e9638f2161192a0ccf0", "details": {"parent_model": "", "format": "gguf", "family": "qwen3", "families": ["qwen3"], "parameter_size": "751.63M", "quantization_level": "Q4_K_M"}}]}
2025-05-16 11:02:19,470 - __main__ - INFO - Sending request to Ollama: {"model": "qwen3:0.6b", "prompt": "请将以下债券交易文本解析为JSON格式，只返回JSON对象，不要包含其他文字说明：\n            21国债01 买入 *1000万 3.5% \n            \n            需要提取的字段：\n            - assetCode: 债券代码\n            - assetName: 债券名称\n            - trdSide: 交易方向（买入/卖出）\n            - amount: 交易金额（数字）\n            - rate: 利率（数字）\n            - amountReqFlag: 金额是否可议（布尔值）\n            - rateReqFlag: 利率是否可议（布尔值）\n            \n            示例输出格式：\n            {\n                \"assetCode\": \"21国债01\",\n                \"assetName\": \"21国债01\",\n                \"trdSide\": \"买入\",\n                \"amount\": 10000000,\n                \"rate\": 3.5,\n                \"amountReqFlag\": true,\n                \"rateReqFlag\": true\n            }", "stream": false}
2025-05-16 11:02:31,758 - __main__ - INFO - Received response from Ollama: {"model": "qwen3:0.6b", "created_at": "2025-05-16T03:02:31.749522Z", "response": "<think>\n好的，我现在需要处理用户提供的债券交易文本，并将其解析为JSON格式。首先，我得仔细阅读用户提供的示例，确保理解他们的需求。用户要求提取特定字段，并且只返回JSON对象，不包含其他文字说明。所以，我需要严格按照他们的示例来构建JSON结构。\n\n首先，用户给出的文本是：“21国债01 买入 *1000万 3.5%”。我要提取的字段包括assetCode、assetName、trdSide、amount、rate、amountReqFlag、rateReqFlag。看起来这里的21国债01是资产代码和名称，买入是交易方向，金额是1000万，利率是3.5%，金额是否可议和利率是否可议需要判断。根据示例，金额和利率都是数字，所以amount和rate应该是数值类型，而amountReqFlag和rateReqFlag是布尔值。需要确认用户是否需要这些字段，但根据问题描述，用户已经明确要求提取这些字段，所以直接提取即可。\n\n接下来，检查是否有其他可能的字段需要考虑，比如是否还有其他信息被遗漏。例如，文本中还有“*1000万 3.5%”，这里的*可能代表某种符号，但用户示例中金额是整数，所以可能需要保留数值形式，而金额是否可议和利率是否可议可能已经隐含了这些条件。例如，金额是1000万，所以amountReqFlag应该是true，因为金额确实被要求，而利率是3.5%，所以rateReqFlag也是true。因此，最终的JSON对象应该包含所有这些字段，并且数值类型正确，布尔值正确设置。\n\n最后，确保JSON的格式正确，没有语法错误，并且只包含用户指定的字段。这样处理应该能满足用户的需求。\n</think>\n\n{\n    \"assetCode\": \"21国债01\",\n    \"assetName\": \"21国债01\",\n    \"trdSide\": \"买入\",\n    \"amount\": 10000000,\n    \"rate\": 3.5,\n    \"amountReqFlag\": true,\n    \"rateReqFlag\": true\n}", "done": true, "done_reason": "stop", "context": [151644, 872, 198, 14880, 44063, 87752, 104976, 99886, 108704, 106637, 17714, 5370, 68805, 3837, 91680, 31526, 5370, 64429, 3837, 100148, 102298, 92894, 87335, 66394, 28311, 310, 220, 17, 16, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 220, 18, 13, 20, 4, 83913, 310, 18137, 250, 222, 30534, 107439, 9370, 44931, 28311, 310, 481, 9329, 2078, 25, 4891, 222, 118, 100054, 46100, 198, 310, 481, 9329, 675, 25, 4891, 222, 118, 100054, 29991, 198, 310, 481, 489, 67, 16384, 25, 220, 99886, 100696, 9909, 108532, 14, 109430, 23083, 310, 481, 3311, 25, 220, 99886, 80094, 9909, 82587, 23083, 310, 481, 4379, 25, 19468, 102, 95355, 9909, 82587, 23083, 310, 481, 3311, 27234, 12135, 25, 220, 80094, 64471, 30440, 96422, 9909, 117661, 25511, 23083, 310, 481, 4379, 27234, 12135, 25, 19468, 102, 95355, 64471, 30440, 96422, 9909, 117661, 25511, 23083, 3374, 310, 80426, 66017, 68805, 28311, 310, 341, 394, 330, 9852, 2078, 788, 330, 17, 16, 114418, 15, 16, 756, 394, 330, 9852, 675, 788, 330, 17, 16, 114418, 15, 16, 756, 394, 330, 376, 67, 16384, 788, 330, 108532, 756, 394, 330, 6045, 788, 220, 16, 15, 15, 15, 15, 15, 15, 15, 345, 394, 330, 7698, 788, 220, 18, 13, 20, 345, 394, 330, 6045, 27234, 12135, 788, 830, 345, 394, 330, 7698, 27234, 12135, 788, 830, 198, 310, 335, 151645, 198, 151644, 77091, 198, 151667, 198, 99692, 3837, 107520, 85106, 54542, 20002, 103008, 104976, 99886, 108704, 90395, 105278, 106637, 17714, 5370, 68805, 1773, 101140, 3837, 35946, 49828, 104857, 101113, 20002, 103008, 19793, 26355, 3837, 103944, 101128, 104056, 100354, 1773, 20002, 101882, 107439, 105149, 44931, 90395, 100136, 91680, 31526, 5370, 64429, 3837, 16530, 102298, 92894, 87335, 66394, 1773, 99999, 3837, 35946, 85106, 110439, 104056, 19793, 26355, 36407, 104004, 5370, 100166, 3407, 101140, 3837, 20002, 107485, 9370, 108704, 20412, 36987, 17, 16, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 220, 18, 13, 20, 4, 55807, 104515, 107439, 9370, 44931, 100630, 9852, 2078, 5373, 9852, 675, 5373, 376, 67, 16384, 5373, 6045, 5373, 7698, 5373, 6045, 27234, 12135, 5373, 7698, 27234, 12135, 1773, 104544, 106370, 17, 16, 114418, 15, 16, 20412, 99814, 46100, 33108, 29991, 3837, 108532, 20412, 99886, 100696, 3837, 80094, 20412, 16, 15, 15, 15, 31207, 3837, 102299, 20412, 18, 13, 20, 69982, 80094, 64471, 30440, 96422, 33108, 102299, 64471, 30440, 96422, 85106, 104317, 1773, 100345, 19793, 26355, 3837, 80094, 33108, 102299, 100132, 82587, 3837, 99999, 6045, 33108, 7698, 104583, 111944, 31905, 3837, 68536, 6045, 27234, 12135, 33108, 7698, 27234, 12135, 20412, 117661, 25511, 1773, 85106, 81167, 20002, 64471, 85106, 100001, 44931, 3837, 77288, 100345, 86119, 53481, 3837, 20002, 99461, 100692, 101882, 107439, 100001, 44931, 3837, 99999, 101041, 107439, 104180, 3407, 104326, 3837, 101071, 107189, 92894, 87267, 9370, 44931, 85106, 101118, 3837, 101912, 64471, 100626, 92894, 27369, 99250, 114078, 1773, 77557, 3837, 108704, 15946, 100626, 2073, 9, 16, 15, 15, 15, 31207, 220, 18, 13, 20, 4, 33590, 106370, 9, 87267, 99661, 102988, 108872, 3837, 77288, 20002, 19793, 26355, 15946, 80094, 20412, 63431, 8863, 3837, 99999, 87267, 85106, 104465, 111944, 100414, 3837, 68536, 80094, 64471, 30440, 96422, 33108, 102299, 64471, 30440, 96422, 87267, 99461, 99707, 95312, 34187, 100001, 76095, 1773, 77557, 3837, 80094, 20412, 16, 15, 15, 15, 31207, 3837, 99999, 6045, 27234, 12135, 104583, 1866, 3837, 99519, 80094, 102068, 99250, 101882, 3837, 68536, 102299, 20412, 18, 13, 20, 69982, 99999, 7698, 27234, 12135, 100000, 1866, 1773, 101886, 3837, 103941, 9370, 5370, 64429, 99730, 102298, 55338, 100001, 44931, 90395, 100136, 111944, 31905, 88991, 3837, 117661, 25511, 88991, 43918, 3407, 100161, 3837, 103944, 5370, 9370, 68805, 88991, 3837, 80443, 117206, 32100, 90395, 100136, 91680, 102298, 20002, 105146, 9370, 44931, 1773, 99654, 54542, 99730, 112809, 20002, 104378, 8997, 151668, 271, 515, 262, 330, 9852, 2078, 788, 330, 17, 16, 114418, 15, 16, 756, 262, 330, 9852, 675, 788, 330, 17, 16, 114418, 15, 16, 756, 262, 330, 376, 67, 16384, 788, 330, 108532, 756, 262, 330, 6045, 788, 220, 16, 15, 15, 15, 15, 15, 15, 15, 345, 262, 330, 7698, 788, 220, 18, 13, 20, 345, 262, 330, 6045, 27234, 12135, 788, 830, 345, 262, 330, 7698, 27234, 12135, 788, 830, 198, 92], "total_duration": 12271702514, "load_duration": 22826081, "prompt_eval_count": 229, "prompt_eval_duration": 1598976675, "eval_count": 462, "eval_duration": 10649210511}
2025-05-16 11:02:31,759 - __main__ - INFO - Validating Ollama response: {"model": "qwen3:0.6b", "created_at": "2025-05-16T03:02:31.749522Z", "response": "<think>\n好的，我现在需要处理用户提供的债券交易文本，并将其解析为JSON格式。首先，我得仔细阅读用户提供的示例，确保理解他们的需求。用户要求提取特定字段，并且只返回JSON对象，不包含其他文字说明。所以，我需要严格按照他们的示例来构建JSON结构。\n\n首先，用户给出的文本是：“21国债01 买入 *1000万 3.5%”。我要提取的字段包括assetCode、assetName、trdSide、amount、rate、amountReqFlag、rateReqFlag。看起来这里的21国债01是资产代码和名称，买入是交易方向，金额是1000万，利率是3.5%，金额是否可议和利率是否可议需要判断。根据示例，金额和利率都是数字，所以amount和rate应该是数值类型，而amountReqFlag和rateReqFlag是布尔值。需要确认用户是否需要这些字段，但根据问题描述，用户已经明确要求提取这些字段，所以直接提取即可。\n\n接下来，检查是否有其他可能的字段需要考虑，比如是否还有其他信息被遗漏。例如，文本中还有“*1000万 3.5%”，这里的*可能代表某种符号，但用户示例中金额是整数，所以可能需要保留数值形式，而金额是否可议和利率是否可议可能已经隐含了这些条件。例如，金额是1000万，所以amountReqFlag应该是true，因为金额确实被要求，而利率是3.5%，所以rateReqFlag也是true。因此，最终的JSON对象应该包含所有这些字段，并且数值类型正确，布尔值正确设置。\n\n最后，确保JSON的格式正确，没有语法错误，并且只包含用户指定的字段。这样处理应该能满足用户的需求。\n</think>\n\n{\n    \"assetCode\": \"21国债01\",\n    \"assetName\": \"21国债01\",\n    \"trdSide\": \"买入\",\n    \"amount\": 10000000,\n    \"rate\": 3.5,\n    \"amountReqFlag\": true,\n    \"rateReqFlag\": true\n}", "done": true, "done_reason": "stop", "context": [151644, 872, 198, 14880, 44063, 87752, 104976, 99886, 108704, 106637, 17714, 5370, 68805, 3837, 91680, 31526, 5370, 64429, 3837, 100148, 102298, 92894, 87335, 66394, 28311, 310, 220, 17, 16, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 220, 18, 13, 20, 4, 83913, 310, 18137, 250, 222, 30534, 107439, 9370, 44931, 28311, 310, 481, 9329, 2078, 25, 4891, 222, 118, 100054, 46100, 198, 310, 481, 9329, 675, 25, 4891, 222, 118, 100054, 29991, 198, 310, 481, 489, 67, 16384, 25, 220, 99886, 100696, 9909, 108532, 14, 109430, 23083, 310, 481, 3311, 25, 220, 99886, 80094, 9909, 82587, 23083, 310, 481, 4379, 25, 19468, 102, 95355, 9909, 82587, 23083, 310, 481, 3311, 27234, 12135, 25, 220, 80094, 64471, 30440, 96422, 9909, 117661, 25511, 23083, 310, 481, 4379, 27234, 12135, 25, 19468, 102, 95355, 64471, 30440, 96422, 9909, 117661, 25511, 23083, 3374, 310, 80426, 66017, 68805, 28311, 310, 341, 394, 330, 9852, 2078, 788, 330, 17, 16, 114418, 15, 16, 756, 394, 330, 9852, 675, 788, 330, 17, 16, 114418, 15, 16, 756, 394, 330, 376, 67, 16384, 788, 330, 108532, 756, 394, 330, 6045, 788, 220, 16, 15, 15, 15, 15, 15, 15, 15, 345, 394, 330, 7698, 788, 220, 18, 13, 20, 345, 394, 330, 6045, 27234, 12135, 788, 830, 345, 394, 330, 7698, 27234, 12135, 788, 830, 198, 310, 335, 151645, 198, 151644, 77091, 198, 151667, 198, 99692, 3837, 107520, 85106, 54542, 20002, 103008, 104976, 99886, 108704, 90395, 105278, 106637, 17714, 5370, 68805, 1773, 101140, 3837, 35946, 49828, 104857, 101113, 20002, 103008, 19793, 26355, 3837, 103944, 101128, 104056, 100354, 1773, 20002, 101882, 107439, 105149, 44931, 90395, 100136, 91680, 31526, 5370, 64429, 3837, 16530, 102298, 92894, 87335, 66394, 1773, 99999, 3837, 35946, 85106, 110439, 104056, 19793, 26355, 36407, 104004, 5370, 100166, 3407, 101140, 3837, 20002, 107485, 9370, 108704, 20412, 36987, 17, 16, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 220, 18, 13, 20, 4, 55807, 104515, 107439, 9370, 44931, 100630, 9852, 2078, 5373, 9852, 675, 5373, 376, 67, 16384, 5373, 6045, 5373, 7698, 5373, 6045, 27234, 12135, 5373, 7698, 27234, 12135, 1773, 104544, 106370, 17, 16, 114418, 15, 16, 20412, 99814, 46100, 33108, 29991, 3837, 108532, 20412, 99886, 100696, 3837, 80094, 20412, 16, 15, 15, 15, 31207, 3837, 102299, 20412, 18, 13, 20, 69982, 80094, 64471, 30440, 96422, 33108, 102299, 64471, 30440, 96422, 85106, 104317, 1773, 100345, 19793, 26355, 3837, 80094, 33108, 102299, 100132, 82587, 3837, 99999, 6045, 33108, 7698, 104583, 111944, 31905, 3837, 68536, 6045, 27234, 12135, 33108, 7698, 27234, 12135, 20412, 117661, 25511, 1773, 85106, 81167, 20002, 64471, 85106, 100001, 44931, 3837, 77288, 100345, 86119, 53481, 3837, 20002, 99461, 100692, 101882, 107439, 100001, 44931, 3837, 99999, 101041, 107439, 104180, 3407, 104326, 3837, 101071, 107189, 92894, 87267, 9370, 44931, 85106, 101118, 3837, 101912, 64471, 100626, 92894, 27369, 99250, 114078, 1773, 77557, 3837, 108704, 15946, 100626, 2073, 9, 16, 15, 15, 15, 31207, 220, 18, 13, 20, 4, 33590, 106370, 9, 87267, 99661, 102988, 108872, 3837, 77288, 20002, 19793, 26355, 15946, 80094, 20412, 63431, 8863, 3837, 99999, 87267, 85106, 104465, 111944, 100414, 3837, 68536, 80094, 64471, 30440, 96422, 33108, 102299, 64471, 30440, 96422, 87267, 99461, 99707, 95312, 34187, 100001, 76095, 1773, 77557, 3837, 80094, 20412, 16, 15, 15, 15, 31207, 3837, 99999, 6045, 27234, 12135, 104583, 1866, 3837, 99519, 80094, 102068, 99250, 101882, 3837, 68536, 102299, 20412, 18, 13, 20, 69982, 99999, 7698, 27234, 12135, 100000, 1866, 1773, 101886, 3837, 103941, 9370, 5370, 64429, 99730, 102298, 55338, 100001, 44931, 90395, 100136, 111944, 31905, 88991, 3837, 117661, 25511, 88991, 43918, 3407, 100161, 3837, 103944, 5370, 9370, 68805, 88991, 3837, 80443, 117206, 32100, 90395, 100136, 91680, 102298, 20002, 105146, 9370, 44931, 1773, 99654, 54542, 99730, 112809, 20002, 104378, 8997, 151668, 271, 515, 262, 330, 9852, 2078, 788, 330, 17, 16, 114418, 15, 16, 756, 262, 330, 9852, 675, 788, 330, 17, 16, 114418, 15, 16, 756, 262, 330, 376, 67, 16384, 788, 330, 108532, 756, 262, 330, 6045, 788, 220, 16, 15, 15, 15, 15, 15, 15, 15, 345, 262, 330, 7698, 788, 220, 18, 13, 20, 345, 262, 330, 6045, 27234, 12135, 788, 830, 345, 262, 330, 7698, 27234, 12135, 788, 830, 198, 92], "total_duration": 12271702514, "load_duration": 22826081, "prompt_eval_count": 229, "prompt_eval_duration": 1598976675, "eval_count": 462, "eval_duration": 10649210511}
2025-05-16 11:02:31,759 - __main__ - INFO - Raw model response: <think>
好的，我现在需要处理用户提供的债券交易文本，并将其解析为JSON格式。首先，我得仔细阅读用户提供的示例，确保理解他们的需求。用户要求提取特定字段，并且只返回JSON对象，不包含其他文字说明。所以，我需要严格按照他们的示例来构建JSON结构。

首先，用户给出的文本是：“21国债01 买入 *1000万 3.5%”。我要提取的字段包括assetCode、assetName、trdSide、amount、rate、amountReqFlag、rateReqFlag。看起来这里的21国债01是资产代码和名称，买入是交易方向，金额是1000万，利率是3.5%，金额是否可议和利率是否可议需要判断。根据示例，金额和利率都是数字，所以amount和rate应该是数值类型，而amountReqFlag和rateReqFlag是布尔值。需要确认用户是否需要这些字段，但根据问题描述，用户已经明确要求提取这些字段，所以直接提取即可。

接下来，检查是否有其他可能的字段需要考虑，比如是否还有其他信息被遗漏。例如，文本中还有“*1000万 3.5%”，这里的*可能代表某种符号，但用户示例中金额是整数，所以可能需要保留数值形式，而金额是否可议和利率是否可议可能已经隐含了这些条件。例如，金额是1000万，所以amountReqFlag应该是true，因为金额确实被要求，而利率是3.5%，所以rateReqFlag也是true。因此，最终的JSON对象应该包含所有这些字段，并且数值类型正确，布尔值正确设置。

最后，确保JSON的格式正确，没有语法错误，并且只包含用户指定的字段。这样处理应该能满足用户的需求。
</think>

{
    "assetCode": "21国债01",
    "assetName": "21国债01",
    "trdSide": "买入",
    "amount": 10000000,
    "rate": 3.5,
    "amountReqFlag": true,
    "rateReqFlag": true
}
2025-05-16 11:02:31,759 - __main__ - ERROR - JSON decode error: Expecting value: line 1 column 1 (char 0)
2025-05-16 11:02:31,759 - __main__ - INFO - Extracted JSON string: {
    "assetCode": "21国债01",
    "assetName": "21国债01",
    "trdSide": "买入",
    "amount": 10000000,
    "rate": 3.5,
    "amountReqFlag": true,
    "rateReqFlag": true
}
2025-05-16 11:02:31,759 - __main__ - INFO - Successfully parsed bond data: {'assetCode': '21国债01', 'assetName': '21国债01', 'trdSide': '买入', 'amount': 10000000, 'rate': 3.5, 'amountReqFlag': True, 'rateReqFlag': True}
2025-05-16 11:02:31,760 - __main__ - INFO - Successfully validated and returned parsed data: assetCode='21国债01' assetName='21国债01' trdSide='买入' amount=10000000.0 rate=3.5 amountReqFlag=True rateReqFlag=True
2025-05-16 11:07:27,887 - __main__ - INFO - Starting bond text parsing service...
2025-05-16 11:07:36,369 - __main__ - INFO - Received request to parse bond text: 21国债01 买入 *1000万 3.5% 
2025-05-16 11:07:36,381 - __main__ - INFO - Calling Ollama model with text: 21国债01 买入 *1000万 3.5% 
2025-05-16 11:07:36,405 - __main__ - INFO - Ollama service is available
2025-05-16 11:07:36,417 - __main__ - INFO - Available models: {"models": [{"name": "qwen3:0.6b", "model": "qwen3:0.6b", "modified_at": "2025-05-08T01:27:52.753829715+08:00", "size": 522653526, "digest": "3bae9c93586b27bedaa979979733c2b0edd1d0defc745e9638f2161192a0ccf0", "details": {"parent_model": "", "format": "gguf", "family": "qwen3", "families": ["qwen3"], "parameter_size": "751.63M", "quantization_level": "Q4_K_M"}}]}
2025-05-16 11:07:36,431 - __main__ - INFO - Sending request to Ollama: {"model": "qwen3:0.6b", "prompt": "请将以下债券交易文本解析为JSON格式，只返回JSON对象，不要包含其他文字说明：\n            21国债01 买入 *1000万 3.5% \n            \n            需要提取的字段：\n            - assetCode: 债券代码\n            - assetName: 债券名称\n            - trdSide: 交易方向（买入/卖出）\n            - amount: 交易金额（数字）\n            - rate: 利率（数字）\n            - amountReqFlag: 金额是否可议（布尔值，如果金额前有*号表示需要请示）\n            - rateReqFlag: 利率是否可议（布尔值，如果利率前有*号表示需要请示）\n            \n            示例输出格式：\n            {\n                \"assetCode\": \"21国债01\",\n                \"assetName\": \"21国债01\",\n                \"trdSide\": \"买入\",\n                \"amount\": 10000000,\n                \"rate\": 3.5,\n                \"amountReqFlag\": true,\n                \"rateReqFlag\": true\n            }\n            \n            注意：\n            1. 如果金额前有*号（如*1000万），表示金额需要请示\n            2. 如果利率前有*号（如*3.5%），表示利率需要请示\n            3. 金额单位：万、亿需要转换为具体数字（万*10000，亿*100000000）\n            4. 利率需要去掉%号转换为数字", "stream": false}
2025-05-16 11:08:06,438 - __main__ - ERROR - Request to Ollama model timed out
2025-05-16 11:08:20,872 - __main__ - INFO - Received request to parse bond text: 21国债01 买入 *1000万 3.5% 
2025-05-16 11:08:20,885 - __main__ - INFO - Calling Ollama model with text: 21国债01 买入 *1000万 3.5% 
2025-05-16 11:08:20,894 - __main__ - INFO - Ollama service is available
2025-05-16 11:08:20,919 - __main__ - INFO - Available models: {"models": [{"name": "qwen3:0.6b", "model": "qwen3:0.6b", "modified_at": "2025-05-08T01:27:52.753829715+08:00", "size": 522653526, "digest": "3bae9c93586b27bedaa979979733c2b0edd1d0defc745e9638f2161192a0ccf0", "details": {"parent_model": "", "format": "gguf", "family": "qwen3", "families": ["qwen3"], "parameter_size": "751.63M", "quantization_level": "Q4_K_M"}}]}
2025-05-16 11:08:20,939 - __main__ - INFO - Sending request to Ollama: {"model": "qwen3:0.6b", "prompt": "请将以下债券交易文本解析为JSON格式，只返回JSON对象，不要包含其他文字说明：\n            21国债01 买入 *1000万 3.5% \n            \n            需要提取的字段：\n            - assetCode: 债券代码\n            - assetName: 债券名称\n            - trdSide: 交易方向（买入/卖出）\n            - amount: 交易金额（数字）\n            - rate: 利率（数字）\n            - amountReqFlag: 金额是否可议（布尔值，如果金额前有*号表示需要请示）\n            - rateReqFlag: 利率是否可议（布尔值，如果利率前有*号表示需要请示）\n            \n            示例输出格式：\n            {\n                \"assetCode\": \"21国债01\",\n                \"assetName\": \"21国债01\",\n                \"trdSide\": \"买入\",\n                \"amount\": 10000000,\n                \"rate\": 3.5,\n                \"amountReqFlag\": true,\n                \"rateReqFlag\": true\n            }\n            \n            注意：\n            1. 如果金额前有*号（如*1000万），表示金额需要请示\n            2. 如果利率前有*号（如*3.5%），表示利率需要请示\n            3. 金额单位：万、亿需要转换为具体数字（万*10000，亿*100000000）\n            4. 利率需要去掉%号转换为数字", "stream": false}
2025-05-16 11:08:32,456 - __main__ - INFO - Received response from Ollama: {"model": "qwen3:0.6b", "created_at": "2025-05-16T03:08:32.448754Z", "response": "<think>\n好的，我现在需要处理用户提供的债券交易文本，并将其解析为JSON格式。首先，我要仔细阅读用户的要求，确保不遗漏任何细节。\n\n用户提供的文本是：“21国债01 买入 *1000万 3.5%”。需要提取的字段有assetCode、assetName、trdSide、amount、rate、amountReqFlag、rateReqFlag。另外，金额单位要转换为万或亿，比如*1000万变成10000000，利率去掉%号转数字。\n\n首先，assetCode应该是“21国债01”，看起来没问题。assetName也是“21国债01”，不需要修改。trdSide是“买入”，正确。\n\n接下来金额部分，用户提到如果金额前有*号，比如*1000万，需要请示。这里金额是*1000万，所以amountReqFlag应该是true。金额单位需要转换为数字，万*10000，所以1000万变为10000000。同样，利率前有*号，所以rateReqFlag是true，利率转换为数字3.5。\n\n现在检查是否有其他需要注意的地方。例如，利率是否需要去掉%号，是的，转换成3.5。金额单位是否正确转换，是的。所有字段都正确提取，并且格式符合示例要求。最后，确保JSON对象不包含任何额外的文字说明，只返回JSON。\n\n确认无误后，输出结果应该是一个包含所有正确字段的JSON对象。\n</think>\n\n{\n  \"assetCode\": \"21国债01\",\n  \"assetName\": \"21国债01\",\n  \"trdSide\": \"买入\",\n  \"amount\": 10000000,\n  \"rate\": 3.5,\n  \"amountReqFlag\": true,\n  \"rateReqFlag\": true\n}", "done": true, "done_reason": "stop", "context": [151644, 872, 198, 14880, 44063, 87752, 104976, 99886, 108704, 106637, 17714, 5370, 68805, 3837, 91680, 31526, 5370, 64429, 3837, 100148, 102298, 92894, 87335, 66394, 28311, 310, 220, 17, 16, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 220, 18, 13, 20, 4, 83913, 310, 18137, 250, 222, 30534, 107439, 9370, 44931, 28311, 310, 481, 9329, 2078, 25, 4891, 222, 118, 100054, 46100, 198, 310, 481, 9329, 675, 25, 4891, 222, 118, 100054, 29991, 198, 310, 481, 489, 67, 16384, 25, 220, 99886, 100696, 9909, 108532, 14, 109430, 23083, 310, 481, 3311, 25, 220, 99886, 80094, 9909, 82587, 23083, 310, 481, 4379, 25, 19468, 102, 95355, 9909, 82587, 23083, 310, 481, 3311, 27234, 12135, 25, 220, 80094, 64471, 30440, 96422, 9909, 117661, 25511, 3837, 62244, 80094, 24562, 18830, 9, 17992, 51463, 85106, 14880, 19793, 23083, 310, 481, 4379, 27234, 12135, 25, 19468, 102, 95355, 64471, 30440, 96422, 9909, 117661, 25511, 3837, 62244, 102299, 24562, 18830, 9, 17992, 51463, 85106, 14880, 19793, 23083, 3374, 310, 80426, 66017, 68805, 28311, 310, 341, 394, 330, 9852, 2078, 788, 330, 17, 16, 114418, 15, 16, 756, 394, 330, 9852, 675, 788, 330, 17, 16, 114418, 15, 16, 756, 394, 330, 376, 67, 16384, 788, 330, 108532, 756, 394, 330, 6045, 788, 220, 16, 15, 15, 15, 15, 15, 15, 15, 345, 394, 330, 7698, 788, 220, 18, 13, 20, 345, 394, 330, 6045, 27234, 12135, 788, 830, 345, 394, 330, 7698, 27234, 12135, 788, 830, 198, 310, 456, 3374, 310, 97161, 28311, 310, 220, 16, 13, 81263, 80094, 24562, 18830, 9, 17992, 9909, 29524, 9, 16, 15, 15, 15, 31207, 48272, 51463, 80094, 85106, 14880, 19793, 198, 310, 220, 17, 13, 81263, 102299, 24562, 18830, 9, 17992, 9909, 29524, 9, 18, 13, 20, 4, 48272, 51463, 102299, 85106, 14880, 19793, 198, 310, 220, 18, 13, 220, 80094, 75317, 5122, 31207, 5373, 53356, 85106, 105359, 17714, 100398, 82587, 9909, 31207, 9, 16, 15, 15, 15, 15, 3837, 53356, 9, 16, 15, 15, 15, 15, 15, 15, 15, 15, 23083, 310, 220, 19, 13, 19468, 102, 95355, 85106, 115600, 4, 17992, 105359, 17714, 82587, 151645, 198, 151644, 77091, 198, 151667, 198, 99692, 3837, 107520, 85106, 54542, 20002, 103008, 104976, 99886, 108704, 90395, 105278, 106637, 17714, 5370, 68805, 1773, 101140, 3837, 104515, 104857, 101113, 20002, 104272, 3837, 103944, 16530, 114078, 99885, 104449, 3407, 20002, 103008, 108704, 20412, 36987, 17, 16, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 220, 18, 13, 20, 4, 55807, 85106, 107439, 9370, 44931, 18830, 9852, 2078, 5373, 9852, 675, 5373, 376, 67, 16384, 5373, 6045, 5373, 7698, 5373, 6045, 27234, 12135, 5373, 7698, 27234, 12135, 1773, 101948, 3837, 80094, 75317, 30534, 105359, 17714, 31207, 57191, 53356, 3837, 101912, 9, 16, 15, 15, 15, 31207, 104286, 16, 15, 15, 15, 15, 15, 15, 15, 3837, 102299, 115600, 4, 17992, 46670, 82587, 3407, 101140, 3837, 9852, 2078, 104583, 2073, 17, 16, 114418, 15, 16, 33590, 104544, 114815, 1773, 9852, 675, 100000, 2073, 17, 16, 114418, 15, 16, 33590, 104689, 25177, 1773, 376, 67, 16384, 20412, 2073, 108532, 33590, 88991, 3407, 104326, 80094, 99659, 3837, 20002, 104496, 62244, 80094, 24562, 18830, 9, 17992, 3837, 101912, 9, 16, 15, 15, 15, 31207, 3837, 85106, 14880, 19793, 1773, 99817, 80094, 20412, 9, 16, 15, 15, 15, 31207, 3837, 99999, 6045, 27234, 12135, 104583, 1866, 1773, 80094, 75317, 85106, 105359, 17714, 82587, 3837, 31207, 9, 16, 15, 15, 15, 15, 3837, 99999, 16, 15, 15, 15, 31207, 108356, 16, 15, 15, 15, 15, 15, 15, 15, 1773, 101165, 3837, 102299, 24562, 18830, 9, 17992, 3837, 99999, 7698, 27234, 12135, 20412, 1866, 3837, 102299, 105359, 17714, 82587, 18, 13, 20, 3407, 99601, 101071, 107189, 92894, 107916, 103958, 1773, 77557, 3837, 102299, 64471, 85106, 115600, 4, 17992, 3837, 20412, 9370, 3837, 105359, 12857, 18, 13, 20, 1773, 80094, 75317, 64471, 88991, 105359, 3837, 20412, 9370, 1773, 55338, 44931, 71268, 88991, 107439, 90395, 100136, 68805, 101137, 19793, 26355, 101882, 1773, 100161, 3837, 103944, 5370, 64429, 16530, 102298, 99885, 108593, 109502, 66394, 3837, 91680, 31526, 5370, 3407, 81167, 42192, 29056, 33447, 3837, 66017, 59151, 99730, 101909, 102298, 55338, 88991, 44931, 9370, 5370, 64429, 8997, 151668, 271, 515, 220, 330, 9852, 2078, 788, 330, 17, 16, 114418, 15, 16, 756, 220, 330, 9852, 675, 788, 330, 17, 16, 114418, 15, 16, 756, 220, 330, 376, 67, 16384, 788, 330, 108532, 756, 220, 330, 6045, 788, 220, 16, 15, 15, 15, 15, 15, 15, 15, 345, 220, 330, 7698, 788, 220, 18, 13, 20, 345, 220, 330, 6045, 27234, 12135, 788, 830, 345, 220, 330, 7698, 27234, 12135, 788, 830, 198, 92], "total_duration": 11503066529, "load_duration": 26913614, "prompt_eval_count": 355, "prompt_eval_duration": 25713396, "eval_count": 409, "eval_duration": 11449742776}
2025-05-16 11:08:32,457 - __main__ - INFO - Validating Ollama response: {"model": "qwen3:0.6b", "created_at": "2025-05-16T03:08:32.448754Z", "response": "<think>\n好的，我现在需要处理用户提供的债券交易文本，并将其解析为JSON格式。首先，我要仔细阅读用户的要求，确保不遗漏任何细节。\n\n用户提供的文本是：“21国债01 买入 *1000万 3.5%”。需要提取的字段有assetCode、assetName、trdSide、amount、rate、amountReqFlag、rateReqFlag。另外，金额单位要转换为万或亿，比如*1000万变成10000000，利率去掉%号转数字。\n\n首先，assetCode应该是“21国债01”，看起来没问题。assetName也是“21国债01”，不需要修改。trdSide是“买入”，正确。\n\n接下来金额部分，用户提到如果金额前有*号，比如*1000万，需要请示。这里金额是*1000万，所以amountReqFlag应该是true。金额单位需要转换为数字，万*10000，所以1000万变为10000000。同样，利率前有*号，所以rateReqFlag是true，利率转换为数字3.5。\n\n现在检查是否有其他需要注意的地方。例如，利率是否需要去掉%号，是的，转换成3.5。金额单位是否正确转换，是的。所有字段都正确提取，并且格式符合示例要求。最后，确保JSON对象不包含任何额外的文字说明，只返回JSON。\n\n确认无误后，输出结果应该是一个包含所有正确字段的JSON对象。\n</think>\n\n{\n  \"assetCode\": \"21国债01\",\n  \"assetName\": \"21国债01\",\n  \"trdSide\": \"买入\",\n  \"amount\": 10000000,\n  \"rate\": 3.5,\n  \"amountReqFlag\": true,\n  \"rateReqFlag\": true\n}", "done": true, "done_reason": "stop", "context": [151644, 872, 198, 14880, 44063, 87752, 104976, 99886, 108704, 106637, 17714, 5370, 68805, 3837, 91680, 31526, 5370, 64429, 3837, 100148, 102298, 92894, 87335, 66394, 28311, 310, 220, 17, 16, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 220, 18, 13, 20, 4, 83913, 310, 18137, 250, 222, 30534, 107439, 9370, 44931, 28311, 310, 481, 9329, 2078, 25, 4891, 222, 118, 100054, 46100, 198, 310, 481, 9329, 675, 25, 4891, 222, 118, 100054, 29991, 198, 310, 481, 489, 67, 16384, 25, 220, 99886, 100696, 9909, 108532, 14, 109430, 23083, 310, 481, 3311, 25, 220, 99886, 80094, 9909, 82587, 23083, 310, 481, 4379, 25, 19468, 102, 95355, 9909, 82587, 23083, 310, 481, 3311, 27234, 12135, 25, 220, 80094, 64471, 30440, 96422, 9909, 117661, 25511, 3837, 62244, 80094, 24562, 18830, 9, 17992, 51463, 85106, 14880, 19793, 23083, 310, 481, 4379, 27234, 12135, 25, 19468, 102, 95355, 64471, 30440, 96422, 9909, 117661, 25511, 3837, 62244, 102299, 24562, 18830, 9, 17992, 51463, 85106, 14880, 19793, 23083, 3374, 310, 80426, 66017, 68805, 28311, 310, 341, 394, 330, 9852, 2078, 788, 330, 17, 16, 114418, 15, 16, 756, 394, 330, 9852, 675, 788, 330, 17, 16, 114418, 15, 16, 756, 394, 330, 376, 67, 16384, 788, 330, 108532, 756, 394, 330, 6045, 788, 220, 16, 15, 15, 15, 15, 15, 15, 15, 345, 394, 330, 7698, 788, 220, 18, 13, 20, 345, 394, 330, 6045, 27234, 12135, 788, 830, 345, 394, 330, 7698, 27234, 12135, 788, 830, 198, 310, 456, 3374, 310, 97161, 28311, 310, 220, 16, 13, 81263, 80094, 24562, 18830, 9, 17992, 9909, 29524, 9, 16, 15, 15, 15, 31207, 48272, 51463, 80094, 85106, 14880, 19793, 198, 310, 220, 17, 13, 81263, 102299, 24562, 18830, 9, 17992, 9909, 29524, 9, 18, 13, 20, 4, 48272, 51463, 102299, 85106, 14880, 19793, 198, 310, 220, 18, 13, 220, 80094, 75317, 5122, 31207, 5373, 53356, 85106, 105359, 17714, 100398, 82587, 9909, 31207, 9, 16, 15, 15, 15, 15, 3837, 53356, 9, 16, 15, 15, 15, 15, 15, 15, 15, 15, 23083, 310, 220, 19, 13, 19468, 102, 95355, 85106, 115600, 4, 17992, 105359, 17714, 82587, 151645, 198, 151644, 77091, 198, 151667, 198, 99692, 3837, 107520, 85106, 54542, 20002, 103008, 104976, 99886, 108704, 90395, 105278, 106637, 17714, 5370, 68805, 1773, 101140, 3837, 104515, 104857, 101113, 20002, 104272, 3837, 103944, 16530, 114078, 99885, 104449, 3407, 20002, 103008, 108704, 20412, 36987, 17, 16, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 220, 18, 13, 20, 4, 55807, 85106, 107439, 9370, 44931, 18830, 9852, 2078, 5373, 9852, 675, 5373, 376, 67, 16384, 5373, 6045, 5373, 7698, 5373, 6045, 27234, 12135, 5373, 7698, 27234, 12135, 1773, 101948, 3837, 80094, 75317, 30534, 105359, 17714, 31207, 57191, 53356, 3837, 101912, 9, 16, 15, 15, 15, 31207, 104286, 16, 15, 15, 15, 15, 15, 15, 15, 3837, 102299, 115600, 4, 17992, 46670, 82587, 3407, 101140, 3837, 9852, 2078, 104583, 2073, 17, 16, 114418, 15, 16, 33590, 104544, 114815, 1773, 9852, 675, 100000, 2073, 17, 16, 114418, 15, 16, 33590, 104689, 25177, 1773, 376, 67, 16384, 20412, 2073, 108532, 33590, 88991, 3407, 104326, 80094, 99659, 3837, 20002, 104496, 62244, 80094, 24562, 18830, 9, 17992, 3837, 101912, 9, 16, 15, 15, 15, 31207, 3837, 85106, 14880, 19793, 1773, 99817, 80094, 20412, 9, 16, 15, 15, 15, 31207, 3837, 99999, 6045, 27234, 12135, 104583, 1866, 1773, 80094, 75317, 85106, 105359, 17714, 82587, 3837, 31207, 9, 16, 15, 15, 15, 15, 3837, 99999, 16, 15, 15, 15, 31207, 108356, 16, 15, 15, 15, 15, 15, 15, 15, 1773, 101165, 3837, 102299, 24562, 18830, 9, 17992, 3837, 99999, 7698, 27234, 12135, 20412, 1866, 3837, 102299, 105359, 17714, 82587, 18, 13, 20, 3407, 99601, 101071, 107189, 92894, 107916, 103958, 1773, 77557, 3837, 102299, 64471, 85106, 115600, 4, 17992, 3837, 20412, 9370, 3837, 105359, 12857, 18, 13, 20, 1773, 80094, 75317, 64471, 88991, 105359, 3837, 20412, 9370, 1773, 55338, 44931, 71268, 88991, 107439, 90395, 100136, 68805, 101137, 19793, 26355, 101882, 1773, 100161, 3837, 103944, 5370, 64429, 16530, 102298, 99885, 108593, 109502, 66394, 3837, 91680, 31526, 5370, 3407, 81167, 42192, 29056, 33447, 3837, 66017, 59151, 99730, 101909, 102298, 55338, 88991, 44931, 9370, 5370, 64429, 8997, 151668, 271, 515, 220, 330, 9852, 2078, 788, 330, 17, 16, 114418, 15, 16, 756, 220, 330, 9852, 675, 788, 330, 17, 16, 114418, 15, 16, 756, 220, 330, 376, 67, 16384, 788, 330, 108532, 756, 220, 330, 6045, 788, 220, 16, 15, 15, 15, 15, 15, 15, 15, 345, 220, 330, 7698, 788, 220, 18, 13, 20, 345, 220, 330, 6045, 27234, 12135, 788, 830, 345, 220, 330, 7698, 27234, 12135, 788, 830, 198, 92], "total_duration": 11503066529, "load_duration": 26913614, "prompt_eval_count": 355, "prompt_eval_duration": 25713396, "eval_count": 409, "eval_duration": 11449742776}
2025-05-16 11:08:32,458 - __main__ - INFO - Raw model response: <think>
好的，我现在需要处理用户提供的债券交易文本，并将其解析为JSON格式。首先，我要仔细阅读用户的要求，确保不遗漏任何细节。

用户提供的文本是：“21国债01 买入 *1000万 3.5%”。需要提取的字段有assetCode、assetName、trdSide、amount、rate、amountReqFlag、rateReqFlag。另外，金额单位要转换为万或亿，比如*1000万变成10000000，利率去掉%号转数字。

首先，assetCode应该是“21国债01”，看起来没问题。assetName也是“21国债01”，不需要修改。trdSide是“买入”，正确。

接下来金额部分，用户提到如果金额前有*号，比如*1000万，需要请示。这里金额是*1000万，所以amountReqFlag应该是true。金额单位需要转换为数字，万*10000，所以1000万变为10000000。同样，利率前有*号，所以rateReqFlag是true，利率转换为数字3.5。

现在检查是否有其他需要注意的地方。例如，利率是否需要去掉%号，是的，转换成3.5。金额单位是否正确转换，是的。所有字段都正确提取，并且格式符合示例要求。最后，确保JSON对象不包含任何额外的文字说明，只返回JSON。

确认无误后，输出结果应该是一个包含所有正确字段的JSON对象。
</think>

{
  "assetCode": "21国债01",
  "assetName": "21国债01",
  "trdSide": "买入",
  "amount": 10000000,
  "rate": 3.5,
  "amountReqFlag": true,
  "rateReqFlag": true
}
2025-05-16 11:08:32,458 - __main__ - ERROR - JSON decode error: Expecting value: line 1 column 1 (char 0)
2025-05-16 11:08:32,459 - __main__ - INFO - Extracted JSON string: {
  "assetCode": "21国债01",
  "assetName": "21国债01",
  "trdSide": "买入",
  "amount": 10000000,
  "rate": 3.5,
  "amountReqFlag": true,
  "rateReqFlag": true
}
2025-05-16 11:08:32,459 - __main__ - INFO - Successfully parsed bond data: {'assetCode': '21国债01', 'assetName': '21国债01', 'trdSide': '买入', 'amount': 10000000, 'rate': 3.5, 'amountReqFlag': True, 'rateReqFlag': True}
2025-05-16 11:08:32,461 - __main__ - INFO - Successfully validated and returned parsed data: assetCode='21国债01' assetName='21国债01' trdSide='买入' amount=10000000.0 rate=3.5 amountReqFlag=True rateReqFlag=True
2025-05-16 11:10:57,986 - __main__ - INFO - Starting bond text parsing service...
2025-05-16 11:11:36,910 - __main__ - INFO - Received request to parse bond text: 21国债01 买入 *1000万 3.5% 
2025-05-16 11:11:36,922 - __main__ - INFO - Calling Ollama model with text: 21国债01 买入 *1000万 3.5% 
2025-05-16 11:11:36,947 - __main__ - INFO - Ollama service is available
2025-05-16 11:11:36,957 - __main__ - INFO - Available models: {"models": [{"name": "qwen3:0.6b", "model": "qwen3:0.6b", "modified_at": "2025-05-08T01:27:52.753829715+08:00", "size": 522653526, "digest": "3bae9c93586b27bedaa979979733c2b0edd1d0defc745e9638f2161192a0ccf0", "details": {"parent_model": "", "format": "gguf", "family": "qwen3", "families": ["qwen3"], "parameter_size": "751.63M", "quantization_level": "Q4_K_M"}}]}
2025-05-16 11:11:36,971 - __main__ - INFO - Sending request to Ollama: {"model": "qwen3:0.6b", "prompt": "请将以下债券交易文本解析为JSON格式，只返回JSON对象，不要包含其他文字说明：\n            21国债01 买入 *1000万 3.5% \n            \n            需要提取的字段：\n            - assetCode: 债券代码\n            - assetName: 债券名称\n            - trdSide: 交易方向（买入/卖出）\n            - amount: 交易金额（数字）\n            - rate: 利率（数字）\n            - amountReqFlag: 金额是否需请示（布尔值，当金额前有*号时为true）\n            - rateReqFlag: 利率是否需请示（布尔值，当利率前有*号时为true）\n            \n            示例输出格式：\n            {\n                \"assetCode\": \"21国债01\",\n                \"assetName\": \"21国债01\",\n                \"trdSide\": \"买入\",\n                \"amount\": 10000000,\n                \"rate\": 3.5,\n                \"amountReqFlag\": true,\n                \"rateReqFlag\": true\n            }", "stream": false}
2025-05-16 11:11:46,209 - __main__ - INFO - Received response from Ollama: {"model": "qwen3:0.6b", "created_at": "2025-05-16T03:11:46.201902Z", "response": "<think>\n好的，我需要处理用户提供的债券交易文本，并将其解析为JSON格式。首先，用户给了一个文本：“21国债01 买入 *1000万 3.5%”，然后要求提取五个字段：assetCode、assetName、trdSide、amount、rate、amountReqFlag、rateReqFlag。\n\n首先，我需要确定这些字段的值。assetCode应该是债券代码，这里直接看到是“21国债01”。资产名称可能也是同样的，所以assetName也填上。交易方向是“买入”，所以trdSide设为“买入”。\n\n接下来是金额。文本中有“*1000万”，这里金额是1000万，所以amount是10000000。注意用户要求amount是数字，这里直接转换为整数即可。利率是3.5%，所以rate是3.5。然后检查金额是否需请示，因为前有*，所以amountReqFlag是true。同样，利率前有%，所以rateReqFlag也是true。\n\n现在需要确保所有字段都正确无误，并且没有多余的文字说明。用户要求只返回JSON对象，不要其他文字，所以最后再检查一遍，确保格式正确，没有遗漏任何字段。\n</think>\n\n{\n  \"assetCode\": \"21国债01\",\n  \"assetName\": \"21国债01\",\n  \"trdSide\": \"买入\",\n  \"amount\": 10000000,\n  \"rate\": 3.5,\n  \"amountReqFlag\": true,\n  \"rateReqFlag\": true\n}", "done": true, "done_reason": "stop", "context": [151644, 872, 198, 14880, 44063, 87752, 104976, 99886, 108704, 106637, 17714, 5370, 68805, 3837, 91680, 31526, 5370, 64429, 3837, 100148, 102298, 92894, 87335, 66394, 28311, 310, 220, 17, 16, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 220, 18, 13, 20, 4, 83913, 310, 18137, 250, 222, 30534, 107439, 9370, 44931, 28311, 310, 481, 9329, 2078, 25, 4891, 222, 118, 100054, 46100, 198, 310, 481, 9329, 675, 25, 4891, 222, 118, 100054, 29991, 198, 310, 481, 489, 67, 16384, 25, 220, 99886, 100696, 9909, 108532, 14, 109430, 23083, 310, 481, 3311, 25, 220, 99886, 80094, 9909, 82587, 23083, 310, 481, 4379, 25, 19468, 102, 95355, 9909, 82587, 23083, 310, 481, 3311, 27234, 12135, 25, 220, 80094, 64471, 58362, 14880, 19793, 9909, 117661, 25511, 3837, 39165, 80094, 24562, 18830, 9, 17992, 13343, 17714, 1866, 23083, 310, 481, 4379, 27234, 12135, 25, 19468, 102, 95355, 64471, 58362, 14880, 19793, 9909, 117661, 25511, 3837, 39165, 102299, 24562, 18830, 9, 17992, 13343, 17714, 1866, 23083, 3374, 310, 80426, 66017, 68805, 28311, 310, 341, 394, 330, 9852, 2078, 788, 330, 17, 16, 114418, 15, 16, 756, 394, 330, 9852, 675, 788, 330, 17, 16, 114418, 15, 16, 756, 394, 330, 376, 67, 16384, 788, 330, 108532, 756, 394, 330, 6045, 788, 220, 16, 15, 15, 15, 15, 15, 15, 15, 345, 394, 330, 7698, 788, 220, 18, 13, 20, 345, 394, 330, 6045, 27234, 12135, 788, 830, 345, 394, 330, 7698, 27234, 12135, 788, 830, 198, 310, 335, 151645, 198, 151644, 77091, 198, 151667, 198, 99692, 3837, 35946, 85106, 54542, 20002, 103008, 104976, 99886, 108704, 90395, 105278, 106637, 17714, 5370, 68805, 1773, 101140, 3837, 20002, 102558, 46944, 108704, 36987, 17, 16, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 220, 18, 13, 20, 4, 33590, 101889, 101882, 107439, 105220, 44931, 5122, 9852, 2078, 5373, 9852, 675, 5373, 376, 67, 16384, 5373, 6045, 5373, 7698, 5373, 6045, 27234, 12135, 5373, 7698, 27234, 12135, 3407, 101140, 3837, 35946, 85106, 60610, 100001, 44931, 9370, 25511, 1773, 9852, 2078, 104583, 104976, 46100, 3837, 99817, 101041, 101038, 20412, 2073, 17, 16, 114418, 15, 16, 55807, 99814, 29991, 87267, 100000, 107948, 3837, 99999, 9852, 675, 74763, 68756, 17447, 1773, 99886, 100696, 20412, 2073, 108532, 33590, 99999, 376, 67, 16384, 29635, 17714, 2073, 108532, 96332, 104326, 20412, 80094, 1773, 108704, 105656, 2073, 9, 16, 15, 15, 15, 31207, 33590, 99817, 80094, 20412, 16, 15, 15, 15, 31207, 3837, 99999, 6045, 20412, 16, 15, 15, 15, 15, 15, 15, 15, 1773, 60533, 20002, 101882, 6045, 20412, 82587, 3837, 99817, 101041, 105359, 17714, 63431, 8863, 104180, 1773, 102299, 20412, 18, 13, 20, 69982, 99999, 7698, 20412, 18, 13, 20, 1773, 101889, 101071, 80094, 64471, 58362, 14880, 19793, 3837, 99519, 24562, 18830, 9, 3837, 99999, 6045, 27234, 12135, 20412, 1866, 1773, 101165, 3837, 102299, 24562, 18830, 69982, 99999, 7698, 27234, 12135, 100000, 1866, 3407, 99601, 85106, 103944, 55338, 44931, 71268, 88991, 42192, 29056, 90395, 100136, 80443, 115916, 109502, 66394, 1773, 20002, 101882, 91680, 31526, 5370, 64429, 3837, 100148, 92894, 87335, 3837, 99999, 100161, 87256, 101071, 107060, 3837, 103944, 68805, 88991, 3837, 80443, 114078, 99885, 44931, 8997, 151668, 271, 515, 220, 330, 9852, 2078, 788, 330, 17, 16, 114418, 15, 16, 756, 220, 330, 9852, 675, 788, 330, 17, 16, 114418, 15, 16, 756, 220, 330, 376, 67, 16384, 788, 330, 108532, 756, 220, 330, 6045, 788, 220, 16, 15, 15, 15, 15, 15, 15, 15, 345, 220, 330, 7698, 788, 220, 18, 13, 20, 345, 220, 330, 6045, 27234, 12135, 788, 830, 345, 220, 330, 7698, 27234, 12135, 788, 830, 198, 92], "total_duration": 9223505288, "load_duration": 29869743, "prompt_eval_count": 251, "prompt_eval_duration": 1159001938, "eval_count": 343, "eval_duration": 8033851288}
2025-05-16 11:11:46,209 - __main__ - INFO - Validating Ollama response: {"model": "qwen3:0.6b", "created_at": "2025-05-16T03:11:46.201902Z", "response": "<think>\n好的，我需要处理用户提供的债券交易文本，并将其解析为JSON格式。首先，用户给了一个文本：“21国债01 买入 *1000万 3.5%”，然后要求提取五个字段：assetCode、assetName、trdSide、amount、rate、amountReqFlag、rateReqFlag。\n\n首先，我需要确定这些字段的值。assetCode应该是债券代码，这里直接看到是“21国债01”。资产名称可能也是同样的，所以assetName也填上。交易方向是“买入”，所以trdSide设为“买入”。\n\n接下来是金额。文本中有“*1000万”，这里金额是1000万，所以amount是10000000。注意用户要求amount是数字，这里直接转换为整数即可。利率是3.5%，所以rate是3.5。然后检查金额是否需请示，因为前有*，所以amountReqFlag是true。同样，利率前有%，所以rateReqFlag也是true。\n\n现在需要确保所有字段都正确无误，并且没有多余的文字说明。用户要求只返回JSON对象，不要其他文字，所以最后再检查一遍，确保格式正确，没有遗漏任何字段。\n</think>\n\n{\n  \"assetCode\": \"21国债01\",\n  \"assetName\": \"21国债01\",\n  \"trdSide\": \"买入\",\n  \"amount\": 10000000,\n  \"rate\": 3.5,\n  \"amountReqFlag\": true,\n  \"rateReqFlag\": true\n}", "done": true, "done_reason": "stop", "context": [151644, 872, 198, 14880, 44063, 87752, 104976, 99886, 108704, 106637, 17714, 5370, 68805, 3837, 91680, 31526, 5370, 64429, 3837, 100148, 102298, 92894, 87335, 66394, 28311, 310, 220, 17, 16, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 220, 18, 13, 20, 4, 83913, 310, 18137, 250, 222, 30534, 107439, 9370, 44931, 28311, 310, 481, 9329, 2078, 25, 4891, 222, 118, 100054, 46100, 198, 310, 481, 9329, 675, 25, 4891, 222, 118, 100054, 29991, 198, 310, 481, 489, 67, 16384, 25, 220, 99886, 100696, 9909, 108532, 14, 109430, 23083, 310, 481, 3311, 25, 220, 99886, 80094, 9909, 82587, 23083, 310, 481, 4379, 25, 19468, 102, 95355, 9909, 82587, 23083, 310, 481, 3311, 27234, 12135, 25, 220, 80094, 64471, 58362, 14880, 19793, 9909, 117661, 25511, 3837, 39165, 80094, 24562, 18830, 9, 17992, 13343, 17714, 1866, 23083, 310, 481, 4379, 27234, 12135, 25, 19468, 102, 95355, 64471, 58362, 14880, 19793, 9909, 117661, 25511, 3837, 39165, 102299, 24562, 18830, 9, 17992, 13343, 17714, 1866, 23083, 3374, 310, 80426, 66017, 68805, 28311, 310, 341, 394, 330, 9852, 2078, 788, 330, 17, 16, 114418, 15, 16, 756, 394, 330, 9852, 675, 788, 330, 17, 16, 114418, 15, 16, 756, 394, 330, 376, 67, 16384, 788, 330, 108532, 756, 394, 330, 6045, 788, 220, 16, 15, 15, 15, 15, 15, 15, 15, 345, 394, 330, 7698, 788, 220, 18, 13, 20, 345, 394, 330, 6045, 27234, 12135, 788, 830, 345, 394, 330, 7698, 27234, 12135, 788, 830, 198, 310, 335, 151645, 198, 151644, 77091, 198, 151667, 198, 99692, 3837, 35946, 85106, 54542, 20002, 103008, 104976, 99886, 108704, 90395, 105278, 106637, 17714, 5370, 68805, 1773, 101140, 3837, 20002, 102558, 46944, 108704, 36987, 17, 16, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 220, 18, 13, 20, 4, 33590, 101889, 101882, 107439, 105220, 44931, 5122, 9852, 2078, 5373, 9852, 675, 5373, 376, 67, 16384, 5373, 6045, 5373, 7698, 5373, 6045, 27234, 12135, 5373, 7698, 27234, 12135, 3407, 101140, 3837, 35946, 85106, 60610, 100001, 44931, 9370, 25511, 1773, 9852, 2078, 104583, 104976, 46100, 3837, 99817, 101041, 101038, 20412, 2073, 17, 16, 114418, 15, 16, 55807, 99814, 29991, 87267, 100000, 107948, 3837, 99999, 9852, 675, 74763, 68756, 17447, 1773, 99886, 100696, 20412, 2073, 108532, 33590, 99999, 376, 67, 16384, 29635, 17714, 2073, 108532, 96332, 104326, 20412, 80094, 1773, 108704, 105656, 2073, 9, 16, 15, 15, 15, 31207, 33590, 99817, 80094, 20412, 16, 15, 15, 15, 31207, 3837, 99999, 6045, 20412, 16, 15, 15, 15, 15, 15, 15, 15, 1773, 60533, 20002, 101882, 6045, 20412, 82587, 3837, 99817, 101041, 105359, 17714, 63431, 8863, 104180, 1773, 102299, 20412, 18, 13, 20, 69982, 99999, 7698, 20412, 18, 13, 20, 1773, 101889, 101071, 80094, 64471, 58362, 14880, 19793, 3837, 99519, 24562, 18830, 9, 3837, 99999, 6045, 27234, 12135, 20412, 1866, 1773, 101165, 3837, 102299, 24562, 18830, 69982, 99999, 7698, 27234, 12135, 100000, 1866, 3407, 99601, 85106, 103944, 55338, 44931, 71268, 88991, 42192, 29056, 90395, 100136, 80443, 115916, 109502, 66394, 1773, 20002, 101882, 91680, 31526, 5370, 64429, 3837, 100148, 92894, 87335, 3837, 99999, 100161, 87256, 101071, 107060, 3837, 103944, 68805, 88991, 3837, 80443, 114078, 99885, 44931, 8997, 151668, 271, 515, 220, 330, 9852, 2078, 788, 330, 17, 16, 114418, 15, 16, 756, 220, 330, 9852, 675, 788, 330, 17, 16, 114418, 15, 16, 756, 220, 330, 376, 67, 16384, 788, 330, 108532, 756, 220, 330, 6045, 788, 220, 16, 15, 15, 15, 15, 15, 15, 15, 345, 220, 330, 7698, 788, 220, 18, 13, 20, 345, 220, 330, 6045, 27234, 12135, 788, 830, 345, 220, 330, 7698, 27234, 12135, 788, 830, 198, 92], "total_duration": 9223505288, "load_duration": 29869743, "prompt_eval_count": 251, "prompt_eval_duration": 1159001938, "eval_count": 343, "eval_duration": 8033851288}
2025-05-16 11:11:46,209 - __main__ - INFO - Raw model response: <think>
好的，我需要处理用户提供的债券交易文本，并将其解析为JSON格式。首先，用户给了一个文本：“21国债01 买入 *1000万 3.5%”，然后要求提取五个字段：assetCode、assetName、trdSide、amount、rate、amountReqFlag、rateReqFlag。

首先，我需要确定这些字段的值。assetCode应该是债券代码，这里直接看到是“21国债01”。资产名称可能也是同样的，所以assetName也填上。交易方向是“买入”，所以trdSide设为“买入”。

接下来是金额。文本中有“*1000万”，这里金额是1000万，所以amount是10000000。注意用户要求amount是数字，这里直接转换为整数即可。利率是3.5%，所以rate是3.5。然后检查金额是否需请示，因为前有*，所以amountReqFlag是true。同样，利率前有%，所以rateReqFlag也是true。

现在需要确保所有字段都正确无误，并且没有多余的文字说明。用户要求只返回JSON对象，不要其他文字，所以最后再检查一遍，确保格式正确，没有遗漏任何字段。
</think>

{
  "assetCode": "21国债01",
  "assetName": "21国债01",
  "trdSide": "买入",
  "amount": 10000000,
  "rate": 3.5,
  "amountReqFlag": true,
  "rateReqFlag": true
}
2025-05-16 11:11:46,209 - __main__ - ERROR - JSON decode error: Expecting value: line 1 column 1 (char 0)
2025-05-16 11:11:46,210 - __main__ - INFO - Extracted JSON string: {
  "assetCode": "21国债01",
  "assetName": "21国债01",
  "trdSide": "买入",
  "amount": 10000000,
  "rate": 3.5,
  "amountReqFlag": true,
  "rateReqFlag": true
}
2025-05-16 11:11:46,210 - __main__ - INFO - Successfully parsed bond data: {'assetCode': '21国债01', 'assetName': '21国债01', 'trdSide': '买入', 'amount': 10000000, 'rate': 3.5, 'amountReqFlag': True, 'rateReqFlag': True}
2025-05-16 11:11:46,211 - __main__ - INFO - Successfully validated and returned parsed data: assetCode='21国债01' assetName='21国债01' trdSide='买入' amount=10000000.0 rate=3.5 amountReqFlag=True rateReqFlag=True
2025-05-20 23:22:05,072 - __main__ - INFO - Starting bond text parsing service...
2025-05-20 23:31:42,801 - __main__ - ERROR - Error in stream_ollama_response: HTTPConnectionPool(host='localhost', port=11434): Max retries exceeded with url: /api/generate (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x10f449d30>: Failed to establish a new connection: [Errno 61] Connection refused'))
2025-05-20 23:33:48,261 - __main__ - ERROR - Error in stream_ollama_response: HTTPConnectionPool(host='localhost', port=11434): Max retries exceeded with url: /api/generate (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x10f443fa0>: Failed to establish a new connection: [Errno 61] Connection refused'))
2025-05-20 23:39:00,461 - __main__ - INFO - Starting bond text parsing service...
2025-05-21 14:45:20,220 - __main__ - INFO - Starting bond text parsing service...
