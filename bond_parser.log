2025-05-16 10:45:53,208 - __main__ - INFO - Starting bond text parsing service...
2025-05-16 10:48:26,295 - __main__ - INFO - Starting bond text parsing service...
2025-05-16 10:48:40,020 - __main__ - INFO - Received request to parse bond text: 21国债01 买入 1000万 3.5% 可议价
2025-05-16 10:48:40,031 - __main__ - INFO - Calling Ollama model with text: 21国债01 买入 1000万 3.5% 可议价
2025-05-16 10:48:40,054 - __main__ - INFO - Ollama service is available
2025-05-16 10:48:40,063 - __main__ - ERROR - qwen:0.6b model is not available
2025-05-16 10:48:40,076 - __main__ - ERROR - Error checking model availability: 
2025-05-16 10:48:40,077 - __main__ - ERROR - Unexpected error in call_ollama_model: 
2025-05-16 10:48:42,799 - __main__ - INFO - Received request to parse bond text: 21国债01 买入 1000万 3.5% 可议价
2025-05-16 10:48:42,815 - __main__ - INFO - Calling Ollama model with text: 21国债01 买入 1000万 3.5% 可议价
2025-05-16 10:48:42,825 - __main__ - INFO - Ollama service is available
2025-05-16 10:48:42,848 - __main__ - ERROR - qwen:0.6b model is not available
2025-05-16 10:48:42,863 - __main__ - ERROR - Error checking model availability: 
2025-05-16 10:48:42,864 - __main__ - ERROR - Unexpected error in call_ollama_model: 
2025-05-16 10:52:26,679 - __main__ - INFO - Received request to parse bond text: 21国债01 买入 1000万 3.5% 可议价
2025-05-16 10:52:26,695 - __main__ - INFO - Calling Ollama model with text: 21国债01 买入 1000万 3.5% 可议价
2025-05-16 10:52:26,706 - __main__ - INFO - Ollama service is available
2025-05-16 10:52:26,730 - __main__ - ERROR - qwen:0.6b model is not available
2025-05-16 10:52:26,744 - __main__ - ERROR - Error checking model availability: 
2025-05-16 10:52:26,744 - __main__ - ERROR - Unexpected error in call_ollama_model: 
2025-05-16 10:52:42,103 - __main__ - INFO - Received request to parse bond text: 21国债01 买入 1000万 3.5% 可议价
2025-05-16 10:52:42,104 - __main__ - INFO - Calling Ollama model with text: 21国债01 买入 1000万 3.5% 可议价
2025-05-16 10:52:42,113 - __main__ - INFO - Ollama service is available
2025-05-16 10:52:42,122 - __main__ - ERROR - qwen:0.6b model is not available
2025-05-16 10:52:42,122 - __main__ - ERROR - Error checking model availability: 
2025-05-16 10:52:42,122 - __main__ - ERROR - Unexpected error in call_ollama_model: 
2025-05-16 10:54:02,194 - __main__ - INFO - Starting bond text parsing service...
2025-05-16 10:56:33,997 - __main__ - INFO - Starting bond text parsing service...
2025-05-16 10:58:29,299 - __main__ - INFO - Received request to parse bond text: 21国债01 买入 1000万 3.5% 可议价
2025-05-16 10:58:29,314 - __main__ - INFO - Calling Ollama model with text: 21国债01 买入 1000万 3.5% 可议价
2025-05-16 10:58:29,342 - __main__ - INFO - Ollama service is available
2025-05-16 10:58:29,367 - __main__ - INFO - Available models: {"models": [{"name": "qwen3:0.6b", "model": "qwen3:0.6b", "modified_at": "2025-05-08T01:27:52.753829715+08:00", "size": 522653526, "digest": "3bae9c93586b27bedaa979979733c2b0edd1d0defc745e9638f2161192a0ccf0", "details": {"parent_model": "", "format": "gguf", "family": "qwen3", "families": ["qwen3"], "parameter_size": "751.63M", "quantization_level": "Q4_K_M"}}]}
2025-05-16 10:58:29,367 - __main__ - INFO - Sending request to Ollama: {"model": "qwen3:0.6b", "prompt": "Parse the following bond trading text and extract key information in JSON format:\n            21国债01 买入 1000万 3.5% 可议价\n            \n            Extract the following fields:\n            - assetCode: Bond code\n            - assetName: Bond name\n            - trdSide: Trading side (buy/sell)\n            - amount: Trading amount\n            - rate: Interest rate\n            - amountReqFlag: Whether amount is required\n            - rateReqFlag: Whether rate is required\n            \n            Return only the JSON object.", "stream": false}
2025-05-16 10:58:50,254 - __main__ - INFO - Received response from Ollama: {"model": "qwen3:0.6b", "created_at": "2025-05-16T02:58:45.985745Z", "response": "<think>\nOkay, let's see. The user provided a bond trading text and wants me to extract specific fields into JSON. Let me start by reading the text carefully.\n\nThe text is: \"21国债01 买入 1000万 3.5% 可议价\". So, the first part is the bond code and name. The code is 21国债01, which I think is the bond code. The name is \"国债01\", so that's assetName. Then the trdSide is \"买入\", which means buying. The amount is 1000万, which is 1,000 million. The rate is 3.5%, and the amountReqFlag is set to true, and rateReqFlag is also true. \n\nWait, the amountReqFlag is whether the amount is required. Since the amount is given as 1000万, which is a number, so it's a required amount. Similarly, the rate is 3.5%, which is a number, so it's also required. So those flags should be true. \n\nNow, I need to structure this into JSON with the specified fields. Let me double-check each part. AssetCode is 21国债01, assetName is \"国债01\", trdSide is buy, amount is 1000, rate is 3.5, amountReqFlag is true, rateReqFlag is true. Then return only the JSON. \n\nI think that's all. No other fields are mentioned. Let me make sure there's no extra text. The user said to extract only the JSON, so no explanation or anything else. Alright, that's it.\n</think>\n\n{\n  \"assetCode\": \"21国债01\",\n  \"assetName\": \"国债01\",\n  \"trdSide\": \"买入\",\n  \"amount\": 1000,\n  \"rate\": 3.5,\n  \"amountReqFlag\": true,\n  \"rateReqFlag\": true\n}", "done": true, "done_reason": "stop", "context": [151644, 872, 198, 14463, 279, 2701, 10815, 11133, 1467, 323, 8649, 1376, 1995, 304, 4718, 3561, 510, 310, 220, 17, 16, 114418, 15, 16, 220, 108532, 220, 16, 15, 15, 15, 31207, 220, 18, 13, 20, 4, 26853, 107, 96422, 50292, 18574, 310, 22826, 279, 2701, 5043, 510, 310, 481, 9329, 2078, 25, 23618, 2038, 198, 310, 481, 9329, 675, 25, 23618, 829, 198, 310, 481, 489, 67, 16384, 25, 31604, 3108, 320, 19783, 2687, 613, 340, 310, 481, 3311, 25, 31604, 3311, 198, 310, 481, 4379, 25, 24106, 4379, 198, 310, 481, 3311, 27234, 12135, 25, 13139, 3311, 374, 2567, 198, 310, 481, 4379, 27234, 12135, 25, 13139, 4379, 374, 2567, 18574, 310, 3411, 1172, 279, 4718, 1633, 13, 151645, 198, 151644, 77091, 198, 151667, 198, 32313, 11, 1077, 594, 1490, 13, 576, 1196, 3897, 264, 10815, 11133, 1467, 323, 6801, 752, 311, 8649, 3151, 5043, 1119, 4718, 13, 6771, 752, 1191, 553, 5290, 279, 1467, 15516, 382, 785, 1467, 374, 25, 330, 17, 16, 114418, 15, 16, 220, 108532, 220, 16, 15, 15, 15, 31207, 220, 18, 13, 20, 4, 26853, 107, 96422, 50292, 3263, 2055, 11, 279, 1156, 949, 374, 279, 10815, 2038, 323, 829, 13, 576, 2038, 374, 220, 17, 16, 114418, 15, 16, 11, 892, 358, 1744, 374, 279, 10815, 2038, 13, 576, 829, 374, 330, 114418, 15, 16, 497, 773, 429, 594, 9329, 675, 13, 5005, 279, 489, 67, 16384, 374, 330, 108532, 497, 892, 3363, 11833, 13, 576, 3311, 374, 220, 16, 15, 15, 15, 31207, 11, 892, 374, 220, 16, 11, 15, 15, 15, 3526, 13, 576, 4379, 374, 220, 18, 13, 20, 13384, 323, 279, 3311, 27234, 12135, 374, 738, 311, 830, 11, 323, 4379, 27234, 12135, 374, 1083, 830, 13, 4710, 14190, 11, 279, 3311, 27234, 12135, 374, 3425, 279, 3311, 374, 2567, 13, 8704, 279, 3311, 374, 2661, 438, 220, 16, 15, 15, 15, 31207, 11, 892, 374, 264, 1372, 11, 773, 432, 594, 264, 2567, 3311, 13, 34239, 11, 279, 4379, 374, 220, 18, 13, 20, 13384, 892, 374, 264, 1372, 11, 773, 432, 594, 1083, 2567, 13, 2055, 1846, 8042, 1265, 387, 830, 13, 4710, 7039, 11, 358, 1184, 311, 5944, 419, 1119, 4718, 448, 279, 5189, 5043, 13, 6771, 752, 1990, 15934, 1817, 949, 13, 22605, 2078, 374, 220, 17, 16, 114418, 15, 16, 11, 9329, 675, 374, 330, 114418, 15, 16, 497, 489, 67, 16384, 374, 3695, 11, 3311, 374, 220, 16, 15, 15, 15, 11, 4379, 374, 220, 18, 13, 20, 11, 3311, 27234, 12135, 374, 830, 11, 4379, 27234, 12135, 374, 830, 13, 5005, 470, 1172, 279, 4718, 13, 4710, 40, 1744, 429, 594, 678, 13, 2308, 1008, 5043, 525, 9733, 13, 6771, 752, 1281, 2704, 1052, 594, 902, 4960, 1467, 13, 576, 1196, 1053, 311, 8649, 1172, 279, 4718, 11, 773, 902, 16148, 476, 4113, 770, 13, 97593, 11, 429, 594, 432, 624, 151668, 271, 515, 220, 330, 9852, 2078, 788, 330, 17, 16, 114418, 15, 16, 756, 220, 330, 9852, 675, 788, 330, 114418, 15, 16, 756, 220, 330, 376, 67, 16384, 788, 330, 108532, 756, 220, 330, 6045, 788, 220, 16, 15, 15, 15, 345, 220, 330, 7698, 788, 220, 18, 13, 20, 345, 220, 330, 6045, 27234, 12135, 788, 830, 345, 220, 330, 7698, 27234, 12135, 788, 830, 198, 92], "total_duration": 16613050961, "load_duration": 3352379754, "prompt_eval_count": 125, "prompt_eval_duration": 1471442257, "eval_count": 427, "eval_duration": 11777531066}
2025-05-16 10:58:50,256 - __main__ - INFO - Validating Ollama response: {"model": "qwen3:0.6b", "created_at": "2025-05-16T02:58:45.985745Z", "response": "<think>\nOkay, let's see. The user provided a bond trading text and wants me to extract specific fields into JSON. Let me start by reading the text carefully.\n\nThe text is: \"21国债01 买入 1000万 3.5% 可议价\". So, the first part is the bond code and name. The code is 21国债01, which I think is the bond code. The name is \"国债01\", so that's assetName. Then the trdSide is \"买入\", which means buying. The amount is 1000万, which is 1,000 million. The rate is 3.5%, and the amountReqFlag is set to true, and rateReqFlag is also true. \n\nWait, the amountReqFlag is whether the amount is required. Since the amount is given as 1000万, which is a number, so it's a required amount. Similarly, the rate is 3.5%, which is a number, so it's also required. So those flags should be true. \n\nNow, I need to structure this into JSON with the specified fields. Let me double-check each part. AssetCode is 21国债01, assetName is \"国债01\", trdSide is buy, amount is 1000, rate is 3.5, amountReqFlag is true, rateReqFlag is true. Then return only the JSON. \n\nI think that's all. No other fields are mentioned. Let me make sure there's no extra text. The user said to extract only the JSON, so no explanation or anything else. Alright, that's it.\n</think>\n\n{\n  \"assetCode\": \"21国债01\",\n  \"assetName\": \"国债01\",\n  \"trdSide\": \"买入\",\n  \"amount\": 1000,\n  \"rate\": 3.5,\n  \"amountReqFlag\": true,\n  \"rateReqFlag\": true\n}", "done": true, "done_reason": "stop", "context": [151644, 872, 198, 14463, 279, 2701, 10815, 11133, 1467, 323, 8649, 1376, 1995, 304, 4718, 3561, 510, 310, 220, 17, 16, 114418, 15, 16, 220, 108532, 220, 16, 15, 15, 15, 31207, 220, 18, 13, 20, 4, 26853, 107, 96422, 50292, 18574, 310, 22826, 279, 2701, 5043, 510, 310, 481, 9329, 2078, 25, 23618, 2038, 198, 310, 481, 9329, 675, 25, 23618, 829, 198, 310, 481, 489, 67, 16384, 25, 31604, 3108, 320, 19783, 2687, 613, 340, 310, 481, 3311, 25, 31604, 3311, 198, 310, 481, 4379, 25, 24106, 4379, 198, 310, 481, 3311, 27234, 12135, 25, 13139, 3311, 374, 2567, 198, 310, 481, 4379, 27234, 12135, 25, 13139, 4379, 374, 2567, 18574, 310, 3411, 1172, 279, 4718, 1633, 13, 151645, 198, 151644, 77091, 198, 151667, 198, 32313, 11, 1077, 594, 1490, 13, 576, 1196, 3897, 264, 10815, 11133, 1467, 323, 6801, 752, 311, 8649, 3151, 5043, 1119, 4718, 13, 6771, 752, 1191, 553, 5290, 279, 1467, 15516, 382, 785, 1467, 374, 25, 330, 17, 16, 114418, 15, 16, 220, 108532, 220, 16, 15, 15, 15, 31207, 220, 18, 13, 20, 4, 26853, 107, 96422, 50292, 3263, 2055, 11, 279, 1156, 949, 374, 279, 10815, 2038, 323, 829, 13, 576, 2038, 374, 220, 17, 16, 114418, 15, 16, 11, 892, 358, 1744, 374, 279, 10815, 2038, 13, 576, 829, 374, 330, 114418, 15, 16, 497, 773, 429, 594, 9329, 675, 13, 5005, 279, 489, 67, 16384, 374, 330, 108532, 497, 892, 3363, 11833, 13, 576, 3311, 374, 220, 16, 15, 15, 15, 31207, 11, 892, 374, 220, 16, 11, 15, 15, 15, 3526, 13, 576, 4379, 374, 220, 18, 13, 20, 13384, 323, 279, 3311, 27234, 12135, 374, 738, 311, 830, 11, 323, 4379, 27234, 12135, 374, 1083, 830, 13, 4710, 14190, 11, 279, 3311, 27234, 12135, 374, 3425, 279, 3311, 374, 2567, 13, 8704, 279, 3311, 374, 2661, 438, 220, 16, 15, 15, 15, 31207, 11, 892, 374, 264, 1372, 11, 773, 432, 594, 264, 2567, 3311, 13, 34239, 11, 279, 4379, 374, 220, 18, 13, 20, 13384, 892, 374, 264, 1372, 11, 773, 432, 594, 1083, 2567, 13, 2055, 1846, 8042, 1265, 387, 830, 13, 4710, 7039, 11, 358, 1184, 311, 5944, 419, 1119, 4718, 448, 279, 5189, 5043, 13, 6771, 752, 1990, 15934, 1817, 949, 13, 22605, 2078, 374, 220, 17, 16, 114418, 15, 16, 11, 9329, 675, 374, 330, 114418, 15, 16, 497, 489, 67, 16384, 374, 3695, 11, 3311, 374, 220, 16, 15, 15, 15, 11, 4379, 374, 220, 18, 13, 20, 11, 3311, 27234, 12135, 374, 830, 11, 4379, 27234, 12135, 374, 830, 13, 5005, 470, 1172, 279, 4718, 13, 4710, 40, 1744, 429, 594, 678, 13, 2308, 1008, 5043, 525, 9733, 13, 6771, 752, 1281, 2704, 1052, 594, 902, 4960, 1467, 13, 576, 1196, 1053, 311, 8649, 1172, 279, 4718, 11, 773, 902, 16148, 476, 4113, 770, 13, 97593, 11, 429, 594, 432, 624, 151668, 271, 515, 220, 330, 9852, 2078, 788, 330, 17, 16, 114418, 15, 16, 756, 220, 330, 9852, 675, 788, 330, 114418, 15, 16, 756, 220, 330, 376, 67, 16384, 788, 330, 108532, 756, 220, 330, 6045, 788, 220, 16, 15, 15, 15, 345, 220, 330, 7698, 788, 220, 18, 13, 20, 345, 220, 330, 6045, 27234, 12135, 788, 830, 345, 220, 330, 7698, 27234, 12135, 788, 830, 198, 92], "total_duration": 16613050961, "load_duration": 3352379754, "prompt_eval_count": 125, "prompt_eval_duration": 1471442257, "eval_count": 427, "eval_duration": 11777531066}
2025-05-16 10:58:50,257 - __main__ - INFO - Raw model response: <think>
Okay, let's see. The user provided a bond trading text and wants me to extract specific fields into JSON. Let me start by reading the text carefully.

The text is: "21国债01 买入 1000万 3.5% 可议价". So, the first part is the bond code and name. The code is 21国债01, which I think is the bond code. The name is "国债01", so that's assetName. Then the trdSide is "买入", which means buying. The amount is 1000万, which is 1,000 million. The rate is 3.5%, and the amountReqFlag is set to true, and rateReqFlag is also true. 

Wait, the amountReqFlag is whether the amount is required. Since the amount is given as 1000万, which is a number, so it's a required amount. Similarly, the rate is 3.5%, which is a number, so it's also required. So those flags should be true. 

Now, I need to structure this into JSON with the specified fields. Let me double-check each part. AssetCode is 21国债01, assetName is "国债01", trdSide is buy, amount is 1000, rate is 3.5, amountReqFlag is true, rateReqFlag is true. Then return only the JSON. 

I think that's all. No other fields are mentioned. Let me make sure there's no extra text. The user said to extract only the JSON, so no explanation or anything else. Alright, that's it.
</think>

{
  "assetCode": "21国债01",
  "assetName": "国债01",
  "trdSide": "买入",
  "amount": 1000,
  "rate": 3.5,
  "amountReqFlag": true,
  "rateReqFlag": true
}
2025-05-16 10:58:50,258 - __main__ - ERROR - JSON decode error: Expecting value: line 1 column 1 (char 0)
2025-05-16 10:58:50,259 - __main__ - ERROR - Could not extract JSON from response: <think>
Okay, let's see. The user provided a bond trading text and wants me to extract specific fields into JSON. Let me start by reading the text carefully.

The text is: "21国债01 买入 1000万 3.5% 可议价". So, the first part is the bond code and name. The code is 21国债01, which I think is the bond code. The name is "国债01", so that's assetName. Then the trdSide is "买入", which means buying. The amount is 1000万, which is 1,000 million. The rate is 3.5%, and the amountReqFlag is set to true, and rateReqFlag is also true. 

Wait, the amountReqFlag is whether the amount is required. Since the amount is given as 1000万, which is a number, so it's a required amount. Similarly, the rate is 3.5%, which is a number, so it's also required. So those flags should be true. 

Now, I need to structure this into JSON with the specified fields. Let me double-check each part. AssetCode is 21国债01, assetName is "国债01", trdSide is buy, amount is 1000, rate is 3.5, amountReqFlag is true, rateReqFlag is true. Then return only the JSON. 

I think that's all. No other fields are mentioned. Let me make sure there's no extra text. The user said to extract only the JSON, so no explanation or anything else. Alright, that's it.
</think>

{
  "assetCode": "21国债01",
  "assetName": "国债01",
  "trdSide": "买入",
  "amount": 1000,
  "rate": 3.5,
  "amountReqFlag": true,
  "rateReqFlag": true
}
2025-05-16 10:58:50,260 - __main__ - ERROR - Error validating Ollama response: Could not extract valid JSON from model response
2025-05-16 10:58:50,261 - __main__ - ERROR - Unexpected error in call_ollama_model: Could not extract valid JSON from model response
Traceback (most recent call last):
  File "/Users/liuyi/CursorProject/pythonProject1/main.py", line 53, in validate_ollama_response
    parsed_response = json.loads(response_text)
  File "/usr/local/Cellar/python@3.9/3.9.1_4/Frameworks/Python.framework/Versions/3.9/lib/python3.9/json/__init__.py", line 346, in loads
    return _default_decoder.decode(s)
  File "/usr/local/Cellar/python@3.9/3.9.1_4/Frameworks/Python.framework/Versions/3.9/lib/python3.9/json/decoder.py", line 337, in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
  File "/usr/local/Cellar/python@3.9/3.9.1_4/Frameworks/Python.framework/Versions/3.9/lib/python3.9/json/decoder.py", line 355, in raw_decode
    raise JSONDecodeError("Expecting value", s, err.value) from None
json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/liuyi/CursorProject/pythonProject1/main.py", line 141, in call_ollama_model
    parsed_data = validate_ollama_response(result)
  File "/Users/liuyi/CursorProject/pythonProject1/main.py", line 70, in validate_ollama_response
    raise ValueError("Could not extract valid JSON from model response")
ValueError: Could not extract valid JSON from model response
2025-05-16 11:00:48,417 - __main__ - INFO - Starting bond text parsing service...
2025-05-16 11:01:00,885 - __main__ - INFO - Received request to parse bond text: 21国债01 买入 1000万 3.5% 可议价
2025-05-16 11:01:00,885 - __main__ - INFO - Calling Ollama model with text: 21国债01 买入 1000万 3.5% 可议价
2025-05-16 11:01:00,907 - __main__ - INFO - Ollama service is available
2025-05-16 11:01:00,921 - __main__ - INFO - Available models: {"models": [{"name": "qwen3:0.6b", "model": "qwen3:0.6b", "modified_at": "2025-05-08T01:27:52.753829715+08:00", "size": 522653526, "digest": "3bae9c93586b27bedaa979979733c2b0edd1d0defc745e9638f2161192a0ccf0", "details": {"parent_model": "", "format": "gguf", "family": "qwen3", "families": ["qwen3"], "parameter_size": "751.63M", "quantization_level": "Q4_K_M"}}]}
2025-05-16 11:01:00,924 - __main__ - INFO - Sending request to Ollama: {"model": "qwen3:0.6b", "prompt": "请将以下债券交易文本解析为JSON格式，只返回JSON对象，不要包含其他文字说明：\n            21国债01 买入 1000万 3.5% 可议价\n            \n            需要提取的字段：\n            - assetCode: 债券代码\n            - assetName: 债券名称\n            - trdSide: 交易方向（买入/卖出）\n            - amount: 交易金额（数字）\n            - rate: 利率（数字）\n            - amountReqFlag: 金额是否可议（布尔值）\n            - rateReqFlag: 利率是否可议（布尔值）\n            \n            示例输出格式：\n            {\n                \"assetCode\": \"21国债01\",\n                \"assetName\": \"21国债01\",\n                \"trdSide\": \"买入\",\n                \"amount\": 10000000,\n                \"rate\": 3.5,\n                \"amountReqFlag\": true,\n                \"rateReqFlag\": true\n            }", "stream": false}
2025-05-16 11:01:09,563 - __main__ - INFO - Received response from Ollama: {"model": "qwen3:0.6b", "created_at": "2025-05-16T03:01:09.549943Z", "response": "<think>\n好的，我现在需要处理用户提供的债券交易文本，将其解析为指定的JSON格式。首先，我要仔细阅读用户提供的文本和要求的字段。用户给出的文本是：“21国债01 买入 1000万 3.5% 可议价”。我需要提取出符合要求的字段，并确保不包含其他文字说明。\n\n首先，确定每个字段的正确性。assetCode应该是债券代码，这里直接提取“21国债01”没问题。assetName也是“21国债01”，看起来是对的。trdSide是“买入”，符合用户要求的买入方向。amount是1000万，但要注意单位是数字，这里直接转换为10000000，因为中文数字可能需要转换为数值类型。rate是3.5，是数字，没问题。amountReqFlag是true，因为“可议价”是布尔值，这里正确。rateReqFlag也是true，同样正确。\n\n接下来，检查是否有遗漏的字段，比如用户提到的其他字段是否都包含在内。所有要求的字段都已经被提取，没有多余的说明。最后，确保JSON格式正确，没有语法错误，并且键名正确对应。确认无误后，就可以将结果返回给用户了。\n</think>\n\n{\n    \"assetCode\": \"21国债01\",\n    \"assetName\": \"21国债01\",\n    \"trdSide\": \"买入\",\n    \"amount\": 10000000,\n    \"rate\": 3.5,\n    \"amountReqFlag\": true,\n    \"rateReqFlag\": true\n}", "done": true, "done_reason": "stop", "context": [151644, 872, 198, 14880, 44063, 87752, 104976, 99886, 108704, 106637, 17714, 5370, 68805, 3837, 91680, 31526, 5370, 64429, 3837, 100148, 102298, 92894, 87335, 66394, 28311, 310, 220, 17, 16, 114418, 15, 16, 220, 108532, 220, 16, 15, 15, 15, 31207, 220, 18, 13, 20, 4, 26853, 107, 96422, 50292, 18574, 310, 18137, 250, 222, 30534, 107439, 9370, 44931, 28311, 310, 481, 9329, 2078, 25, 4891, 222, 118, 100054, 46100, 198, 310, 481, 9329, 675, 25, 4891, 222, 118, 100054, 29991, 198, 310, 481, 489, 67, 16384, 25, 220, 99886, 100696, 9909, 108532, 14, 109430, 23083, 310, 481, 3311, 25, 220, 99886, 80094, 9909, 82587, 23083, 310, 481, 4379, 25, 19468, 102, 95355, 9909, 82587, 23083, 310, 481, 3311, 27234, 12135, 25, 220, 80094, 64471, 30440, 96422, 9909, 117661, 25511, 23083, 310, 481, 4379, 27234, 12135, 25, 19468, 102, 95355, 64471, 30440, 96422, 9909, 117661, 25511, 23083, 3374, 310, 80426, 66017, 68805, 28311, 310, 341, 394, 330, 9852, 2078, 788, 330, 17, 16, 114418, 15, 16, 756, 394, 330, 9852, 675, 788, 330, 17, 16, 114418, 15, 16, 756, 394, 330, 376, 67, 16384, 788, 330, 108532, 756, 394, 330, 6045, 788, 220, 16, 15, 15, 15, 15, 15, 15, 15, 345, 394, 330, 7698, 788, 220, 18, 13, 20, 345, 394, 330, 6045, 27234, 12135, 788, 830, 345, 394, 330, 7698, 27234, 12135, 788, 830, 198, 310, 335, 151645, 198, 151644, 77091, 198, 151667, 198, 99692, 3837, 107520, 85106, 54542, 20002, 103008, 104976, 99886, 108704, 3837, 105278, 106637, 17714, 105146, 9370, 5370, 68805, 1773, 101140, 3837, 104515, 104857, 101113, 20002, 103008, 108704, 33108, 101882, 9370, 44931, 1773, 20002, 107485, 9370, 108704, 20412, 36987, 17, 16, 114418, 15, 16, 220, 108532, 220, 16, 15, 15, 15, 31207, 220, 18, 13, 20, 4, 26853, 107, 96422, 50292, 55807, 35946, 85106, 107439, 20221, 101137, 101882, 9370, 44931, 90395, 103944, 16530, 102298, 92894, 87335, 66394, 3407, 101140, 3837, 60610, 103991, 44931, 9370, 88991, 33071, 1773, 9852, 2078, 104583, 104976, 46100, 3837, 99817, 101041, 107439, 2073, 17, 16, 114418, 15, 16, 854, 114815, 1773, 9852, 675, 100000, 2073, 17, 16, 114418, 15, 16, 33590, 104544, 106273, 9370, 1773, 376, 67, 16384, 20412, 2073, 108532, 33590, 101137, 20002, 101882, 9370, 108532, 100696, 1773, 6045, 20412, 16, 15, 15, 15, 31207, 3837, 77288, 105213, 75317, 20412, 82587, 3837, 99817, 101041, 105359, 17714, 16, 15, 15, 15, 15, 15, 15, 15, 3837, 99519, 104811, 82587, 87267, 85106, 105359, 17714, 111944, 31905, 1773, 7698, 20412, 18, 13, 20, 3837, 20412, 82587, 3837, 114815, 1773, 6045, 27234, 12135, 20412, 1866, 3837, 99519, 2073, 30440, 96422, 50292, 854, 20412, 117661, 25511, 3837, 99817, 88991, 1773, 7698, 27234, 12135, 100000, 1866, 3837, 101165, 88991, 3407, 104326, 3837, 101071, 107189, 114078, 9370, 44931, 3837, 101912, 20002, 104496, 9370, 92894, 44931, 64471, 71268, 102298, 18493, 31843, 1773, 55338, 101882, 9370, 44931, 71268, 108308, 107439, 3837, 80443, 115917, 66394, 1773, 100161, 3837, 103944, 5370, 68805, 88991, 3837, 80443, 117206, 32100, 90395, 100136, 60949, 13072, 88991, 103124, 1773, 81167, 42192, 29056, 33447, 3837, 102003, 44063, 59151, 31526, 89012, 20002, 34187, 8997, 151668, 271, 515, 262, 330, 9852, 2078, 788, 330, 17, 16, 114418, 15, 16, 756, 262, 330, 9852, 675, 788, 330, 17, 16, 114418, 15, 16, 756, 262, 330, 376, 67, 16384, 788, 330, 108532, 756, 262, 330, 6045, 788, 220, 16, 15, 15, 15, 15, 15, 15, 15, 345, 262, 330, 7698, 788, 220, 18, 13, 20, 345, 262, 330, 6045, 27234, 12135, 788, 830, 345, 262, 330, 7698, 27234, 12135, 788, 830, 198, 92], "total_duration": 8608947162, "load_duration": 31819133, "prompt_eval_count": 233, "prompt_eval_duration": 1948317152, "eval_count": 349, "eval_duration": 6627602334}
2025-05-16 11:01:09,563 - __main__ - INFO - Validating Ollama response: {"model": "qwen3:0.6b", "created_at": "2025-05-16T03:01:09.549943Z", "response": "<think>\n好的，我现在需要处理用户提供的债券交易文本，将其解析为指定的JSON格式。首先，我要仔细阅读用户提供的文本和要求的字段。用户给出的文本是：“21国债01 买入 1000万 3.5% 可议价”。我需要提取出符合要求的字段，并确保不包含其他文字说明。\n\n首先，确定每个字段的正确性。assetCode应该是债券代码，这里直接提取“21国债01”没问题。assetName也是“21国债01”，看起来是对的。trdSide是“买入”，符合用户要求的买入方向。amount是1000万，但要注意单位是数字，这里直接转换为10000000，因为中文数字可能需要转换为数值类型。rate是3.5，是数字，没问题。amountReqFlag是true，因为“可议价”是布尔值，这里正确。rateReqFlag也是true，同样正确。\n\n接下来，检查是否有遗漏的字段，比如用户提到的其他字段是否都包含在内。所有要求的字段都已经被提取，没有多余的说明。最后，确保JSON格式正确，没有语法错误，并且键名正确对应。确认无误后，就可以将结果返回给用户了。\n</think>\n\n{\n    \"assetCode\": \"21国债01\",\n    \"assetName\": \"21国债01\",\n    \"trdSide\": \"买入\",\n    \"amount\": 10000000,\n    \"rate\": 3.5,\n    \"amountReqFlag\": true,\n    \"rateReqFlag\": true\n}", "done": true, "done_reason": "stop", "context": [151644, 872, 198, 14880, 44063, 87752, 104976, 99886, 108704, 106637, 17714, 5370, 68805, 3837, 91680, 31526, 5370, 64429, 3837, 100148, 102298, 92894, 87335, 66394, 28311, 310, 220, 17, 16, 114418, 15, 16, 220, 108532, 220, 16, 15, 15, 15, 31207, 220, 18, 13, 20, 4, 26853, 107, 96422, 50292, 18574, 310, 18137, 250, 222, 30534, 107439, 9370, 44931, 28311, 310, 481, 9329, 2078, 25, 4891, 222, 118, 100054, 46100, 198, 310, 481, 9329, 675, 25, 4891, 222, 118, 100054, 29991, 198, 310, 481, 489, 67, 16384, 25, 220, 99886, 100696, 9909, 108532, 14, 109430, 23083, 310, 481, 3311, 25, 220, 99886, 80094, 9909, 82587, 23083, 310, 481, 4379, 25, 19468, 102, 95355, 9909, 82587, 23083, 310, 481, 3311, 27234, 12135, 25, 220, 80094, 64471, 30440, 96422, 9909, 117661, 25511, 23083, 310, 481, 4379, 27234, 12135, 25, 19468, 102, 95355, 64471, 30440, 96422, 9909, 117661, 25511, 23083, 3374, 310, 80426, 66017, 68805, 28311, 310, 341, 394, 330, 9852, 2078, 788, 330, 17, 16, 114418, 15, 16, 756, 394, 330, 9852, 675, 788, 330, 17, 16, 114418, 15, 16, 756, 394, 330, 376, 67, 16384, 788, 330, 108532, 756, 394, 330, 6045, 788, 220, 16, 15, 15, 15, 15, 15, 15, 15, 345, 394, 330, 7698, 788, 220, 18, 13, 20, 345, 394, 330, 6045, 27234, 12135, 788, 830, 345, 394, 330, 7698, 27234, 12135, 788, 830, 198, 310, 335, 151645, 198, 151644, 77091, 198, 151667, 198, 99692, 3837, 107520, 85106, 54542, 20002, 103008, 104976, 99886, 108704, 3837, 105278, 106637, 17714, 105146, 9370, 5370, 68805, 1773, 101140, 3837, 104515, 104857, 101113, 20002, 103008, 108704, 33108, 101882, 9370, 44931, 1773, 20002, 107485, 9370, 108704, 20412, 36987, 17, 16, 114418, 15, 16, 220, 108532, 220, 16, 15, 15, 15, 31207, 220, 18, 13, 20, 4, 26853, 107, 96422, 50292, 55807, 35946, 85106, 107439, 20221, 101137, 101882, 9370, 44931, 90395, 103944, 16530, 102298, 92894, 87335, 66394, 3407, 101140, 3837, 60610, 103991, 44931, 9370, 88991, 33071, 1773, 9852, 2078, 104583, 104976, 46100, 3837, 99817, 101041, 107439, 2073, 17, 16, 114418, 15, 16, 854, 114815, 1773, 9852, 675, 100000, 2073, 17, 16, 114418, 15, 16, 33590, 104544, 106273, 9370, 1773, 376, 67, 16384, 20412, 2073, 108532, 33590, 101137, 20002, 101882, 9370, 108532, 100696, 1773, 6045, 20412, 16, 15, 15, 15, 31207, 3837, 77288, 105213, 75317, 20412, 82587, 3837, 99817, 101041, 105359, 17714, 16, 15, 15, 15, 15, 15, 15, 15, 3837, 99519, 104811, 82587, 87267, 85106, 105359, 17714, 111944, 31905, 1773, 7698, 20412, 18, 13, 20, 3837, 20412, 82587, 3837, 114815, 1773, 6045, 27234, 12135, 20412, 1866, 3837, 99519, 2073, 30440, 96422, 50292, 854, 20412, 117661, 25511, 3837, 99817, 88991, 1773, 7698, 27234, 12135, 100000, 1866, 3837, 101165, 88991, 3407, 104326, 3837, 101071, 107189, 114078, 9370, 44931, 3837, 101912, 20002, 104496, 9370, 92894, 44931, 64471, 71268, 102298, 18493, 31843, 1773, 55338, 101882, 9370, 44931, 71268, 108308, 107439, 3837, 80443, 115917, 66394, 1773, 100161, 3837, 103944, 5370, 68805, 88991, 3837, 80443, 117206, 32100, 90395, 100136, 60949, 13072, 88991, 103124, 1773, 81167, 42192, 29056, 33447, 3837, 102003, 44063, 59151, 31526, 89012, 20002, 34187, 8997, 151668, 271, 515, 262, 330, 9852, 2078, 788, 330, 17, 16, 114418, 15, 16, 756, 262, 330, 9852, 675, 788, 330, 17, 16, 114418, 15, 16, 756, 262, 330, 376, 67, 16384, 788, 330, 108532, 756, 262, 330, 6045, 788, 220, 16, 15, 15, 15, 15, 15, 15, 15, 345, 262, 330, 7698, 788, 220, 18, 13, 20, 345, 262, 330, 6045, 27234, 12135, 788, 830, 345, 262, 330, 7698, 27234, 12135, 788, 830, 198, 92], "total_duration": 8608947162, "load_duration": 31819133, "prompt_eval_count": 233, "prompt_eval_duration": 1948317152, "eval_count": 349, "eval_duration": 6627602334}
2025-05-16 11:01:09,563 - __main__ - INFO - Raw model response: <think>
好的，我现在需要处理用户提供的债券交易文本，将其解析为指定的JSON格式。首先，我要仔细阅读用户提供的文本和要求的字段。用户给出的文本是：“21国债01 买入 1000万 3.5% 可议价”。我需要提取出符合要求的字段，并确保不包含其他文字说明。

首先，确定每个字段的正确性。assetCode应该是债券代码，这里直接提取“21国债01”没问题。assetName也是“21国债01”，看起来是对的。trdSide是“买入”，符合用户要求的买入方向。amount是1000万，但要注意单位是数字，这里直接转换为10000000，因为中文数字可能需要转换为数值类型。rate是3.5，是数字，没问题。amountReqFlag是true，因为“可议价”是布尔值，这里正确。rateReqFlag也是true，同样正确。

接下来，检查是否有遗漏的字段，比如用户提到的其他字段是否都包含在内。所有要求的字段都已经被提取，没有多余的说明。最后，确保JSON格式正确，没有语法错误，并且键名正确对应。确认无误后，就可以将结果返回给用户了。
</think>

{
    "assetCode": "21国债01",
    "assetName": "21国债01",
    "trdSide": "买入",
    "amount": 10000000,
    "rate": 3.5,
    "amountReqFlag": true,
    "rateReqFlag": true
}
2025-05-16 11:01:09,563 - __main__ - ERROR - JSON decode error: Expecting value: line 1 column 1 (char 0)
2025-05-16 11:01:09,564 - __main__ - INFO - Extracted JSON string: {
    "assetCode": "21国债01",
    "assetName": "21国债01",
    "trdSide": "买入",
    "amount": 10000000,
    "rate": 3.5,
    "amountReqFlag": true,
    "rateReqFlag": true
}
2025-05-16 11:01:09,564 - __main__ - INFO - Successfully parsed bond data: {'assetCode': '21国债01', 'assetName': '21国债01', 'trdSide': '买入', 'amount': 10000000, 'rate': 3.5, 'amountReqFlag': True, 'rateReqFlag': True}
2025-05-16 11:01:09,565 - __main__ - INFO - Successfully validated and returned parsed data: assetCode='21国债01' assetName='21国债01' trdSide='买入' amount=10000000.0 rate=3.5 amountReqFlag=True rateReqFlag=True
2025-05-16 11:01:17,957 - __main__ - INFO - Received request to parse bond text: 21国债01 买入 1000万 3.5% 可议价
2025-05-16 11:01:17,974 - __main__ - INFO - Calling Ollama model with text: 21国债01 买入 1000万 3.5% 可议价
2025-05-16 11:01:17,983 - __main__ - INFO - Ollama service is available
2025-05-16 11:01:17,992 - __main__ - INFO - Available models: {"models": [{"name": "qwen3:0.6b", "model": "qwen3:0.6b", "modified_at": "2025-05-08T01:27:52.753829715+08:00", "size": 522653526, "digest": "3bae9c93586b27bedaa979979733c2b0edd1d0defc745e9638f2161192a0ccf0", "details": {"parent_model": "", "format": "gguf", "family": "qwen3", "families": ["qwen3"], "parameter_size": "751.63M", "quantization_level": "Q4_K_M"}}]}
2025-05-16 11:01:18,005 - __main__ - INFO - Sending request to Ollama: {"model": "qwen3:0.6b", "prompt": "请将以下债券交易文本解析为JSON格式，只返回JSON对象，不要包含其他文字说明：\n            21国债01 买入 1000万 3.5% 可议价\n            \n            需要提取的字段：\n            - assetCode: 债券代码\n            - assetName: 债券名称\n            - trdSide: 交易方向（买入/卖出）\n            - amount: 交易金额（数字）\n            - rate: 利率（数字）\n            - amountReqFlag: 金额是否可议（布尔值）\n            - rateReqFlag: 利率是否可议（布尔值）\n            \n            示例输出格式：\n            {\n                \"assetCode\": \"21国债01\",\n                \"assetName\": \"21国债01\",\n                \"trdSide\": \"买入\",\n                \"amount\": 10000000,\n                \"rate\": 3.5,\n                \"amountReqFlag\": true,\n                \"rateReqFlag\": true\n            }", "stream": false}
2025-05-16 11:01:27,981 - __main__ - INFO - Received response from Ollama: {"model": "qwen3:0.6b", "created_at": "2025-05-16T03:01:27.973573Z", "response": "<think>\n好的，我现在需要处理用户提供的债券交易文本，并将其解析为指定的JSON格式。首先，我要仔细阅读用户的要求，确保完全理解所有细节。\n\n用户给出的文本是：“21国债01 买入 1000万 3.5% 可议价”。需要提取的字段包括assetCode、assetName、trdSide、amount、rate、amountReqFlag和rateReqFlag。同时，输出必须严格符合JSON格式，不能有其他文字说明。\n\n首先，我需要识别每个字段。assetCode应该是债券代码，这里明显是“21国债01”。assetName是名称，也是“21国债01”。trdSide是买入，所以填“买入”。amount是交易金额，用户提供的数字是1000万，也就是10,000,000元，所以amount应该是10000000。rate是3.5%，即0.035。amountReqFlag是布尔值，这里应该是true，因为金额可议。rateReqFlag也是true，因为利率可议。所有字段都正确对应，没有遗漏。\n\n需要检查是否有其他可能的错误，比如单位转换是否正确，或者数值是否正确。例如，金额是否正确处理为数字类型，而不是字符串。这里用户已经明确给出数字，所以没问题。\n\n最后，确保JSON格式正确，没有额外的逗号或括号，严格按照示例输出格式。确认所有字段都正确无误后，就可以生成最终的JSON对象了。\n</think>\n\n{\n  \"assetCode\": \"21国债01\",\n  \"assetName\": \"21国债01\",\n  \"trdSide\": \"买入\",\n  \"amount\": 10000000,\n  \"rate\": 3.5,\n  \"amountReqFlag\": true,\n  \"rateReqFlag\": true\n}", "done": true, "done_reason": "stop", "context": [151644, 872, 198, 14880, 44063, 87752, 104976, 99886, 108704, 106637, 17714, 5370, 68805, 3837, 91680, 31526, 5370, 64429, 3837, 100148, 102298, 92894, 87335, 66394, 28311, 310, 220, 17, 16, 114418, 15, 16, 220, 108532, 220, 16, 15, 15, 15, 31207, 220, 18, 13, 20, 4, 26853, 107, 96422, 50292, 18574, 310, 18137, 250, 222, 30534, 107439, 9370, 44931, 28311, 310, 481, 9329, 2078, 25, 4891, 222, 118, 100054, 46100, 198, 310, 481, 9329, 675, 25, 4891, 222, 118, 100054, 29991, 198, 310, 481, 489, 67, 16384, 25, 220, 99886, 100696, 9909, 108532, 14, 109430, 23083, 310, 481, 3311, 25, 220, 99886, 80094, 9909, 82587, 23083, 310, 481, 4379, 25, 19468, 102, 95355, 9909, 82587, 23083, 310, 481, 3311, 27234, 12135, 25, 220, 80094, 64471, 30440, 96422, 9909, 117661, 25511, 23083, 310, 481, 4379, 27234, 12135, 25, 19468, 102, 95355, 64471, 30440, 96422, 9909, 117661, 25511, 23083, 3374, 310, 80426, 66017, 68805, 28311, 310, 341, 394, 330, 9852, 2078, 788, 330, 17, 16, 114418, 15, 16, 756, 394, 330, 9852, 675, 788, 330, 17, 16, 114418, 15, 16, 756, 394, 330, 376, 67, 16384, 788, 330, 108532, 756, 394, 330, 6045, 788, 220, 16, 15, 15, 15, 15, 15, 15, 15, 345, 394, 330, 7698, 788, 220, 18, 13, 20, 345, 394, 330, 6045, 27234, 12135, 788, 830, 345, 394, 330, 7698, 27234, 12135, 788, 830, 198, 310, 335, 151645, 198, 151644, 77091, 198, 151667, 198, 99692, 3837, 107520, 85106, 54542, 20002, 103008, 104976, 99886, 108704, 90395, 105278, 106637, 17714, 105146, 9370, 5370, 68805, 1773, 101140, 3837, 104515, 104857, 101113, 20002, 104272, 3837, 103944, 100372, 101128, 55338, 104449, 3407, 20002, 107485, 9370, 108704, 20412, 36987, 17, 16, 114418, 15, 16, 220, 108532, 220, 16, 15, 15, 15, 31207, 220, 18, 13, 20, 4, 26853, 107, 96422, 50292, 55807, 85106, 107439, 9370, 44931, 100630, 9852, 2078, 5373, 9852, 675, 5373, 376, 67, 16384, 5373, 6045, 5373, 7698, 5373, 6045, 27234, 12135, 33108, 7698, 27234, 12135, 1773, 91572, 3837, 66017, 100645, 100470, 101137, 5370, 68805, 3837, 53153, 18830, 92894, 87335, 66394, 3407, 101140, 3837, 35946, 85106, 102450, 103991, 44931, 1773, 9852, 2078, 104583, 104976, 46100, 3837, 99817, 100687, 20412, 2073, 17, 16, 114418, 15, 16, 55807, 9852, 675, 20412, 29991, 3837, 100000, 2073, 17, 16, 114418, 15, 16, 55807, 376, 67, 16384, 20412, 108532, 3837, 99999, 68756, 2073, 108532, 55807, 6045, 20412, 99886, 80094, 3837, 20002, 103008, 82587, 20412, 16, 15, 15, 15, 31207, 3837, 102200, 16, 15, 11, 15, 15, 15, 11, 15, 15, 15, 23305, 3837, 99999, 6045, 104583, 16, 15, 15, 15, 15, 15, 15, 15, 1773, 7698, 20412, 18, 13, 20, 69982, 91676, 15, 13, 15, 18, 20, 1773, 6045, 27234, 12135, 20412, 117661, 25511, 3837, 99817, 104583, 1866, 3837, 99519, 80094, 30440, 96422, 1773, 7698, 27234, 12135, 100000, 1866, 3837, 99519, 102299, 30440, 96422, 1773, 55338, 44931, 71268, 88991, 103124, 3837, 80443, 114078, 3407, 85106, 101071, 107189, 92894, 87267, 9370, 32100, 3837, 101912, 75317, 105359, 64471, 88991, 3837, 100631, 111944, 64471, 88991, 1773, 77557, 3837, 80094, 64471, 88991, 54542, 17714, 82587, 31905, 3837, 104610, 66558, 1773, 99817, 20002, 99461, 100692, 107485, 82587, 3837, 99999, 114815, 3407, 100161, 3837, 103944, 5370, 68805, 88991, 3837, 80443, 108593, 9370, 107463, 17992, 57191, 100139, 17992, 3837, 110439, 19793, 26355, 66017, 68805, 1773, 81167, 55338, 44931, 71268, 88991, 42192, 29056, 33447, 3837, 102003, 43959, 103941, 9370, 5370, 64429, 34187, 8997, 151668, 271, 515, 220, 330, 9852, 2078, 788, 330, 17, 16, 114418, 15, 16, 756, 220, 330, 9852, 675, 788, 330, 17, 16, 114418, 15, 16, 756, 220, 330, 376, 67, 16384, 788, 330, 108532, 756, 220, 330, 6045, 788, 220, 16, 15, 15, 15, 15, 15, 15, 15, 345, 220, 330, 7698, 788, 220, 18, 13, 20, 345, 220, 330, 6045, 27234, 12135, 788, 830, 345, 220, 330, 7698, 27234, 12135, 788, 830, 198, 92], "total_duration": 9960672602, "load_duration": 25516200, "prompt_eval_count": 233, "prompt_eval_duration": 26089424, "eval_count": 401, "eval_duration": 9907984780}
2025-05-16 11:01:27,981 - __main__ - INFO - Validating Ollama response: {"model": "qwen3:0.6b", "created_at": "2025-05-16T03:01:27.973573Z", "response": "<think>\n好的，我现在需要处理用户提供的债券交易文本，并将其解析为指定的JSON格式。首先，我要仔细阅读用户的要求，确保完全理解所有细节。\n\n用户给出的文本是：“21国债01 买入 1000万 3.5% 可议价”。需要提取的字段包括assetCode、assetName、trdSide、amount、rate、amountReqFlag和rateReqFlag。同时，输出必须严格符合JSON格式，不能有其他文字说明。\n\n首先，我需要识别每个字段。assetCode应该是债券代码，这里明显是“21国债01”。assetName是名称，也是“21国债01”。trdSide是买入，所以填“买入”。amount是交易金额，用户提供的数字是1000万，也就是10,000,000元，所以amount应该是10000000。rate是3.5%，即0.035。amountReqFlag是布尔值，这里应该是true，因为金额可议。rateReqFlag也是true，因为利率可议。所有字段都正确对应，没有遗漏。\n\n需要检查是否有其他可能的错误，比如单位转换是否正确，或者数值是否正确。例如，金额是否正确处理为数字类型，而不是字符串。这里用户已经明确给出数字，所以没问题。\n\n最后，确保JSON格式正确，没有额外的逗号或括号，严格按照示例输出格式。确认所有字段都正确无误后，就可以生成最终的JSON对象了。\n</think>\n\n{\n  \"assetCode\": \"21国债01\",\n  \"assetName\": \"21国债01\",\n  \"trdSide\": \"买入\",\n  \"amount\": 10000000,\n  \"rate\": 3.5,\n  \"amountReqFlag\": true,\n  \"rateReqFlag\": true\n}", "done": true, "done_reason": "stop", "context": [151644, 872, 198, 14880, 44063, 87752, 104976, 99886, 108704, 106637, 17714, 5370, 68805, 3837, 91680, 31526, 5370, 64429, 3837, 100148, 102298, 92894, 87335, 66394, 28311, 310, 220, 17, 16, 114418, 15, 16, 220, 108532, 220, 16, 15, 15, 15, 31207, 220, 18, 13, 20, 4, 26853, 107, 96422, 50292, 18574, 310, 18137, 250, 222, 30534, 107439, 9370, 44931, 28311, 310, 481, 9329, 2078, 25, 4891, 222, 118, 100054, 46100, 198, 310, 481, 9329, 675, 25, 4891, 222, 118, 100054, 29991, 198, 310, 481, 489, 67, 16384, 25, 220, 99886, 100696, 9909, 108532, 14, 109430, 23083, 310, 481, 3311, 25, 220, 99886, 80094, 9909, 82587, 23083, 310, 481, 4379, 25, 19468, 102, 95355, 9909, 82587, 23083, 310, 481, 3311, 27234, 12135, 25, 220, 80094, 64471, 30440, 96422, 9909, 117661, 25511, 23083, 310, 481, 4379, 27234, 12135, 25, 19468, 102, 95355, 64471, 30440, 96422, 9909, 117661, 25511, 23083, 3374, 310, 80426, 66017, 68805, 28311, 310, 341, 394, 330, 9852, 2078, 788, 330, 17, 16, 114418, 15, 16, 756, 394, 330, 9852, 675, 788, 330, 17, 16, 114418, 15, 16, 756, 394, 330, 376, 67, 16384, 788, 330, 108532, 756, 394, 330, 6045, 788, 220, 16, 15, 15, 15, 15, 15, 15, 15, 345, 394, 330, 7698, 788, 220, 18, 13, 20, 345, 394, 330, 6045, 27234, 12135, 788, 830, 345, 394, 330, 7698, 27234, 12135, 788, 830, 198, 310, 335, 151645, 198, 151644, 77091, 198, 151667, 198, 99692, 3837, 107520, 85106, 54542, 20002, 103008, 104976, 99886, 108704, 90395, 105278, 106637, 17714, 105146, 9370, 5370, 68805, 1773, 101140, 3837, 104515, 104857, 101113, 20002, 104272, 3837, 103944, 100372, 101128, 55338, 104449, 3407, 20002, 107485, 9370, 108704, 20412, 36987, 17, 16, 114418, 15, 16, 220, 108532, 220, 16, 15, 15, 15, 31207, 220, 18, 13, 20, 4, 26853, 107, 96422, 50292, 55807, 85106, 107439, 9370, 44931, 100630, 9852, 2078, 5373, 9852, 675, 5373, 376, 67, 16384, 5373, 6045, 5373, 7698, 5373, 6045, 27234, 12135, 33108, 7698, 27234, 12135, 1773, 91572, 3837, 66017, 100645, 100470, 101137, 5370, 68805, 3837, 53153, 18830, 92894, 87335, 66394, 3407, 101140, 3837, 35946, 85106, 102450, 103991, 44931, 1773, 9852, 2078, 104583, 104976, 46100, 3837, 99817, 100687, 20412, 2073, 17, 16, 114418, 15, 16, 55807, 9852, 675, 20412, 29991, 3837, 100000, 2073, 17, 16, 114418, 15, 16, 55807, 376, 67, 16384, 20412, 108532, 3837, 99999, 68756, 2073, 108532, 55807, 6045, 20412, 99886, 80094, 3837, 20002, 103008, 82587, 20412, 16, 15, 15, 15, 31207, 3837, 102200, 16, 15, 11, 15, 15, 15, 11, 15, 15, 15, 23305, 3837, 99999, 6045, 104583, 16, 15, 15, 15, 15, 15, 15, 15, 1773, 7698, 20412, 18, 13, 20, 69982, 91676, 15, 13, 15, 18, 20, 1773, 6045, 27234, 12135, 20412, 117661, 25511, 3837, 99817, 104583, 1866, 3837, 99519, 80094, 30440, 96422, 1773, 7698, 27234, 12135, 100000, 1866, 3837, 99519, 102299, 30440, 96422, 1773, 55338, 44931, 71268, 88991, 103124, 3837, 80443, 114078, 3407, 85106, 101071, 107189, 92894, 87267, 9370, 32100, 3837, 101912, 75317, 105359, 64471, 88991, 3837, 100631, 111944, 64471, 88991, 1773, 77557, 3837, 80094, 64471, 88991, 54542, 17714, 82587, 31905, 3837, 104610, 66558, 1773, 99817, 20002, 99461, 100692, 107485, 82587, 3837, 99999, 114815, 3407, 100161, 3837, 103944, 5370, 68805, 88991, 3837, 80443, 108593, 9370, 107463, 17992, 57191, 100139, 17992, 3837, 110439, 19793, 26355, 66017, 68805, 1773, 81167, 55338, 44931, 71268, 88991, 42192, 29056, 33447, 3837, 102003, 43959, 103941, 9370, 5370, 64429, 34187, 8997, 151668, 271, 515, 220, 330, 9852, 2078, 788, 330, 17, 16, 114418, 15, 16, 756, 220, 330, 9852, 675, 788, 330, 17, 16, 114418, 15, 16, 756, 220, 330, 376, 67, 16384, 788, 330, 108532, 756, 220, 330, 6045, 788, 220, 16, 15, 15, 15, 15, 15, 15, 15, 345, 220, 330, 7698, 788, 220, 18, 13, 20, 345, 220, 330, 6045, 27234, 12135, 788, 830, 345, 220, 330, 7698, 27234, 12135, 788, 830, 198, 92], "total_duration": 9960672602, "load_duration": 25516200, "prompt_eval_count": 233, "prompt_eval_duration": 26089424, "eval_count": 401, "eval_duration": 9907984780}
2025-05-16 11:01:27,981 - __main__ - INFO - Raw model response: <think>
好的，我现在需要处理用户提供的债券交易文本，并将其解析为指定的JSON格式。首先，我要仔细阅读用户的要求，确保完全理解所有细节。

用户给出的文本是：“21国债01 买入 1000万 3.5% 可议价”。需要提取的字段包括assetCode、assetName、trdSide、amount、rate、amountReqFlag和rateReqFlag。同时，输出必须严格符合JSON格式，不能有其他文字说明。

首先，我需要识别每个字段。assetCode应该是债券代码，这里明显是“21国债01”。assetName是名称，也是“21国债01”。trdSide是买入，所以填“买入”。amount是交易金额，用户提供的数字是1000万，也就是10,000,000元，所以amount应该是10000000。rate是3.5%，即0.035。amountReqFlag是布尔值，这里应该是true，因为金额可议。rateReqFlag也是true，因为利率可议。所有字段都正确对应，没有遗漏。

需要检查是否有其他可能的错误，比如单位转换是否正确，或者数值是否正确。例如，金额是否正确处理为数字类型，而不是字符串。这里用户已经明确给出数字，所以没问题。

最后，确保JSON格式正确，没有额外的逗号或括号，严格按照示例输出格式。确认所有字段都正确无误后，就可以生成最终的JSON对象了。
</think>

{
  "assetCode": "21国债01",
  "assetName": "21国债01",
  "trdSide": "买入",
  "amount": 10000000,
  "rate": 3.5,
  "amountReqFlag": true,
  "rateReqFlag": true
}
2025-05-16 11:01:27,982 - __main__ - ERROR - JSON decode error: Expecting value: line 1 column 1 (char 0)
2025-05-16 11:01:27,982 - __main__ - INFO - Extracted JSON string: {
  "assetCode": "21国债01",
  "assetName": "21国债01",
  "trdSide": "买入",
  "amount": 10000000,
  "rate": 3.5,
  "amountReqFlag": true,
  "rateReqFlag": true
}
2025-05-16 11:01:27,982 - __main__ - INFO - Successfully parsed bond data: {'assetCode': '21国债01', 'assetName': '21国债01', 'trdSide': '买入', 'amount': 10000000, 'rate': 3.5, 'amountReqFlag': True, 'rateReqFlag': True}
2025-05-16 11:01:27,983 - __main__ - INFO - Successfully validated and returned parsed data: assetCode='21国债01' assetName='21国债01' trdSide='买入' amount=10000000.0 rate=3.5 amountReqFlag=True rateReqFlag=True
2025-05-16 11:02:01,343 - __main__ - INFO - Received request to parse bond text: 21国债01 买入 *1000万 *3.5% 
2025-05-16 11:02:01,355 - __main__ - INFO - Calling Ollama model with text: 21国债01 买入 *1000万 *3.5% 
2025-05-16 11:02:01,363 - __main__ - INFO - Ollama service is available
2025-05-16 11:02:01,388 - __main__ - INFO - Available models: {"models": [{"name": "qwen3:0.6b", "model": "qwen3:0.6b", "modified_at": "2025-05-08T01:27:52.753829715+08:00", "size": 522653526, "digest": "3bae9c93586b27bedaa979979733c2b0edd1d0defc745e9638f2161192a0ccf0", "details": {"parent_model": "", "format": "gguf", "family": "qwen3", "families": ["qwen3"], "parameter_size": "751.63M", "quantization_level": "Q4_K_M"}}]}
2025-05-16 11:02:01,402 - __main__ - INFO - Sending request to Ollama: {"model": "qwen3:0.6b", "prompt": "请将以下债券交易文本解析为JSON格式，只返回JSON对象，不要包含其他文字说明：\n            21国债01 买入 *1000万 *3.5% \n            \n            需要提取的字段：\n            - assetCode: 债券代码\n            - assetName: 债券名称\n            - trdSide: 交易方向（买入/卖出）\n            - amount: 交易金额（数字）\n            - rate: 利率（数字）\n            - amountReqFlag: 金额是否可议（布尔值）\n            - rateReqFlag: 利率是否可议（布尔值）\n            \n            示例输出格式：\n            {\n                \"assetCode\": \"21国债01\",\n                \"assetName\": \"21国债01\",\n                \"trdSide\": \"买入\",\n                \"amount\": 10000000,\n                \"rate\": 3.5,\n                \"amountReqFlag\": true,\n                \"rateReqFlag\": true\n            }", "stream": false}
2025-05-16 11:02:13,126 - __main__ - INFO - Received response from Ollama: {"model": "qwen3:0.6b", "created_at": "2025-05-16T03:02:13.119509Z", "response": "<think>\n好的，我现在需要处理用户提供的债券交易文本，将其解析为JSON格式。首先，我要仔细阅读用户提供的文本和要求的字段。用户给的例子中，文本是“21国债01 买入 *1000万 *3.5%”，并要求提取资产代码、名称、交易方向、金额、利率、金额是否可议、利率是否可议等字段。\n\n首先，资产代码应该是“21国债01”，这看起来直接对应文本中的第一个数字，所以没问题。债券名称也是一样的，所以“assetName”填入“21国债01”是正确的。\n\n接下来是交易方向，用户提供的文本中有“买入”，所以trdSide设为“买入”。金额是1000万，这里用户用了中文数字“*1000万”，需要转换为数字类型。注意用户可能希望金额以数字形式存储，所以这里直接写10000000即可。\n\n利率是3.5%，但用户可能希望以数值形式存储，所以rate设为3.5。金额是否可议是true，因为用户用了“*1000万”，但实际金额是1000万，可能这个标记是可议的，所以amountReqFlag设为true。同样，利率是否可议也是true，所以rateReqFlag设为true。\n\n现在检查所有字段是否符合要求，确保没有遗漏。比如，用户提到“金额是否可议”和“利率是否可议”，这两个字段都是布尔值，这里正确设置为true。确认所有字段都在JSON对象中，没有多余的文字说明，直接输出即可。\n</think>\n\n{\n  \"assetCode\": \"21国债01\",\n  \"assetName\": \"21国债01\",\n  \"trdSide\": \"买入\",\n  \"amount\": 10000000,\n  \"rate\": 3.5,\n  \"amountReqFlag\": true,\n  \"rateReqFlag\": true\n}", "done": true, "done_reason": "stop", "context": [151644, 872, 198, 14880, 44063, 87752, 104976, 99886, 108704, 106637, 17714, 5370, 68805, 3837, 91680, 31526, 5370, 64429, 3837, 100148, 102298, 92894, 87335, 66394, 28311, 310, 220, 17, 16, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 353, 18, 13, 20, 4, 83913, 310, 18137, 250, 222, 30534, 107439, 9370, 44931, 28311, 310, 481, 9329, 2078, 25, 4891, 222, 118, 100054, 46100, 198, 310, 481, 9329, 675, 25, 4891, 222, 118, 100054, 29991, 198, 310, 481, 489, 67, 16384, 25, 220, 99886, 100696, 9909, 108532, 14, 109430, 23083, 310, 481, 3311, 25, 220, 99886, 80094, 9909, 82587, 23083, 310, 481, 4379, 25, 19468, 102, 95355, 9909, 82587, 23083, 310, 481, 3311, 27234, 12135, 25, 220, 80094, 64471, 30440, 96422, 9909, 117661, 25511, 23083, 310, 481, 4379, 27234, 12135, 25, 19468, 102, 95355, 64471, 30440, 96422, 9909, 117661, 25511, 23083, 3374, 310, 80426, 66017, 68805, 28311, 310, 341, 394, 330, 9852, 2078, 788, 330, 17, 16, 114418, 15, 16, 756, 394, 330, 9852, 675, 788, 330, 17, 16, 114418, 15, 16, 756, 394, 330, 376, 67, 16384, 788, 330, 108532, 756, 394, 330, 6045, 788, 220, 16, 15, 15, 15, 15, 15, 15, 15, 345, 394, 330, 7698, 788, 220, 18, 13, 20, 345, 394, 330, 6045, 27234, 12135, 788, 830, 345, 394, 330, 7698, 27234, 12135, 788, 830, 198, 310, 335, 151645, 198, 151644, 77091, 198, 151667, 198, 99692, 3837, 107520, 85106, 54542, 20002, 103008, 104976, 99886, 108704, 3837, 105278, 106637, 17714, 5370, 68805, 1773, 101140, 3837, 104515, 104857, 101113, 20002, 103008, 108704, 33108, 101882, 9370, 44931, 1773, 20002, 89012, 111564, 15946, 3837, 108704, 20412, 2073, 17, 16, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 353, 18, 13, 20, 4, 33590, 62926, 101882, 107439, 99814, 46100, 5373, 29991, 5373, 99886, 100696, 5373, 80094, 5373, 102299, 5373, 80094, 64471, 30440, 96422, 5373, 102299, 64471, 30440, 96422, 49567, 44931, 3407, 101140, 3837, 99814, 46100, 104583, 2073, 17, 16, 114418, 15, 16, 33590, 43288, 104544, 101041, 103124, 108704, 101047, 102344, 82587, 3837, 99999, 114815, 1773, 104976, 29991, 74763, 99639, 100535, 3837, 99999, 2073, 9852, 675, 854, 68756, 17254, 2073, 17, 16, 114418, 15, 16, 854, 20412, 105045, 3407, 104326, 20412, 99886, 100696, 3837, 20002, 103008, 108704, 105656, 2073, 108532, 33590, 99999, 376, 67, 16384, 29635, 17714, 2073, 108532, 55807, 80094, 20412, 16, 15, 15, 15, 31207, 3837, 99817, 20002, 105764, 104811, 82587, 2073, 9, 16, 15, 15, 15, 31207, 33590, 85106, 105359, 17714, 82587, 31905, 1773, 60533, 20002, 87267, 99880, 80094, 23031, 82587, 100414, 105653, 3837, 99999, 99817, 101041, 61443, 16, 15, 15, 15, 15, 15, 15, 15, 104180, 3407, 102299, 20412, 18, 13, 20, 69982, 77288, 20002, 87267, 99880, 23031, 111944, 100414, 105653, 3837, 99999, 7698, 29635, 17714, 18, 13, 20, 1773, 80094, 64471, 30440, 96422, 20412, 1866, 3837, 99519, 20002, 105764, 2073, 9, 16, 15, 15, 15, 31207, 33590, 77288, 99912, 80094, 20412, 16, 15, 15, 15, 31207, 3837, 87267, 99487, 113743, 20412, 30440, 96422, 9370, 3837, 99999, 6045, 27234, 12135, 29635, 17714, 1866, 1773, 101165, 3837, 102299, 64471, 30440, 96422, 100000, 1866, 3837, 99999, 7698, 27234, 12135, 29635, 17714, 1866, 3407, 99601, 101071, 55338, 44931, 64471, 101137, 101882, 3837, 103944, 80443, 114078, 1773, 101912, 3837, 20002, 104496, 2073, 80094, 64471, 30440, 96422, 854, 33108, 2073, 102299, 64471, 30440, 96422, 33590, 105932, 44931, 100132, 117661, 25511, 3837, 99817, 88991, 43918, 17714, 1866, 1773, 81167, 55338, 44931, 102070, 5370, 64429, 15946, 3837, 80443, 115916, 109502, 66394, 3837, 101041, 66017, 104180, 8997, 151668, 271, 515, 220, 330, 9852, 2078, 788, 330, 17, 16, 114418, 15, 16, 756, 220, 330, 9852, 675, 788, 330, 17, 16, 114418, 15, 16, 756, 220, 330, 376, 67, 16384, 788, 330, 108532, 756, 220, 330, 6045, 788, 220, 16, 15, 15, 15, 15, 15, 15, 15, 345, 220, 330, 7698, 788, 220, 18, 13, 20, 345, 220, 330, 6045, 27234, 12135, 788, 830, 345, 220, 330, 7698, 27234, 12135, 788, 830, 198, 92], "total_duration": 11711022248, "load_duration": 25823781, "prompt_eval_count": 229, "prompt_eval_duration": 1717419659, "eval_count": 424, "eval_duration": 9967036200}
2025-05-16 11:02:13,126 - __main__ - INFO - Validating Ollama response: {"model": "qwen3:0.6b", "created_at": "2025-05-16T03:02:13.119509Z", "response": "<think>\n好的，我现在需要处理用户提供的债券交易文本，将其解析为JSON格式。首先，我要仔细阅读用户提供的文本和要求的字段。用户给的例子中，文本是“21国债01 买入 *1000万 *3.5%”，并要求提取资产代码、名称、交易方向、金额、利率、金额是否可议、利率是否可议等字段。\n\n首先，资产代码应该是“21国债01”，这看起来直接对应文本中的第一个数字，所以没问题。债券名称也是一样的，所以“assetName”填入“21国债01”是正确的。\n\n接下来是交易方向，用户提供的文本中有“买入”，所以trdSide设为“买入”。金额是1000万，这里用户用了中文数字“*1000万”，需要转换为数字类型。注意用户可能希望金额以数字形式存储，所以这里直接写10000000即可。\n\n利率是3.5%，但用户可能希望以数值形式存储，所以rate设为3.5。金额是否可议是true，因为用户用了“*1000万”，但实际金额是1000万，可能这个标记是可议的，所以amountReqFlag设为true。同样，利率是否可议也是true，所以rateReqFlag设为true。\n\n现在检查所有字段是否符合要求，确保没有遗漏。比如，用户提到“金额是否可议”和“利率是否可议”，这两个字段都是布尔值，这里正确设置为true。确认所有字段都在JSON对象中，没有多余的文字说明，直接输出即可。\n</think>\n\n{\n  \"assetCode\": \"21国债01\",\n  \"assetName\": \"21国债01\",\n  \"trdSide\": \"买入\",\n  \"amount\": 10000000,\n  \"rate\": 3.5,\n  \"amountReqFlag\": true,\n  \"rateReqFlag\": true\n}", "done": true, "done_reason": "stop", "context": [151644, 872, 198, 14880, 44063, 87752, 104976, 99886, 108704, 106637, 17714, 5370, 68805, 3837, 91680, 31526, 5370, 64429, 3837, 100148, 102298, 92894, 87335, 66394, 28311, 310, 220, 17, 16, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 353, 18, 13, 20, 4, 83913, 310, 18137, 250, 222, 30534, 107439, 9370, 44931, 28311, 310, 481, 9329, 2078, 25, 4891, 222, 118, 100054, 46100, 198, 310, 481, 9329, 675, 25, 4891, 222, 118, 100054, 29991, 198, 310, 481, 489, 67, 16384, 25, 220, 99886, 100696, 9909, 108532, 14, 109430, 23083, 310, 481, 3311, 25, 220, 99886, 80094, 9909, 82587, 23083, 310, 481, 4379, 25, 19468, 102, 95355, 9909, 82587, 23083, 310, 481, 3311, 27234, 12135, 25, 220, 80094, 64471, 30440, 96422, 9909, 117661, 25511, 23083, 310, 481, 4379, 27234, 12135, 25, 19468, 102, 95355, 64471, 30440, 96422, 9909, 117661, 25511, 23083, 3374, 310, 80426, 66017, 68805, 28311, 310, 341, 394, 330, 9852, 2078, 788, 330, 17, 16, 114418, 15, 16, 756, 394, 330, 9852, 675, 788, 330, 17, 16, 114418, 15, 16, 756, 394, 330, 376, 67, 16384, 788, 330, 108532, 756, 394, 330, 6045, 788, 220, 16, 15, 15, 15, 15, 15, 15, 15, 345, 394, 330, 7698, 788, 220, 18, 13, 20, 345, 394, 330, 6045, 27234, 12135, 788, 830, 345, 394, 330, 7698, 27234, 12135, 788, 830, 198, 310, 335, 151645, 198, 151644, 77091, 198, 151667, 198, 99692, 3837, 107520, 85106, 54542, 20002, 103008, 104976, 99886, 108704, 3837, 105278, 106637, 17714, 5370, 68805, 1773, 101140, 3837, 104515, 104857, 101113, 20002, 103008, 108704, 33108, 101882, 9370, 44931, 1773, 20002, 89012, 111564, 15946, 3837, 108704, 20412, 2073, 17, 16, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 353, 18, 13, 20, 4, 33590, 62926, 101882, 107439, 99814, 46100, 5373, 29991, 5373, 99886, 100696, 5373, 80094, 5373, 102299, 5373, 80094, 64471, 30440, 96422, 5373, 102299, 64471, 30440, 96422, 49567, 44931, 3407, 101140, 3837, 99814, 46100, 104583, 2073, 17, 16, 114418, 15, 16, 33590, 43288, 104544, 101041, 103124, 108704, 101047, 102344, 82587, 3837, 99999, 114815, 1773, 104976, 29991, 74763, 99639, 100535, 3837, 99999, 2073, 9852, 675, 854, 68756, 17254, 2073, 17, 16, 114418, 15, 16, 854, 20412, 105045, 3407, 104326, 20412, 99886, 100696, 3837, 20002, 103008, 108704, 105656, 2073, 108532, 33590, 99999, 376, 67, 16384, 29635, 17714, 2073, 108532, 55807, 80094, 20412, 16, 15, 15, 15, 31207, 3837, 99817, 20002, 105764, 104811, 82587, 2073, 9, 16, 15, 15, 15, 31207, 33590, 85106, 105359, 17714, 82587, 31905, 1773, 60533, 20002, 87267, 99880, 80094, 23031, 82587, 100414, 105653, 3837, 99999, 99817, 101041, 61443, 16, 15, 15, 15, 15, 15, 15, 15, 104180, 3407, 102299, 20412, 18, 13, 20, 69982, 77288, 20002, 87267, 99880, 23031, 111944, 100414, 105653, 3837, 99999, 7698, 29635, 17714, 18, 13, 20, 1773, 80094, 64471, 30440, 96422, 20412, 1866, 3837, 99519, 20002, 105764, 2073, 9, 16, 15, 15, 15, 31207, 33590, 77288, 99912, 80094, 20412, 16, 15, 15, 15, 31207, 3837, 87267, 99487, 113743, 20412, 30440, 96422, 9370, 3837, 99999, 6045, 27234, 12135, 29635, 17714, 1866, 1773, 101165, 3837, 102299, 64471, 30440, 96422, 100000, 1866, 3837, 99999, 7698, 27234, 12135, 29635, 17714, 1866, 3407, 99601, 101071, 55338, 44931, 64471, 101137, 101882, 3837, 103944, 80443, 114078, 1773, 101912, 3837, 20002, 104496, 2073, 80094, 64471, 30440, 96422, 854, 33108, 2073, 102299, 64471, 30440, 96422, 33590, 105932, 44931, 100132, 117661, 25511, 3837, 99817, 88991, 43918, 17714, 1866, 1773, 81167, 55338, 44931, 102070, 5370, 64429, 15946, 3837, 80443, 115916, 109502, 66394, 3837, 101041, 66017, 104180, 8997, 151668, 271, 515, 220, 330, 9852, 2078, 788, 330, 17, 16, 114418, 15, 16, 756, 220, 330, 9852, 675, 788, 330, 17, 16, 114418, 15, 16, 756, 220, 330, 376, 67, 16384, 788, 330, 108532, 756, 220, 330, 6045, 788, 220, 16, 15, 15, 15, 15, 15, 15, 15, 345, 220, 330, 7698, 788, 220, 18, 13, 20, 345, 220, 330, 6045, 27234, 12135, 788, 830, 345, 220, 330, 7698, 27234, 12135, 788, 830, 198, 92], "total_duration": 11711022248, "load_duration": 25823781, "prompt_eval_count": 229, "prompt_eval_duration": 1717419659, "eval_count": 424, "eval_duration": 9967036200}
2025-05-16 11:02:13,127 - __main__ - INFO - Raw model response: <think>
好的，我现在需要处理用户提供的债券交易文本，将其解析为JSON格式。首先，我要仔细阅读用户提供的文本和要求的字段。用户给的例子中，文本是“21国债01 买入 *1000万 *3.5%”，并要求提取资产代码、名称、交易方向、金额、利率、金额是否可议、利率是否可议等字段。

首先，资产代码应该是“21国债01”，这看起来直接对应文本中的第一个数字，所以没问题。债券名称也是一样的，所以“assetName”填入“21国债01”是正确的。

接下来是交易方向，用户提供的文本中有“买入”，所以trdSide设为“买入”。金额是1000万，这里用户用了中文数字“*1000万”，需要转换为数字类型。注意用户可能希望金额以数字形式存储，所以这里直接写10000000即可。

利率是3.5%，但用户可能希望以数值形式存储，所以rate设为3.5。金额是否可议是true，因为用户用了“*1000万”，但实际金额是1000万，可能这个标记是可议的，所以amountReqFlag设为true。同样，利率是否可议也是true，所以rateReqFlag设为true。

现在检查所有字段是否符合要求，确保没有遗漏。比如，用户提到“金额是否可议”和“利率是否可议”，这两个字段都是布尔值，这里正确设置为true。确认所有字段都在JSON对象中，没有多余的文字说明，直接输出即可。
</think>

{
  "assetCode": "21国债01",
  "assetName": "21国债01",
  "trdSide": "买入",
  "amount": 10000000,
  "rate": 3.5,
  "amountReqFlag": true,
  "rateReqFlag": true
}
2025-05-16 11:02:13,127 - __main__ - ERROR - JSON decode error: Expecting value: line 1 column 1 (char 0)
2025-05-16 11:02:13,127 - __main__ - INFO - Extracted JSON string: {
  "assetCode": "21国债01",
  "assetName": "21国债01",
  "trdSide": "买入",
  "amount": 10000000,
  "rate": 3.5,
  "amountReqFlag": true,
  "rateReqFlag": true
}
2025-05-16 11:02:13,127 - __main__ - INFO - Successfully parsed bond data: {'assetCode': '21国债01', 'assetName': '21国债01', 'trdSide': '买入', 'amount': 10000000, 'rate': 3.5, 'amountReqFlag': True, 'rateReqFlag': True}
2025-05-16 11:02:13,129 - __main__ - INFO - Successfully validated and returned parsed data: assetCode='21国债01' assetName='21国债01' trdSide='买入' amount=10000000.0 rate=3.5 amountReqFlag=True rateReqFlag=True
2025-05-16 11:02:19,408 - __main__ - INFO - Received request to parse bond text: 21国债01 买入 *1000万 3.5% 
2025-05-16 11:02:19,424 - __main__ - INFO - Calling Ollama model with text: 21国债01 买入 *1000万 3.5% 
2025-05-16 11:02:19,433 - __main__ - INFO - Ollama service is available
2025-05-16 11:02:19,457 - __main__ - INFO - Available models: {"models": [{"name": "qwen3:0.6b", "model": "qwen3:0.6b", "modified_at": "2025-05-08T01:27:52.753829715+08:00", "size": 522653526, "digest": "3bae9c93586b27bedaa979979733c2b0edd1d0defc745e9638f2161192a0ccf0", "details": {"parent_model": "", "format": "gguf", "family": "qwen3", "families": ["qwen3"], "parameter_size": "751.63M", "quantization_level": "Q4_K_M"}}]}
2025-05-16 11:02:19,470 - __main__ - INFO - Sending request to Ollama: {"model": "qwen3:0.6b", "prompt": "请将以下债券交易文本解析为JSON格式，只返回JSON对象，不要包含其他文字说明：\n            21国债01 买入 *1000万 3.5% \n            \n            需要提取的字段：\n            - assetCode: 债券代码\n            - assetName: 债券名称\n            - trdSide: 交易方向（买入/卖出）\n            - amount: 交易金额（数字）\n            - rate: 利率（数字）\n            - amountReqFlag: 金额是否可议（布尔值）\n            - rateReqFlag: 利率是否可议（布尔值）\n            \n            示例输出格式：\n            {\n                \"assetCode\": \"21国债01\",\n                \"assetName\": \"21国债01\",\n                \"trdSide\": \"买入\",\n                \"amount\": 10000000,\n                \"rate\": 3.5,\n                \"amountReqFlag\": true,\n                \"rateReqFlag\": true\n            }", "stream": false}
2025-05-16 11:02:31,758 - __main__ - INFO - Received response from Ollama: {"model": "qwen3:0.6b", "created_at": "2025-05-16T03:02:31.749522Z", "response": "<think>\n好的，我现在需要处理用户提供的债券交易文本，并将其解析为JSON格式。首先，我得仔细阅读用户提供的示例，确保理解他们的需求。用户要求提取特定字段，并且只返回JSON对象，不包含其他文字说明。所以，我需要严格按照他们的示例来构建JSON结构。\n\n首先，用户给出的文本是：“21国债01 买入 *1000万 3.5%”。我要提取的字段包括assetCode、assetName、trdSide、amount、rate、amountReqFlag、rateReqFlag。看起来这里的21国债01是资产代码和名称，买入是交易方向，金额是1000万，利率是3.5%，金额是否可议和利率是否可议需要判断。根据示例，金额和利率都是数字，所以amount和rate应该是数值类型，而amountReqFlag和rateReqFlag是布尔值。需要确认用户是否需要这些字段，但根据问题描述，用户已经明确要求提取这些字段，所以直接提取即可。\n\n接下来，检查是否有其他可能的字段需要考虑，比如是否还有其他信息被遗漏。例如，文本中还有“*1000万 3.5%”，这里的*可能代表某种符号，但用户示例中金额是整数，所以可能需要保留数值形式，而金额是否可议和利率是否可议可能已经隐含了这些条件。例如，金额是1000万，所以amountReqFlag应该是true，因为金额确实被要求，而利率是3.5%，所以rateReqFlag也是true。因此，最终的JSON对象应该包含所有这些字段，并且数值类型正确，布尔值正确设置。\n\n最后，确保JSON的格式正确，没有语法错误，并且只包含用户指定的字段。这样处理应该能满足用户的需求。\n</think>\n\n{\n    \"assetCode\": \"21国债01\",\n    \"assetName\": \"21国债01\",\n    \"trdSide\": \"买入\",\n    \"amount\": 10000000,\n    \"rate\": 3.5,\n    \"amountReqFlag\": true,\n    \"rateReqFlag\": true\n}", "done": true, "done_reason": "stop", "context": [151644, 872, 198, 14880, 44063, 87752, 104976, 99886, 108704, 106637, 17714, 5370, 68805, 3837, 91680, 31526, 5370, 64429, 3837, 100148, 102298, 92894, 87335, 66394, 28311, 310, 220, 17, 16, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 220, 18, 13, 20, 4, 83913, 310, 18137, 250, 222, 30534, 107439, 9370, 44931, 28311, 310, 481, 9329, 2078, 25, 4891, 222, 118, 100054, 46100, 198, 310, 481, 9329, 675, 25, 4891, 222, 118, 100054, 29991, 198, 310, 481, 489, 67, 16384, 25, 220, 99886, 100696, 9909, 108532, 14, 109430, 23083, 310, 481, 3311, 25, 220, 99886, 80094, 9909, 82587, 23083, 310, 481, 4379, 25, 19468, 102, 95355, 9909, 82587, 23083, 310, 481, 3311, 27234, 12135, 25, 220, 80094, 64471, 30440, 96422, 9909, 117661, 25511, 23083, 310, 481, 4379, 27234, 12135, 25, 19468, 102, 95355, 64471, 30440, 96422, 9909, 117661, 25511, 23083, 3374, 310, 80426, 66017, 68805, 28311, 310, 341, 394, 330, 9852, 2078, 788, 330, 17, 16, 114418, 15, 16, 756, 394, 330, 9852, 675, 788, 330, 17, 16, 114418, 15, 16, 756, 394, 330, 376, 67, 16384, 788, 330, 108532, 756, 394, 330, 6045, 788, 220, 16, 15, 15, 15, 15, 15, 15, 15, 345, 394, 330, 7698, 788, 220, 18, 13, 20, 345, 394, 330, 6045, 27234, 12135, 788, 830, 345, 394, 330, 7698, 27234, 12135, 788, 830, 198, 310, 335, 151645, 198, 151644, 77091, 198, 151667, 198, 99692, 3837, 107520, 85106, 54542, 20002, 103008, 104976, 99886, 108704, 90395, 105278, 106637, 17714, 5370, 68805, 1773, 101140, 3837, 35946, 49828, 104857, 101113, 20002, 103008, 19793, 26355, 3837, 103944, 101128, 104056, 100354, 1773, 20002, 101882, 107439, 105149, 44931, 90395, 100136, 91680, 31526, 5370, 64429, 3837, 16530, 102298, 92894, 87335, 66394, 1773, 99999, 3837, 35946, 85106, 110439, 104056, 19793, 26355, 36407, 104004, 5370, 100166, 3407, 101140, 3837, 20002, 107485, 9370, 108704, 20412, 36987, 17, 16, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 220, 18, 13, 20, 4, 55807, 104515, 107439, 9370, 44931, 100630, 9852, 2078, 5373, 9852, 675, 5373, 376, 67, 16384, 5373, 6045, 5373, 7698, 5373, 6045, 27234, 12135, 5373, 7698, 27234, 12135, 1773, 104544, 106370, 17, 16, 114418, 15, 16, 20412, 99814, 46100, 33108, 29991, 3837, 108532, 20412, 99886, 100696, 3837, 80094, 20412, 16, 15, 15, 15, 31207, 3837, 102299, 20412, 18, 13, 20, 69982, 80094, 64471, 30440, 96422, 33108, 102299, 64471, 30440, 96422, 85106, 104317, 1773, 100345, 19793, 26355, 3837, 80094, 33108, 102299, 100132, 82587, 3837, 99999, 6045, 33108, 7698, 104583, 111944, 31905, 3837, 68536, 6045, 27234, 12135, 33108, 7698, 27234, 12135, 20412, 117661, 25511, 1773, 85106, 81167, 20002, 64471, 85106, 100001, 44931, 3837, 77288, 100345, 86119, 53481, 3837, 20002, 99461, 100692, 101882, 107439, 100001, 44931, 3837, 99999, 101041, 107439, 104180, 3407, 104326, 3837, 101071, 107189, 92894, 87267, 9370, 44931, 85106, 101118, 3837, 101912, 64471, 100626, 92894, 27369, 99250, 114078, 1773, 77557, 3837, 108704, 15946, 100626, 2073, 9, 16, 15, 15, 15, 31207, 220, 18, 13, 20, 4, 33590, 106370, 9, 87267, 99661, 102988, 108872, 3837, 77288, 20002, 19793, 26355, 15946, 80094, 20412, 63431, 8863, 3837, 99999, 87267, 85106, 104465, 111944, 100414, 3837, 68536, 80094, 64471, 30440, 96422, 33108, 102299, 64471, 30440, 96422, 87267, 99461, 99707, 95312, 34187, 100001, 76095, 1773, 77557, 3837, 80094, 20412, 16, 15, 15, 15, 31207, 3837, 99999, 6045, 27234, 12135, 104583, 1866, 3837, 99519, 80094, 102068, 99250, 101882, 3837, 68536, 102299, 20412, 18, 13, 20, 69982, 99999, 7698, 27234, 12135, 100000, 1866, 1773, 101886, 3837, 103941, 9370, 5370, 64429, 99730, 102298, 55338, 100001, 44931, 90395, 100136, 111944, 31905, 88991, 3837, 117661, 25511, 88991, 43918, 3407, 100161, 3837, 103944, 5370, 9370, 68805, 88991, 3837, 80443, 117206, 32100, 90395, 100136, 91680, 102298, 20002, 105146, 9370, 44931, 1773, 99654, 54542, 99730, 112809, 20002, 104378, 8997, 151668, 271, 515, 262, 330, 9852, 2078, 788, 330, 17, 16, 114418, 15, 16, 756, 262, 330, 9852, 675, 788, 330, 17, 16, 114418, 15, 16, 756, 262, 330, 376, 67, 16384, 788, 330, 108532, 756, 262, 330, 6045, 788, 220, 16, 15, 15, 15, 15, 15, 15, 15, 345, 262, 330, 7698, 788, 220, 18, 13, 20, 345, 262, 330, 6045, 27234, 12135, 788, 830, 345, 262, 330, 7698, 27234, 12135, 788, 830, 198, 92], "total_duration": 12271702514, "load_duration": 22826081, "prompt_eval_count": 229, "prompt_eval_duration": 1598976675, "eval_count": 462, "eval_duration": 10649210511}
2025-05-16 11:02:31,759 - __main__ - INFO - Validating Ollama response: {"model": "qwen3:0.6b", "created_at": "2025-05-16T03:02:31.749522Z", "response": "<think>\n好的，我现在需要处理用户提供的债券交易文本，并将其解析为JSON格式。首先，我得仔细阅读用户提供的示例，确保理解他们的需求。用户要求提取特定字段，并且只返回JSON对象，不包含其他文字说明。所以，我需要严格按照他们的示例来构建JSON结构。\n\n首先，用户给出的文本是：“21国债01 买入 *1000万 3.5%”。我要提取的字段包括assetCode、assetName、trdSide、amount、rate、amountReqFlag、rateReqFlag。看起来这里的21国债01是资产代码和名称，买入是交易方向，金额是1000万，利率是3.5%，金额是否可议和利率是否可议需要判断。根据示例，金额和利率都是数字，所以amount和rate应该是数值类型，而amountReqFlag和rateReqFlag是布尔值。需要确认用户是否需要这些字段，但根据问题描述，用户已经明确要求提取这些字段，所以直接提取即可。\n\n接下来，检查是否有其他可能的字段需要考虑，比如是否还有其他信息被遗漏。例如，文本中还有“*1000万 3.5%”，这里的*可能代表某种符号，但用户示例中金额是整数，所以可能需要保留数值形式，而金额是否可议和利率是否可议可能已经隐含了这些条件。例如，金额是1000万，所以amountReqFlag应该是true，因为金额确实被要求，而利率是3.5%，所以rateReqFlag也是true。因此，最终的JSON对象应该包含所有这些字段，并且数值类型正确，布尔值正确设置。\n\n最后，确保JSON的格式正确，没有语法错误，并且只包含用户指定的字段。这样处理应该能满足用户的需求。\n</think>\n\n{\n    \"assetCode\": \"21国债01\",\n    \"assetName\": \"21国债01\",\n    \"trdSide\": \"买入\",\n    \"amount\": 10000000,\n    \"rate\": 3.5,\n    \"amountReqFlag\": true,\n    \"rateReqFlag\": true\n}", "done": true, "done_reason": "stop", "context": [151644, 872, 198, 14880, 44063, 87752, 104976, 99886, 108704, 106637, 17714, 5370, 68805, 3837, 91680, 31526, 5370, 64429, 3837, 100148, 102298, 92894, 87335, 66394, 28311, 310, 220, 17, 16, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 220, 18, 13, 20, 4, 83913, 310, 18137, 250, 222, 30534, 107439, 9370, 44931, 28311, 310, 481, 9329, 2078, 25, 4891, 222, 118, 100054, 46100, 198, 310, 481, 9329, 675, 25, 4891, 222, 118, 100054, 29991, 198, 310, 481, 489, 67, 16384, 25, 220, 99886, 100696, 9909, 108532, 14, 109430, 23083, 310, 481, 3311, 25, 220, 99886, 80094, 9909, 82587, 23083, 310, 481, 4379, 25, 19468, 102, 95355, 9909, 82587, 23083, 310, 481, 3311, 27234, 12135, 25, 220, 80094, 64471, 30440, 96422, 9909, 117661, 25511, 23083, 310, 481, 4379, 27234, 12135, 25, 19468, 102, 95355, 64471, 30440, 96422, 9909, 117661, 25511, 23083, 3374, 310, 80426, 66017, 68805, 28311, 310, 341, 394, 330, 9852, 2078, 788, 330, 17, 16, 114418, 15, 16, 756, 394, 330, 9852, 675, 788, 330, 17, 16, 114418, 15, 16, 756, 394, 330, 376, 67, 16384, 788, 330, 108532, 756, 394, 330, 6045, 788, 220, 16, 15, 15, 15, 15, 15, 15, 15, 345, 394, 330, 7698, 788, 220, 18, 13, 20, 345, 394, 330, 6045, 27234, 12135, 788, 830, 345, 394, 330, 7698, 27234, 12135, 788, 830, 198, 310, 335, 151645, 198, 151644, 77091, 198, 151667, 198, 99692, 3837, 107520, 85106, 54542, 20002, 103008, 104976, 99886, 108704, 90395, 105278, 106637, 17714, 5370, 68805, 1773, 101140, 3837, 35946, 49828, 104857, 101113, 20002, 103008, 19793, 26355, 3837, 103944, 101128, 104056, 100354, 1773, 20002, 101882, 107439, 105149, 44931, 90395, 100136, 91680, 31526, 5370, 64429, 3837, 16530, 102298, 92894, 87335, 66394, 1773, 99999, 3837, 35946, 85106, 110439, 104056, 19793, 26355, 36407, 104004, 5370, 100166, 3407, 101140, 3837, 20002, 107485, 9370, 108704, 20412, 36987, 17, 16, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 220, 18, 13, 20, 4, 55807, 104515, 107439, 9370, 44931, 100630, 9852, 2078, 5373, 9852, 675, 5373, 376, 67, 16384, 5373, 6045, 5373, 7698, 5373, 6045, 27234, 12135, 5373, 7698, 27234, 12135, 1773, 104544, 106370, 17, 16, 114418, 15, 16, 20412, 99814, 46100, 33108, 29991, 3837, 108532, 20412, 99886, 100696, 3837, 80094, 20412, 16, 15, 15, 15, 31207, 3837, 102299, 20412, 18, 13, 20, 69982, 80094, 64471, 30440, 96422, 33108, 102299, 64471, 30440, 96422, 85106, 104317, 1773, 100345, 19793, 26355, 3837, 80094, 33108, 102299, 100132, 82587, 3837, 99999, 6045, 33108, 7698, 104583, 111944, 31905, 3837, 68536, 6045, 27234, 12135, 33108, 7698, 27234, 12135, 20412, 117661, 25511, 1773, 85106, 81167, 20002, 64471, 85106, 100001, 44931, 3837, 77288, 100345, 86119, 53481, 3837, 20002, 99461, 100692, 101882, 107439, 100001, 44931, 3837, 99999, 101041, 107439, 104180, 3407, 104326, 3837, 101071, 107189, 92894, 87267, 9370, 44931, 85106, 101118, 3837, 101912, 64471, 100626, 92894, 27369, 99250, 114078, 1773, 77557, 3837, 108704, 15946, 100626, 2073, 9, 16, 15, 15, 15, 31207, 220, 18, 13, 20, 4, 33590, 106370, 9, 87267, 99661, 102988, 108872, 3837, 77288, 20002, 19793, 26355, 15946, 80094, 20412, 63431, 8863, 3837, 99999, 87267, 85106, 104465, 111944, 100414, 3837, 68536, 80094, 64471, 30440, 96422, 33108, 102299, 64471, 30440, 96422, 87267, 99461, 99707, 95312, 34187, 100001, 76095, 1773, 77557, 3837, 80094, 20412, 16, 15, 15, 15, 31207, 3837, 99999, 6045, 27234, 12135, 104583, 1866, 3837, 99519, 80094, 102068, 99250, 101882, 3837, 68536, 102299, 20412, 18, 13, 20, 69982, 99999, 7698, 27234, 12135, 100000, 1866, 1773, 101886, 3837, 103941, 9370, 5370, 64429, 99730, 102298, 55338, 100001, 44931, 90395, 100136, 111944, 31905, 88991, 3837, 117661, 25511, 88991, 43918, 3407, 100161, 3837, 103944, 5370, 9370, 68805, 88991, 3837, 80443, 117206, 32100, 90395, 100136, 91680, 102298, 20002, 105146, 9370, 44931, 1773, 99654, 54542, 99730, 112809, 20002, 104378, 8997, 151668, 271, 515, 262, 330, 9852, 2078, 788, 330, 17, 16, 114418, 15, 16, 756, 262, 330, 9852, 675, 788, 330, 17, 16, 114418, 15, 16, 756, 262, 330, 376, 67, 16384, 788, 330, 108532, 756, 262, 330, 6045, 788, 220, 16, 15, 15, 15, 15, 15, 15, 15, 345, 262, 330, 7698, 788, 220, 18, 13, 20, 345, 262, 330, 6045, 27234, 12135, 788, 830, 345, 262, 330, 7698, 27234, 12135, 788, 830, 198, 92], "total_duration": 12271702514, "load_duration": 22826081, "prompt_eval_count": 229, "prompt_eval_duration": 1598976675, "eval_count": 462, "eval_duration": 10649210511}
2025-05-16 11:02:31,759 - __main__ - INFO - Raw model response: <think>
好的，我现在需要处理用户提供的债券交易文本，并将其解析为JSON格式。首先，我得仔细阅读用户提供的示例，确保理解他们的需求。用户要求提取特定字段，并且只返回JSON对象，不包含其他文字说明。所以，我需要严格按照他们的示例来构建JSON结构。

首先，用户给出的文本是：“21国债01 买入 *1000万 3.5%”。我要提取的字段包括assetCode、assetName、trdSide、amount、rate、amountReqFlag、rateReqFlag。看起来这里的21国债01是资产代码和名称，买入是交易方向，金额是1000万，利率是3.5%，金额是否可议和利率是否可议需要判断。根据示例，金额和利率都是数字，所以amount和rate应该是数值类型，而amountReqFlag和rateReqFlag是布尔值。需要确认用户是否需要这些字段，但根据问题描述，用户已经明确要求提取这些字段，所以直接提取即可。

接下来，检查是否有其他可能的字段需要考虑，比如是否还有其他信息被遗漏。例如，文本中还有“*1000万 3.5%”，这里的*可能代表某种符号，但用户示例中金额是整数，所以可能需要保留数值形式，而金额是否可议和利率是否可议可能已经隐含了这些条件。例如，金额是1000万，所以amountReqFlag应该是true，因为金额确实被要求，而利率是3.5%，所以rateReqFlag也是true。因此，最终的JSON对象应该包含所有这些字段，并且数值类型正确，布尔值正确设置。

最后，确保JSON的格式正确，没有语法错误，并且只包含用户指定的字段。这样处理应该能满足用户的需求。
</think>

{
    "assetCode": "21国债01",
    "assetName": "21国债01",
    "trdSide": "买入",
    "amount": 10000000,
    "rate": 3.5,
    "amountReqFlag": true,
    "rateReqFlag": true
}
2025-05-16 11:02:31,759 - __main__ - ERROR - JSON decode error: Expecting value: line 1 column 1 (char 0)
2025-05-16 11:02:31,759 - __main__ - INFO - Extracted JSON string: {
    "assetCode": "21国债01",
    "assetName": "21国债01",
    "trdSide": "买入",
    "amount": 10000000,
    "rate": 3.5,
    "amountReqFlag": true,
    "rateReqFlag": true
}
2025-05-16 11:02:31,759 - __main__ - INFO - Successfully parsed bond data: {'assetCode': '21国债01', 'assetName': '21国债01', 'trdSide': '买入', 'amount': 10000000, 'rate': 3.5, 'amountReqFlag': True, 'rateReqFlag': True}
2025-05-16 11:02:31,760 - __main__ - INFO - Successfully validated and returned parsed data: assetCode='21国债01' assetName='21国债01' trdSide='买入' amount=10000000.0 rate=3.5 amountReqFlag=True rateReqFlag=True
2025-05-16 11:07:27,887 - __main__ - INFO - Starting bond text parsing service...
2025-05-16 11:07:36,369 - __main__ - INFO - Received request to parse bond text: 21国债01 买入 *1000万 3.5% 
2025-05-16 11:07:36,381 - __main__ - INFO - Calling Ollama model with text: 21国债01 买入 *1000万 3.5% 
2025-05-16 11:07:36,405 - __main__ - INFO - Ollama service is available
2025-05-16 11:07:36,417 - __main__ - INFO - Available models: {"models": [{"name": "qwen3:0.6b", "model": "qwen3:0.6b", "modified_at": "2025-05-08T01:27:52.753829715+08:00", "size": 522653526, "digest": "3bae9c93586b27bedaa979979733c2b0edd1d0defc745e9638f2161192a0ccf0", "details": {"parent_model": "", "format": "gguf", "family": "qwen3", "families": ["qwen3"], "parameter_size": "751.63M", "quantization_level": "Q4_K_M"}}]}
2025-05-16 11:07:36,431 - __main__ - INFO - Sending request to Ollama: {"model": "qwen3:0.6b", "prompt": "请将以下债券交易文本解析为JSON格式，只返回JSON对象，不要包含其他文字说明：\n            21国债01 买入 *1000万 3.5% \n            \n            需要提取的字段：\n            - assetCode: 债券代码\n            - assetName: 债券名称\n            - trdSide: 交易方向（买入/卖出）\n            - amount: 交易金额（数字）\n            - rate: 利率（数字）\n            - amountReqFlag: 金额是否可议（布尔值，如果金额前有*号表示需要请示）\n            - rateReqFlag: 利率是否可议（布尔值，如果利率前有*号表示需要请示）\n            \n            示例输出格式：\n            {\n                \"assetCode\": \"21国债01\",\n                \"assetName\": \"21国债01\",\n                \"trdSide\": \"买入\",\n                \"amount\": 10000000,\n                \"rate\": 3.5,\n                \"amountReqFlag\": true,\n                \"rateReqFlag\": true\n            }\n            \n            注意：\n            1. 如果金额前有*号（如*1000万），表示金额需要请示\n            2. 如果利率前有*号（如*3.5%），表示利率需要请示\n            3. 金额单位：万、亿需要转换为具体数字（万*10000，亿*100000000）\n            4. 利率需要去掉%号转换为数字", "stream": false}
2025-05-16 11:08:06,438 - __main__ - ERROR - Request to Ollama model timed out
2025-05-16 11:08:20,872 - __main__ - INFO - Received request to parse bond text: 21国债01 买入 *1000万 3.5% 
2025-05-16 11:08:20,885 - __main__ - INFO - Calling Ollama model with text: 21国债01 买入 *1000万 3.5% 
2025-05-16 11:08:20,894 - __main__ - INFO - Ollama service is available
2025-05-16 11:08:20,919 - __main__ - INFO - Available models: {"models": [{"name": "qwen3:0.6b", "model": "qwen3:0.6b", "modified_at": "2025-05-08T01:27:52.753829715+08:00", "size": 522653526, "digest": "3bae9c93586b27bedaa979979733c2b0edd1d0defc745e9638f2161192a0ccf0", "details": {"parent_model": "", "format": "gguf", "family": "qwen3", "families": ["qwen3"], "parameter_size": "751.63M", "quantization_level": "Q4_K_M"}}]}
2025-05-16 11:08:20,939 - __main__ - INFO - Sending request to Ollama: {"model": "qwen3:0.6b", "prompt": "请将以下债券交易文本解析为JSON格式，只返回JSON对象，不要包含其他文字说明：\n            21国债01 买入 *1000万 3.5% \n            \n            需要提取的字段：\n            - assetCode: 债券代码\n            - assetName: 债券名称\n            - trdSide: 交易方向（买入/卖出）\n            - amount: 交易金额（数字）\n            - rate: 利率（数字）\n            - amountReqFlag: 金额是否可议（布尔值，如果金额前有*号表示需要请示）\n            - rateReqFlag: 利率是否可议（布尔值，如果利率前有*号表示需要请示）\n            \n            示例输出格式：\n            {\n                \"assetCode\": \"21国债01\",\n                \"assetName\": \"21国债01\",\n                \"trdSide\": \"买入\",\n                \"amount\": 10000000,\n                \"rate\": 3.5,\n                \"amountReqFlag\": true,\n                \"rateReqFlag\": true\n            }\n            \n            注意：\n            1. 如果金额前有*号（如*1000万），表示金额需要请示\n            2. 如果利率前有*号（如*3.5%），表示利率需要请示\n            3. 金额单位：万、亿需要转换为具体数字（万*10000，亿*100000000）\n            4. 利率需要去掉%号转换为数字", "stream": false}
2025-05-16 11:08:32,456 - __main__ - INFO - Received response from Ollama: {"model": "qwen3:0.6b", "created_at": "2025-05-16T03:08:32.448754Z", "response": "<think>\n好的，我现在需要处理用户提供的债券交易文本，并将其解析为JSON格式。首先，我要仔细阅读用户的要求，确保不遗漏任何细节。\n\n用户提供的文本是：“21国债01 买入 *1000万 3.5%”。需要提取的字段有assetCode、assetName、trdSide、amount、rate、amountReqFlag、rateReqFlag。另外，金额单位要转换为万或亿，比如*1000万变成10000000，利率去掉%号转数字。\n\n首先，assetCode应该是“21国债01”，看起来没问题。assetName也是“21国债01”，不需要修改。trdSide是“买入”，正确。\n\n接下来金额部分，用户提到如果金额前有*号，比如*1000万，需要请示。这里金额是*1000万，所以amountReqFlag应该是true。金额单位需要转换为数字，万*10000，所以1000万变为10000000。同样，利率前有*号，所以rateReqFlag是true，利率转换为数字3.5。\n\n现在检查是否有其他需要注意的地方。例如，利率是否需要去掉%号，是的，转换成3.5。金额单位是否正确转换，是的。所有字段都正确提取，并且格式符合示例要求。最后，确保JSON对象不包含任何额外的文字说明，只返回JSON。\n\n确认无误后，输出结果应该是一个包含所有正确字段的JSON对象。\n</think>\n\n{\n  \"assetCode\": \"21国债01\",\n  \"assetName\": \"21国债01\",\n  \"trdSide\": \"买入\",\n  \"amount\": 10000000,\n  \"rate\": 3.5,\n  \"amountReqFlag\": true,\n  \"rateReqFlag\": true\n}", "done": true, "done_reason": "stop", "context": [151644, 872, 198, 14880, 44063, 87752, 104976, 99886, 108704, 106637, 17714, 5370, 68805, 3837, 91680, 31526, 5370, 64429, 3837, 100148, 102298, 92894, 87335, 66394, 28311, 310, 220, 17, 16, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 220, 18, 13, 20, 4, 83913, 310, 18137, 250, 222, 30534, 107439, 9370, 44931, 28311, 310, 481, 9329, 2078, 25, 4891, 222, 118, 100054, 46100, 198, 310, 481, 9329, 675, 25, 4891, 222, 118, 100054, 29991, 198, 310, 481, 489, 67, 16384, 25, 220, 99886, 100696, 9909, 108532, 14, 109430, 23083, 310, 481, 3311, 25, 220, 99886, 80094, 9909, 82587, 23083, 310, 481, 4379, 25, 19468, 102, 95355, 9909, 82587, 23083, 310, 481, 3311, 27234, 12135, 25, 220, 80094, 64471, 30440, 96422, 9909, 117661, 25511, 3837, 62244, 80094, 24562, 18830, 9, 17992, 51463, 85106, 14880, 19793, 23083, 310, 481, 4379, 27234, 12135, 25, 19468, 102, 95355, 64471, 30440, 96422, 9909, 117661, 25511, 3837, 62244, 102299, 24562, 18830, 9, 17992, 51463, 85106, 14880, 19793, 23083, 3374, 310, 80426, 66017, 68805, 28311, 310, 341, 394, 330, 9852, 2078, 788, 330, 17, 16, 114418, 15, 16, 756, 394, 330, 9852, 675, 788, 330, 17, 16, 114418, 15, 16, 756, 394, 330, 376, 67, 16384, 788, 330, 108532, 756, 394, 330, 6045, 788, 220, 16, 15, 15, 15, 15, 15, 15, 15, 345, 394, 330, 7698, 788, 220, 18, 13, 20, 345, 394, 330, 6045, 27234, 12135, 788, 830, 345, 394, 330, 7698, 27234, 12135, 788, 830, 198, 310, 456, 3374, 310, 97161, 28311, 310, 220, 16, 13, 81263, 80094, 24562, 18830, 9, 17992, 9909, 29524, 9, 16, 15, 15, 15, 31207, 48272, 51463, 80094, 85106, 14880, 19793, 198, 310, 220, 17, 13, 81263, 102299, 24562, 18830, 9, 17992, 9909, 29524, 9, 18, 13, 20, 4, 48272, 51463, 102299, 85106, 14880, 19793, 198, 310, 220, 18, 13, 220, 80094, 75317, 5122, 31207, 5373, 53356, 85106, 105359, 17714, 100398, 82587, 9909, 31207, 9, 16, 15, 15, 15, 15, 3837, 53356, 9, 16, 15, 15, 15, 15, 15, 15, 15, 15, 23083, 310, 220, 19, 13, 19468, 102, 95355, 85106, 115600, 4, 17992, 105359, 17714, 82587, 151645, 198, 151644, 77091, 198, 151667, 198, 99692, 3837, 107520, 85106, 54542, 20002, 103008, 104976, 99886, 108704, 90395, 105278, 106637, 17714, 5370, 68805, 1773, 101140, 3837, 104515, 104857, 101113, 20002, 104272, 3837, 103944, 16530, 114078, 99885, 104449, 3407, 20002, 103008, 108704, 20412, 36987, 17, 16, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 220, 18, 13, 20, 4, 55807, 85106, 107439, 9370, 44931, 18830, 9852, 2078, 5373, 9852, 675, 5373, 376, 67, 16384, 5373, 6045, 5373, 7698, 5373, 6045, 27234, 12135, 5373, 7698, 27234, 12135, 1773, 101948, 3837, 80094, 75317, 30534, 105359, 17714, 31207, 57191, 53356, 3837, 101912, 9, 16, 15, 15, 15, 31207, 104286, 16, 15, 15, 15, 15, 15, 15, 15, 3837, 102299, 115600, 4, 17992, 46670, 82587, 3407, 101140, 3837, 9852, 2078, 104583, 2073, 17, 16, 114418, 15, 16, 33590, 104544, 114815, 1773, 9852, 675, 100000, 2073, 17, 16, 114418, 15, 16, 33590, 104689, 25177, 1773, 376, 67, 16384, 20412, 2073, 108532, 33590, 88991, 3407, 104326, 80094, 99659, 3837, 20002, 104496, 62244, 80094, 24562, 18830, 9, 17992, 3837, 101912, 9, 16, 15, 15, 15, 31207, 3837, 85106, 14880, 19793, 1773, 99817, 80094, 20412, 9, 16, 15, 15, 15, 31207, 3837, 99999, 6045, 27234, 12135, 104583, 1866, 1773, 80094, 75317, 85106, 105359, 17714, 82587, 3837, 31207, 9, 16, 15, 15, 15, 15, 3837, 99999, 16, 15, 15, 15, 31207, 108356, 16, 15, 15, 15, 15, 15, 15, 15, 1773, 101165, 3837, 102299, 24562, 18830, 9, 17992, 3837, 99999, 7698, 27234, 12135, 20412, 1866, 3837, 102299, 105359, 17714, 82587, 18, 13, 20, 3407, 99601, 101071, 107189, 92894, 107916, 103958, 1773, 77557, 3837, 102299, 64471, 85106, 115600, 4, 17992, 3837, 20412, 9370, 3837, 105359, 12857, 18, 13, 20, 1773, 80094, 75317, 64471, 88991, 105359, 3837, 20412, 9370, 1773, 55338, 44931, 71268, 88991, 107439, 90395, 100136, 68805, 101137, 19793, 26355, 101882, 1773, 100161, 3837, 103944, 5370, 64429, 16530, 102298, 99885, 108593, 109502, 66394, 3837, 91680, 31526, 5370, 3407, 81167, 42192, 29056, 33447, 3837, 66017, 59151, 99730, 101909, 102298, 55338, 88991, 44931, 9370, 5370, 64429, 8997, 151668, 271, 515, 220, 330, 9852, 2078, 788, 330, 17, 16, 114418, 15, 16, 756, 220, 330, 9852, 675, 788, 330, 17, 16, 114418, 15, 16, 756, 220, 330, 376, 67, 16384, 788, 330, 108532, 756, 220, 330, 6045, 788, 220, 16, 15, 15, 15, 15, 15, 15, 15, 345, 220, 330, 7698, 788, 220, 18, 13, 20, 345, 220, 330, 6045, 27234, 12135, 788, 830, 345, 220, 330, 7698, 27234, 12135, 788, 830, 198, 92], "total_duration": 11503066529, "load_duration": 26913614, "prompt_eval_count": 355, "prompt_eval_duration": 25713396, "eval_count": 409, "eval_duration": 11449742776}
2025-05-16 11:08:32,457 - __main__ - INFO - Validating Ollama response: {"model": "qwen3:0.6b", "created_at": "2025-05-16T03:08:32.448754Z", "response": "<think>\n好的，我现在需要处理用户提供的债券交易文本，并将其解析为JSON格式。首先，我要仔细阅读用户的要求，确保不遗漏任何细节。\n\n用户提供的文本是：“21国债01 买入 *1000万 3.5%”。需要提取的字段有assetCode、assetName、trdSide、amount、rate、amountReqFlag、rateReqFlag。另外，金额单位要转换为万或亿，比如*1000万变成10000000，利率去掉%号转数字。\n\n首先，assetCode应该是“21国债01”，看起来没问题。assetName也是“21国债01”，不需要修改。trdSide是“买入”，正确。\n\n接下来金额部分，用户提到如果金额前有*号，比如*1000万，需要请示。这里金额是*1000万，所以amountReqFlag应该是true。金额单位需要转换为数字，万*10000，所以1000万变为10000000。同样，利率前有*号，所以rateReqFlag是true，利率转换为数字3.5。\n\n现在检查是否有其他需要注意的地方。例如，利率是否需要去掉%号，是的，转换成3.5。金额单位是否正确转换，是的。所有字段都正确提取，并且格式符合示例要求。最后，确保JSON对象不包含任何额外的文字说明，只返回JSON。\n\n确认无误后，输出结果应该是一个包含所有正确字段的JSON对象。\n</think>\n\n{\n  \"assetCode\": \"21国债01\",\n  \"assetName\": \"21国债01\",\n  \"trdSide\": \"买入\",\n  \"amount\": 10000000,\n  \"rate\": 3.5,\n  \"amountReqFlag\": true,\n  \"rateReqFlag\": true\n}", "done": true, "done_reason": "stop", "context": [151644, 872, 198, 14880, 44063, 87752, 104976, 99886, 108704, 106637, 17714, 5370, 68805, 3837, 91680, 31526, 5370, 64429, 3837, 100148, 102298, 92894, 87335, 66394, 28311, 310, 220, 17, 16, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 220, 18, 13, 20, 4, 83913, 310, 18137, 250, 222, 30534, 107439, 9370, 44931, 28311, 310, 481, 9329, 2078, 25, 4891, 222, 118, 100054, 46100, 198, 310, 481, 9329, 675, 25, 4891, 222, 118, 100054, 29991, 198, 310, 481, 489, 67, 16384, 25, 220, 99886, 100696, 9909, 108532, 14, 109430, 23083, 310, 481, 3311, 25, 220, 99886, 80094, 9909, 82587, 23083, 310, 481, 4379, 25, 19468, 102, 95355, 9909, 82587, 23083, 310, 481, 3311, 27234, 12135, 25, 220, 80094, 64471, 30440, 96422, 9909, 117661, 25511, 3837, 62244, 80094, 24562, 18830, 9, 17992, 51463, 85106, 14880, 19793, 23083, 310, 481, 4379, 27234, 12135, 25, 19468, 102, 95355, 64471, 30440, 96422, 9909, 117661, 25511, 3837, 62244, 102299, 24562, 18830, 9, 17992, 51463, 85106, 14880, 19793, 23083, 3374, 310, 80426, 66017, 68805, 28311, 310, 341, 394, 330, 9852, 2078, 788, 330, 17, 16, 114418, 15, 16, 756, 394, 330, 9852, 675, 788, 330, 17, 16, 114418, 15, 16, 756, 394, 330, 376, 67, 16384, 788, 330, 108532, 756, 394, 330, 6045, 788, 220, 16, 15, 15, 15, 15, 15, 15, 15, 345, 394, 330, 7698, 788, 220, 18, 13, 20, 345, 394, 330, 6045, 27234, 12135, 788, 830, 345, 394, 330, 7698, 27234, 12135, 788, 830, 198, 310, 456, 3374, 310, 97161, 28311, 310, 220, 16, 13, 81263, 80094, 24562, 18830, 9, 17992, 9909, 29524, 9, 16, 15, 15, 15, 31207, 48272, 51463, 80094, 85106, 14880, 19793, 198, 310, 220, 17, 13, 81263, 102299, 24562, 18830, 9, 17992, 9909, 29524, 9, 18, 13, 20, 4, 48272, 51463, 102299, 85106, 14880, 19793, 198, 310, 220, 18, 13, 220, 80094, 75317, 5122, 31207, 5373, 53356, 85106, 105359, 17714, 100398, 82587, 9909, 31207, 9, 16, 15, 15, 15, 15, 3837, 53356, 9, 16, 15, 15, 15, 15, 15, 15, 15, 15, 23083, 310, 220, 19, 13, 19468, 102, 95355, 85106, 115600, 4, 17992, 105359, 17714, 82587, 151645, 198, 151644, 77091, 198, 151667, 198, 99692, 3837, 107520, 85106, 54542, 20002, 103008, 104976, 99886, 108704, 90395, 105278, 106637, 17714, 5370, 68805, 1773, 101140, 3837, 104515, 104857, 101113, 20002, 104272, 3837, 103944, 16530, 114078, 99885, 104449, 3407, 20002, 103008, 108704, 20412, 36987, 17, 16, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 220, 18, 13, 20, 4, 55807, 85106, 107439, 9370, 44931, 18830, 9852, 2078, 5373, 9852, 675, 5373, 376, 67, 16384, 5373, 6045, 5373, 7698, 5373, 6045, 27234, 12135, 5373, 7698, 27234, 12135, 1773, 101948, 3837, 80094, 75317, 30534, 105359, 17714, 31207, 57191, 53356, 3837, 101912, 9, 16, 15, 15, 15, 31207, 104286, 16, 15, 15, 15, 15, 15, 15, 15, 3837, 102299, 115600, 4, 17992, 46670, 82587, 3407, 101140, 3837, 9852, 2078, 104583, 2073, 17, 16, 114418, 15, 16, 33590, 104544, 114815, 1773, 9852, 675, 100000, 2073, 17, 16, 114418, 15, 16, 33590, 104689, 25177, 1773, 376, 67, 16384, 20412, 2073, 108532, 33590, 88991, 3407, 104326, 80094, 99659, 3837, 20002, 104496, 62244, 80094, 24562, 18830, 9, 17992, 3837, 101912, 9, 16, 15, 15, 15, 31207, 3837, 85106, 14880, 19793, 1773, 99817, 80094, 20412, 9, 16, 15, 15, 15, 31207, 3837, 99999, 6045, 27234, 12135, 104583, 1866, 1773, 80094, 75317, 85106, 105359, 17714, 82587, 3837, 31207, 9, 16, 15, 15, 15, 15, 3837, 99999, 16, 15, 15, 15, 31207, 108356, 16, 15, 15, 15, 15, 15, 15, 15, 1773, 101165, 3837, 102299, 24562, 18830, 9, 17992, 3837, 99999, 7698, 27234, 12135, 20412, 1866, 3837, 102299, 105359, 17714, 82587, 18, 13, 20, 3407, 99601, 101071, 107189, 92894, 107916, 103958, 1773, 77557, 3837, 102299, 64471, 85106, 115600, 4, 17992, 3837, 20412, 9370, 3837, 105359, 12857, 18, 13, 20, 1773, 80094, 75317, 64471, 88991, 105359, 3837, 20412, 9370, 1773, 55338, 44931, 71268, 88991, 107439, 90395, 100136, 68805, 101137, 19793, 26355, 101882, 1773, 100161, 3837, 103944, 5370, 64429, 16530, 102298, 99885, 108593, 109502, 66394, 3837, 91680, 31526, 5370, 3407, 81167, 42192, 29056, 33447, 3837, 66017, 59151, 99730, 101909, 102298, 55338, 88991, 44931, 9370, 5370, 64429, 8997, 151668, 271, 515, 220, 330, 9852, 2078, 788, 330, 17, 16, 114418, 15, 16, 756, 220, 330, 9852, 675, 788, 330, 17, 16, 114418, 15, 16, 756, 220, 330, 376, 67, 16384, 788, 330, 108532, 756, 220, 330, 6045, 788, 220, 16, 15, 15, 15, 15, 15, 15, 15, 345, 220, 330, 7698, 788, 220, 18, 13, 20, 345, 220, 330, 6045, 27234, 12135, 788, 830, 345, 220, 330, 7698, 27234, 12135, 788, 830, 198, 92], "total_duration": 11503066529, "load_duration": 26913614, "prompt_eval_count": 355, "prompt_eval_duration": 25713396, "eval_count": 409, "eval_duration": 11449742776}
2025-05-16 11:08:32,458 - __main__ - INFO - Raw model response: <think>
好的，我现在需要处理用户提供的债券交易文本，并将其解析为JSON格式。首先，我要仔细阅读用户的要求，确保不遗漏任何细节。

用户提供的文本是：“21国债01 买入 *1000万 3.5%”。需要提取的字段有assetCode、assetName、trdSide、amount、rate、amountReqFlag、rateReqFlag。另外，金额单位要转换为万或亿，比如*1000万变成10000000，利率去掉%号转数字。

首先，assetCode应该是“21国债01”，看起来没问题。assetName也是“21国债01”，不需要修改。trdSide是“买入”，正确。

接下来金额部分，用户提到如果金额前有*号，比如*1000万，需要请示。这里金额是*1000万，所以amountReqFlag应该是true。金额单位需要转换为数字，万*10000，所以1000万变为10000000。同样，利率前有*号，所以rateReqFlag是true，利率转换为数字3.5。

现在检查是否有其他需要注意的地方。例如，利率是否需要去掉%号，是的，转换成3.5。金额单位是否正确转换，是的。所有字段都正确提取，并且格式符合示例要求。最后，确保JSON对象不包含任何额外的文字说明，只返回JSON。

确认无误后，输出结果应该是一个包含所有正确字段的JSON对象。
</think>

{
  "assetCode": "21国债01",
  "assetName": "21国债01",
  "trdSide": "买入",
  "amount": 10000000,
  "rate": 3.5,
  "amountReqFlag": true,
  "rateReqFlag": true
}
2025-05-16 11:08:32,458 - __main__ - ERROR - JSON decode error: Expecting value: line 1 column 1 (char 0)
2025-05-16 11:08:32,459 - __main__ - INFO - Extracted JSON string: {
  "assetCode": "21国债01",
  "assetName": "21国债01",
  "trdSide": "买入",
  "amount": 10000000,
  "rate": 3.5,
  "amountReqFlag": true,
  "rateReqFlag": true
}
2025-05-16 11:08:32,459 - __main__ - INFO - Successfully parsed bond data: {'assetCode': '21国债01', 'assetName': '21国债01', 'trdSide': '买入', 'amount': 10000000, 'rate': 3.5, 'amountReqFlag': True, 'rateReqFlag': True}
2025-05-16 11:08:32,461 - __main__ - INFO - Successfully validated and returned parsed data: assetCode='21国债01' assetName='21国债01' trdSide='买入' amount=10000000.0 rate=3.5 amountReqFlag=True rateReqFlag=True
2025-05-16 11:10:57,986 - __main__ - INFO - Starting bond text parsing service...
2025-05-16 11:11:36,910 - __main__ - INFO - Received request to parse bond text: 21国债01 买入 *1000万 3.5% 
2025-05-16 11:11:36,922 - __main__ - INFO - Calling Ollama model with text: 21国债01 买入 *1000万 3.5% 
2025-05-16 11:11:36,947 - __main__ - INFO - Ollama service is available
2025-05-16 11:11:36,957 - __main__ - INFO - Available models: {"models": [{"name": "qwen3:0.6b", "model": "qwen3:0.6b", "modified_at": "2025-05-08T01:27:52.753829715+08:00", "size": 522653526, "digest": "3bae9c93586b27bedaa979979733c2b0edd1d0defc745e9638f2161192a0ccf0", "details": {"parent_model": "", "format": "gguf", "family": "qwen3", "families": ["qwen3"], "parameter_size": "751.63M", "quantization_level": "Q4_K_M"}}]}
2025-05-16 11:11:36,971 - __main__ - INFO - Sending request to Ollama: {"model": "qwen3:0.6b", "prompt": "请将以下债券交易文本解析为JSON格式，只返回JSON对象，不要包含其他文字说明：\n            21国债01 买入 *1000万 3.5% \n            \n            需要提取的字段：\n            - assetCode: 债券代码\n            - assetName: 债券名称\n            - trdSide: 交易方向（买入/卖出）\n            - amount: 交易金额（数字）\n            - rate: 利率（数字）\n            - amountReqFlag: 金额是否需请示（布尔值，当金额前有*号时为true）\n            - rateReqFlag: 利率是否需请示（布尔值，当利率前有*号时为true）\n            \n            示例输出格式：\n            {\n                \"assetCode\": \"21国债01\",\n                \"assetName\": \"21国债01\",\n                \"trdSide\": \"买入\",\n                \"amount\": 10000000,\n                \"rate\": 3.5,\n                \"amountReqFlag\": true,\n                \"rateReqFlag\": true\n            }", "stream": false}
2025-05-16 11:11:46,209 - __main__ - INFO - Received response from Ollama: {"model": "qwen3:0.6b", "created_at": "2025-05-16T03:11:46.201902Z", "response": "<think>\n好的，我需要处理用户提供的债券交易文本，并将其解析为JSON格式。首先，用户给了一个文本：“21国债01 买入 *1000万 3.5%”，然后要求提取五个字段：assetCode、assetName、trdSide、amount、rate、amountReqFlag、rateReqFlag。\n\n首先，我需要确定这些字段的值。assetCode应该是债券代码，这里直接看到是“21国债01”。资产名称可能也是同样的，所以assetName也填上。交易方向是“买入”，所以trdSide设为“买入”。\n\n接下来是金额。文本中有“*1000万”，这里金额是1000万，所以amount是10000000。注意用户要求amount是数字，这里直接转换为整数即可。利率是3.5%，所以rate是3.5。然后检查金额是否需请示，因为前有*，所以amountReqFlag是true。同样，利率前有%，所以rateReqFlag也是true。\n\n现在需要确保所有字段都正确无误，并且没有多余的文字说明。用户要求只返回JSON对象，不要其他文字，所以最后再检查一遍，确保格式正确，没有遗漏任何字段。\n</think>\n\n{\n  \"assetCode\": \"21国债01\",\n  \"assetName\": \"21国债01\",\n  \"trdSide\": \"买入\",\n  \"amount\": 10000000,\n  \"rate\": 3.5,\n  \"amountReqFlag\": true,\n  \"rateReqFlag\": true\n}", "done": true, "done_reason": "stop", "context": [151644, 872, 198, 14880, 44063, 87752, 104976, 99886, 108704, 106637, 17714, 5370, 68805, 3837, 91680, 31526, 5370, 64429, 3837, 100148, 102298, 92894, 87335, 66394, 28311, 310, 220, 17, 16, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 220, 18, 13, 20, 4, 83913, 310, 18137, 250, 222, 30534, 107439, 9370, 44931, 28311, 310, 481, 9329, 2078, 25, 4891, 222, 118, 100054, 46100, 198, 310, 481, 9329, 675, 25, 4891, 222, 118, 100054, 29991, 198, 310, 481, 489, 67, 16384, 25, 220, 99886, 100696, 9909, 108532, 14, 109430, 23083, 310, 481, 3311, 25, 220, 99886, 80094, 9909, 82587, 23083, 310, 481, 4379, 25, 19468, 102, 95355, 9909, 82587, 23083, 310, 481, 3311, 27234, 12135, 25, 220, 80094, 64471, 58362, 14880, 19793, 9909, 117661, 25511, 3837, 39165, 80094, 24562, 18830, 9, 17992, 13343, 17714, 1866, 23083, 310, 481, 4379, 27234, 12135, 25, 19468, 102, 95355, 64471, 58362, 14880, 19793, 9909, 117661, 25511, 3837, 39165, 102299, 24562, 18830, 9, 17992, 13343, 17714, 1866, 23083, 3374, 310, 80426, 66017, 68805, 28311, 310, 341, 394, 330, 9852, 2078, 788, 330, 17, 16, 114418, 15, 16, 756, 394, 330, 9852, 675, 788, 330, 17, 16, 114418, 15, 16, 756, 394, 330, 376, 67, 16384, 788, 330, 108532, 756, 394, 330, 6045, 788, 220, 16, 15, 15, 15, 15, 15, 15, 15, 345, 394, 330, 7698, 788, 220, 18, 13, 20, 345, 394, 330, 6045, 27234, 12135, 788, 830, 345, 394, 330, 7698, 27234, 12135, 788, 830, 198, 310, 335, 151645, 198, 151644, 77091, 198, 151667, 198, 99692, 3837, 35946, 85106, 54542, 20002, 103008, 104976, 99886, 108704, 90395, 105278, 106637, 17714, 5370, 68805, 1773, 101140, 3837, 20002, 102558, 46944, 108704, 36987, 17, 16, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 220, 18, 13, 20, 4, 33590, 101889, 101882, 107439, 105220, 44931, 5122, 9852, 2078, 5373, 9852, 675, 5373, 376, 67, 16384, 5373, 6045, 5373, 7698, 5373, 6045, 27234, 12135, 5373, 7698, 27234, 12135, 3407, 101140, 3837, 35946, 85106, 60610, 100001, 44931, 9370, 25511, 1773, 9852, 2078, 104583, 104976, 46100, 3837, 99817, 101041, 101038, 20412, 2073, 17, 16, 114418, 15, 16, 55807, 99814, 29991, 87267, 100000, 107948, 3837, 99999, 9852, 675, 74763, 68756, 17447, 1773, 99886, 100696, 20412, 2073, 108532, 33590, 99999, 376, 67, 16384, 29635, 17714, 2073, 108532, 96332, 104326, 20412, 80094, 1773, 108704, 105656, 2073, 9, 16, 15, 15, 15, 31207, 33590, 99817, 80094, 20412, 16, 15, 15, 15, 31207, 3837, 99999, 6045, 20412, 16, 15, 15, 15, 15, 15, 15, 15, 1773, 60533, 20002, 101882, 6045, 20412, 82587, 3837, 99817, 101041, 105359, 17714, 63431, 8863, 104180, 1773, 102299, 20412, 18, 13, 20, 69982, 99999, 7698, 20412, 18, 13, 20, 1773, 101889, 101071, 80094, 64471, 58362, 14880, 19793, 3837, 99519, 24562, 18830, 9, 3837, 99999, 6045, 27234, 12135, 20412, 1866, 1773, 101165, 3837, 102299, 24562, 18830, 69982, 99999, 7698, 27234, 12135, 100000, 1866, 3407, 99601, 85106, 103944, 55338, 44931, 71268, 88991, 42192, 29056, 90395, 100136, 80443, 115916, 109502, 66394, 1773, 20002, 101882, 91680, 31526, 5370, 64429, 3837, 100148, 92894, 87335, 3837, 99999, 100161, 87256, 101071, 107060, 3837, 103944, 68805, 88991, 3837, 80443, 114078, 99885, 44931, 8997, 151668, 271, 515, 220, 330, 9852, 2078, 788, 330, 17, 16, 114418, 15, 16, 756, 220, 330, 9852, 675, 788, 330, 17, 16, 114418, 15, 16, 756, 220, 330, 376, 67, 16384, 788, 330, 108532, 756, 220, 330, 6045, 788, 220, 16, 15, 15, 15, 15, 15, 15, 15, 345, 220, 330, 7698, 788, 220, 18, 13, 20, 345, 220, 330, 6045, 27234, 12135, 788, 830, 345, 220, 330, 7698, 27234, 12135, 788, 830, 198, 92], "total_duration": 9223505288, "load_duration": 29869743, "prompt_eval_count": 251, "prompt_eval_duration": 1159001938, "eval_count": 343, "eval_duration": 8033851288}
2025-05-16 11:11:46,209 - __main__ - INFO - Validating Ollama response: {"model": "qwen3:0.6b", "created_at": "2025-05-16T03:11:46.201902Z", "response": "<think>\n好的，我需要处理用户提供的债券交易文本，并将其解析为JSON格式。首先，用户给了一个文本：“21国债01 买入 *1000万 3.5%”，然后要求提取五个字段：assetCode、assetName、trdSide、amount、rate、amountReqFlag、rateReqFlag。\n\n首先，我需要确定这些字段的值。assetCode应该是债券代码，这里直接看到是“21国债01”。资产名称可能也是同样的，所以assetName也填上。交易方向是“买入”，所以trdSide设为“买入”。\n\n接下来是金额。文本中有“*1000万”，这里金额是1000万，所以amount是10000000。注意用户要求amount是数字，这里直接转换为整数即可。利率是3.5%，所以rate是3.5。然后检查金额是否需请示，因为前有*，所以amountReqFlag是true。同样，利率前有%，所以rateReqFlag也是true。\n\n现在需要确保所有字段都正确无误，并且没有多余的文字说明。用户要求只返回JSON对象，不要其他文字，所以最后再检查一遍，确保格式正确，没有遗漏任何字段。\n</think>\n\n{\n  \"assetCode\": \"21国债01\",\n  \"assetName\": \"21国债01\",\n  \"trdSide\": \"买入\",\n  \"amount\": 10000000,\n  \"rate\": 3.5,\n  \"amountReqFlag\": true,\n  \"rateReqFlag\": true\n}", "done": true, "done_reason": "stop", "context": [151644, 872, 198, 14880, 44063, 87752, 104976, 99886, 108704, 106637, 17714, 5370, 68805, 3837, 91680, 31526, 5370, 64429, 3837, 100148, 102298, 92894, 87335, 66394, 28311, 310, 220, 17, 16, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 220, 18, 13, 20, 4, 83913, 310, 18137, 250, 222, 30534, 107439, 9370, 44931, 28311, 310, 481, 9329, 2078, 25, 4891, 222, 118, 100054, 46100, 198, 310, 481, 9329, 675, 25, 4891, 222, 118, 100054, 29991, 198, 310, 481, 489, 67, 16384, 25, 220, 99886, 100696, 9909, 108532, 14, 109430, 23083, 310, 481, 3311, 25, 220, 99886, 80094, 9909, 82587, 23083, 310, 481, 4379, 25, 19468, 102, 95355, 9909, 82587, 23083, 310, 481, 3311, 27234, 12135, 25, 220, 80094, 64471, 58362, 14880, 19793, 9909, 117661, 25511, 3837, 39165, 80094, 24562, 18830, 9, 17992, 13343, 17714, 1866, 23083, 310, 481, 4379, 27234, 12135, 25, 19468, 102, 95355, 64471, 58362, 14880, 19793, 9909, 117661, 25511, 3837, 39165, 102299, 24562, 18830, 9, 17992, 13343, 17714, 1866, 23083, 3374, 310, 80426, 66017, 68805, 28311, 310, 341, 394, 330, 9852, 2078, 788, 330, 17, 16, 114418, 15, 16, 756, 394, 330, 9852, 675, 788, 330, 17, 16, 114418, 15, 16, 756, 394, 330, 376, 67, 16384, 788, 330, 108532, 756, 394, 330, 6045, 788, 220, 16, 15, 15, 15, 15, 15, 15, 15, 345, 394, 330, 7698, 788, 220, 18, 13, 20, 345, 394, 330, 6045, 27234, 12135, 788, 830, 345, 394, 330, 7698, 27234, 12135, 788, 830, 198, 310, 335, 151645, 198, 151644, 77091, 198, 151667, 198, 99692, 3837, 35946, 85106, 54542, 20002, 103008, 104976, 99886, 108704, 90395, 105278, 106637, 17714, 5370, 68805, 1773, 101140, 3837, 20002, 102558, 46944, 108704, 36987, 17, 16, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 220, 18, 13, 20, 4, 33590, 101889, 101882, 107439, 105220, 44931, 5122, 9852, 2078, 5373, 9852, 675, 5373, 376, 67, 16384, 5373, 6045, 5373, 7698, 5373, 6045, 27234, 12135, 5373, 7698, 27234, 12135, 3407, 101140, 3837, 35946, 85106, 60610, 100001, 44931, 9370, 25511, 1773, 9852, 2078, 104583, 104976, 46100, 3837, 99817, 101041, 101038, 20412, 2073, 17, 16, 114418, 15, 16, 55807, 99814, 29991, 87267, 100000, 107948, 3837, 99999, 9852, 675, 74763, 68756, 17447, 1773, 99886, 100696, 20412, 2073, 108532, 33590, 99999, 376, 67, 16384, 29635, 17714, 2073, 108532, 96332, 104326, 20412, 80094, 1773, 108704, 105656, 2073, 9, 16, 15, 15, 15, 31207, 33590, 99817, 80094, 20412, 16, 15, 15, 15, 31207, 3837, 99999, 6045, 20412, 16, 15, 15, 15, 15, 15, 15, 15, 1773, 60533, 20002, 101882, 6045, 20412, 82587, 3837, 99817, 101041, 105359, 17714, 63431, 8863, 104180, 1773, 102299, 20412, 18, 13, 20, 69982, 99999, 7698, 20412, 18, 13, 20, 1773, 101889, 101071, 80094, 64471, 58362, 14880, 19793, 3837, 99519, 24562, 18830, 9, 3837, 99999, 6045, 27234, 12135, 20412, 1866, 1773, 101165, 3837, 102299, 24562, 18830, 69982, 99999, 7698, 27234, 12135, 100000, 1866, 3407, 99601, 85106, 103944, 55338, 44931, 71268, 88991, 42192, 29056, 90395, 100136, 80443, 115916, 109502, 66394, 1773, 20002, 101882, 91680, 31526, 5370, 64429, 3837, 100148, 92894, 87335, 3837, 99999, 100161, 87256, 101071, 107060, 3837, 103944, 68805, 88991, 3837, 80443, 114078, 99885, 44931, 8997, 151668, 271, 515, 220, 330, 9852, 2078, 788, 330, 17, 16, 114418, 15, 16, 756, 220, 330, 9852, 675, 788, 330, 17, 16, 114418, 15, 16, 756, 220, 330, 376, 67, 16384, 788, 330, 108532, 756, 220, 330, 6045, 788, 220, 16, 15, 15, 15, 15, 15, 15, 15, 345, 220, 330, 7698, 788, 220, 18, 13, 20, 345, 220, 330, 6045, 27234, 12135, 788, 830, 345, 220, 330, 7698, 27234, 12135, 788, 830, 198, 92], "total_duration": 9223505288, "load_duration": 29869743, "prompt_eval_count": 251, "prompt_eval_duration": 1159001938, "eval_count": 343, "eval_duration": 8033851288}
2025-05-16 11:11:46,209 - __main__ - INFO - Raw model response: <think>
好的，我需要处理用户提供的债券交易文本，并将其解析为JSON格式。首先，用户给了一个文本：“21国债01 买入 *1000万 3.5%”，然后要求提取五个字段：assetCode、assetName、trdSide、amount、rate、amountReqFlag、rateReqFlag。

首先，我需要确定这些字段的值。assetCode应该是债券代码，这里直接看到是“21国债01”。资产名称可能也是同样的，所以assetName也填上。交易方向是“买入”，所以trdSide设为“买入”。

接下来是金额。文本中有“*1000万”，这里金额是1000万，所以amount是10000000。注意用户要求amount是数字，这里直接转换为整数即可。利率是3.5%，所以rate是3.5。然后检查金额是否需请示，因为前有*，所以amountReqFlag是true。同样，利率前有%，所以rateReqFlag也是true。

现在需要确保所有字段都正确无误，并且没有多余的文字说明。用户要求只返回JSON对象，不要其他文字，所以最后再检查一遍，确保格式正确，没有遗漏任何字段。
</think>

{
  "assetCode": "21国债01",
  "assetName": "21国债01",
  "trdSide": "买入",
  "amount": 10000000,
  "rate": 3.5,
  "amountReqFlag": true,
  "rateReqFlag": true
}
2025-05-16 11:11:46,209 - __main__ - ERROR - JSON decode error: Expecting value: line 1 column 1 (char 0)
2025-05-16 11:11:46,210 - __main__ - INFO - Extracted JSON string: {
  "assetCode": "21国债01",
  "assetName": "21国债01",
  "trdSide": "买入",
  "amount": 10000000,
  "rate": 3.5,
  "amountReqFlag": true,
  "rateReqFlag": true
}
2025-05-16 11:11:46,210 - __main__ - INFO - Successfully parsed bond data: {'assetCode': '21国债01', 'assetName': '21国债01', 'trdSide': '买入', 'amount': 10000000, 'rate': 3.5, 'amountReqFlag': True, 'rateReqFlag': True}
2025-05-16 11:11:46,211 - __main__ - INFO - Successfully validated and returned parsed data: assetCode='21国债01' assetName='21国债01' trdSide='买入' amount=10000000.0 rate=3.5 amountReqFlag=True rateReqFlag=True
2025-05-20 23:22:05,072 - __main__ - INFO - Starting bond text parsing service...
2025-05-20 23:31:42,801 - __main__ - ERROR - Error in stream_ollama_response: HTTPConnectionPool(host='localhost', port=11434): Max retries exceeded with url: /api/generate (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x10f449d30>: Failed to establish a new connection: [Errno 61] Connection refused'))
2025-05-20 23:33:48,261 - __main__ - ERROR - Error in stream_ollama_response: HTTPConnectionPool(host='localhost', port=11434): Max retries exceeded with url: /api/generate (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x10f443fa0>: Failed to establish a new connection: [Errno 61] Connection refused'))
2025-05-20 23:39:00,461 - __main__ - INFO - Starting bond text parsing service...
2025-05-21 14:45:20,220 - __main__ - INFO - Starting bond text parsing service...
2025-06-09 21:15:04,926 - __main__ - INFO - Starting bond text parsing service...
2025-06-09 21:15:13,195 - __main__ - INFO - Received request to parse bond text: 21国债01 买入 *1000万 3.5% 
2025-06-09 21:15:13,196 - __main__ - INFO - Calling Ollama model with text: 21国债01 买入 *1000万 3.5% 
2025-06-09 21:15:13,265 - __main__ - INFO - Ollama service is available
2025-06-09 21:15:13,273 - __main__ - INFO - Available models: {"models": [{"name": "qwen3:0.6b", "model": "qwen3:0.6b", "modified_at": "2025-05-08T01:27:52.753829715+08:00", "size": 522653526, "digest": "3bae9c93586b27bedaa979979733c2b0edd1d0defc745e9638f2161192a0ccf0", "details": {"parent_model": "", "format": "gguf", "family": "qwen3", "families": ["qwen3"], "parameter_size": "751.63M", "quantization_level": "Q4_K_M"}}]}
2025-06-09 21:15:13,274 - __main__ - INFO - Sending request to Ollama: {"model": "qwen3:0.6b", "prompt": "请将以下债券交易文本解析为JSON格式，只返回JSON对象，不要包含其他文字说明：\n            21国债01 买入 *1000万 3.5% \n            \n            需要提取的字段：\n            - assetCode: 债券代码\n            - assetName: 债券名称\n            - trdSide: 交易方向（买入/卖出）\n            - amount: 交易金额（数字）\n            - rate: 利率（数字）\n            - amountReqFlag: 金额是否需请示（布尔值，当金额前有*号时为true）\n            - rateReqFlag: 利率是否需请示（布尔值，当利率前有*号时为true）\n            \n            示例输出格式：\n            {\n                \"assetCode\": \"21国债01\",\n                \"assetName\": \"21国债01\",\n                \"trdSide\": \"买入\",\n                \"amount\": 10000000,\n                \"rate\": 3.5,\n                \"amountReqFlag\": true,\n                \"rateReqFlag\": true\n            }", "stream": false}
2025-06-09 21:15:43,284 - __main__ - ERROR - Request to Ollama model timed out
2025-06-09 21:17:33,366 - __main__ - INFO - Received request to parse bond text: 21国债01 买入 *1000万 3.5% 
2025-06-09 21:17:33,378 - __main__ - INFO - Calling Ollama model with text: 21国债01 买入 *1000万 3.5% 
2025-06-09 21:17:33,393 - __main__ - INFO - Ollama service is available
2025-06-09 21:17:33,414 - __main__ - INFO - Available models: {"models": [{"name": "qwen3:0.6b", "model": "qwen3:0.6b", "modified_at": "2025-05-08T01:27:52.753829715+08:00", "size": 522653526, "digest": "3bae9c93586b27bedaa979979733c2b0edd1d0defc745e9638f2161192a0ccf0", "details": {"parent_model": "", "format": "gguf", "family": "qwen3", "families": ["qwen3"], "parameter_size": "751.63M", "quantization_level": "Q4_K_M"}}]}
2025-06-09 21:17:33,426 - __main__ - INFO - Sending request to Ollama: {"model": "qwen3:0.6b", "prompt": "请将以下债券交易文本解析为JSON格式，只返回JSON对象，不要包含其他文字说明：\n            21国债01 买入 *1000万 3.5% \n            \n            需要提取的字段：\n            - assetCode: 债券代码\n            - assetName: 债券名称\n            - trdSide: 交易方向（买入/卖出）\n            - amount: 交易金额（数字）\n            - rate: 利率（数字）\n            - amountReqFlag: 金额是否需请示（布尔值，当金额前有*号时为true）\n            - rateReqFlag: 利率是否需请示（布尔值，当利率前有*号时为true）\n            \n            示例输出格式：\n            {\n                \"assetCode\": \"21国债01\",\n                \"assetName\": \"21国债01\",\n                \"trdSide\": \"买入\",\n                \"amount\": 10000000,\n                \"rate\": 3.5,\n                \"amountReqFlag\": true,\n                \"rateReqFlag\": true\n            }", "stream": false}
2025-06-09 21:17:50,311 - __main__ - INFO - Received response from Ollama: {"model": "qwen3:0.6b", "created_at": "2025-06-09T13:17:45.759195Z", "response": "<think>\n好的，我现在需要处理用户提供的债券交易文本，并将其解析为JSON格式。首先，我要仔细阅读用户提供的文本和要求的字段。用户给出的文本是：“21国债01 买入 *1000万 3.5%”。我需要检查每个字段是否符合要求。\n\n首先，assetCode应该是债券代码，这里直接是“21国债01”，所以没问题。assetName就是名称，同样也是“21国债01”。接下来是trdSide，用户明确说是买入，所以填“买入”。\n\namount是交易金额，用户用了“1000万”，这里需要注意单位是万元，但用户示例中的amount是数字，所以可能直接保留数字形式。不过用户示例中的amount是10000000，所以可能需要转换为整数，但用户可能希望保持数字形式。这里可能需要确认，但根据示例，用户可能接受数字，所以直接写10000000。\n\nrate是利率，用户写的是3.5%，所以需要转换为数字3.5。amountReqFlag是金额前有*号，所以设为true。rateReqFlag是利率前有*号，所以设为true。所有字段都符合要求，不需要额外说明。最后，将结果整理成JSON对象，确保没有其他文字说明，只返回JSON。\n</think>\n\n{\n  \"assetCode\": \"21国债01\",\n  \"assetName\": \"21国债01\",\n  \"trdSide\": \"买入\",\n  \"amount\": 10000000,\n  \"rate\": 3.5,\n  \"amountReqFlag\": true,\n  \"rateReqFlag\": true\n}", "done": true, "done_reason": "stop", "context": [151644, 872, 198, 14880, 44063, 87752, 104976, 99886, 108704, 106637, 17714, 5370, 68805, 3837, 91680, 31526, 5370, 64429, 3837, 100148, 102298, 92894, 87335, 66394, 28311, 310, 220, 17, 16, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 220, 18, 13, 20, 4, 83913, 310, 18137, 250, 222, 30534, 107439, 9370, 44931, 28311, 310, 481, 9329, 2078, 25, 4891, 222, 118, 100054, 46100, 198, 310, 481, 9329, 675, 25, 4891, 222, 118, 100054, 29991, 198, 310, 481, 489, 67, 16384, 25, 220, 99886, 100696, 9909, 108532, 14, 109430, 23083, 310, 481, 3311, 25, 220, 99886, 80094, 9909, 82587, 23083, 310, 481, 4379, 25, 19468, 102, 95355, 9909, 82587, 23083, 310, 481, 3311, 27234, 12135, 25, 220, 80094, 64471, 58362, 14880, 19793, 9909, 117661, 25511, 3837, 39165, 80094, 24562, 18830, 9, 17992, 13343, 17714, 1866, 23083, 310, 481, 4379, 27234, 12135, 25, 19468, 102, 95355, 64471, 58362, 14880, 19793, 9909, 117661, 25511, 3837, 39165, 102299, 24562, 18830, 9, 17992, 13343, 17714, 1866, 23083, 3374, 310, 80426, 66017, 68805, 28311, 310, 341, 394, 330, 9852, 2078, 788, 330, 17, 16, 114418, 15, 16, 756, 394, 330, 9852, 675, 788, 330, 17, 16, 114418, 15, 16, 756, 394, 330, 376, 67, 16384, 788, 330, 108532, 756, 394, 330, 6045, 788, 220, 16, 15, 15, 15, 15, 15, 15, 15, 345, 394, 330, 7698, 788, 220, 18, 13, 20, 345, 394, 330, 6045, 27234, 12135, 788, 830, 345, 394, 330, 7698, 27234, 12135, 788, 830, 198, 310, 335, 151645, 198, 151644, 77091, 198, 151667, 198, 99692, 3837, 107520, 85106, 54542, 20002, 103008, 104976, 99886, 108704, 90395, 105278, 106637, 17714, 5370, 68805, 1773, 101140, 3837, 104515, 104857, 101113, 20002, 103008, 108704, 33108, 101882, 9370, 44931, 1773, 20002, 107485, 9370, 108704, 20412, 36987, 17, 16, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 220, 18, 13, 20, 4, 55807, 35946, 85106, 101071, 103991, 44931, 64471, 101137, 101882, 3407, 101140, 3837, 9852, 2078, 104583, 104976, 46100, 3837, 99817, 101041, 20412, 2073, 17, 16, 114418, 15, 16, 33590, 99999, 114815, 1773, 9852, 675, 99486, 29991, 3837, 101165, 100000, 2073, 17, 16, 114418, 15, 16, 55807, 104326, 20412, 376, 67, 16384, 3837, 20002, 100692, 106012, 108532, 3837, 99999, 68756, 2073, 108532, 96332, 6045, 20412, 99886, 80094, 3837, 20002, 105764, 2073, 16, 15, 15, 15, 31207, 33590, 99817, 107916, 75317, 20412, 91455, 3837, 77288, 20002, 19793, 26355, 101047, 6045, 20412, 82587, 3837, 99999, 87267, 101041, 104465, 82587, 100414, 1773, 100632, 20002, 19793, 26355, 101047, 6045, 20412, 16, 15, 15, 15, 15, 15, 15, 15, 3837, 99999, 87267, 85106, 105359, 17714, 63431, 8863, 3837, 77288, 20002, 87267, 99880, 100662, 82587, 100414, 1773, 99817, 87267, 85106, 81167, 3837, 77288, 100345, 19793, 26355, 3837, 20002, 87267, 100669, 82587, 3837, 99999, 101041, 61443, 16, 15, 15, 15, 15, 15, 15, 15, 3407, 7698, 20412, 102299, 3837, 20002, 61443, 100146, 18, 13, 20, 69982, 99999, 85106, 105359, 17714, 82587, 18, 13, 20, 1773, 6045, 27234, 12135, 20412, 80094, 24562, 18830, 9, 17992, 3837, 99999, 29635, 17714, 1866, 1773, 7698, 27234, 12135, 20412, 102299, 24562, 18830, 9, 17992, 3837, 99999, 29635, 17714, 1866, 1773, 55338, 44931, 71268, 101137, 101882, 3837, 104689, 108593, 66394, 1773, 100161, 3837, 44063, 59151, 104387, 12857, 5370, 64429, 3837, 103944, 80443, 92894, 87335, 66394, 3837, 91680, 31526, 5370, 8997, 151668, 271, 515, 220, 330, 9852, 2078, 788, 330, 17, 16, 114418, 15, 16, 756, 220, 330, 9852, 675, 788, 330, 17, 16, 114418, 15, 16, 756, 220, 330, 376, 67, 16384, 788, 330, 108532, 756, 220, 330, 6045, 788, 220, 16, 15, 15, 15, 15, 15, 15, 15, 345, 220, 330, 7698, 788, 220, 18, 13, 20, 345, 220, 330, 6045, 27234, 12135, 788, 830, 345, 220, 330, 7698, 27234, 12135, 788, 830, 198, 92], "total_duration": 12327410481, "load_duration": 33722168, "prompt_eval_count": 251, "prompt_eval_duration": 28683870, "eval_count": 368, "eval_duration": 12264076307}
2025-06-09 21:17:50,312 - __main__ - INFO - Validating Ollama response: {"model": "qwen3:0.6b", "created_at": "2025-06-09T13:17:45.759195Z", "response": "<think>\n好的，我现在需要处理用户提供的债券交易文本，并将其解析为JSON格式。首先，我要仔细阅读用户提供的文本和要求的字段。用户给出的文本是：“21国债01 买入 *1000万 3.5%”。我需要检查每个字段是否符合要求。\n\n首先，assetCode应该是债券代码，这里直接是“21国债01”，所以没问题。assetName就是名称，同样也是“21国债01”。接下来是trdSide，用户明确说是买入，所以填“买入”。\n\namount是交易金额，用户用了“1000万”，这里需要注意单位是万元，但用户示例中的amount是数字，所以可能直接保留数字形式。不过用户示例中的amount是10000000，所以可能需要转换为整数，但用户可能希望保持数字形式。这里可能需要确认，但根据示例，用户可能接受数字，所以直接写10000000。\n\nrate是利率，用户写的是3.5%，所以需要转换为数字3.5。amountReqFlag是金额前有*号，所以设为true。rateReqFlag是利率前有*号，所以设为true。所有字段都符合要求，不需要额外说明。最后，将结果整理成JSON对象，确保没有其他文字说明，只返回JSON。\n</think>\n\n{\n  \"assetCode\": \"21国债01\",\n  \"assetName\": \"21国债01\",\n  \"trdSide\": \"买入\",\n  \"amount\": 10000000,\n  \"rate\": 3.5,\n  \"amountReqFlag\": true,\n  \"rateReqFlag\": true\n}", "done": true, "done_reason": "stop", "context": [151644, 872, 198, 14880, 44063, 87752, 104976, 99886, 108704, 106637, 17714, 5370, 68805, 3837, 91680, 31526, 5370, 64429, 3837, 100148, 102298, 92894, 87335, 66394, 28311, 310, 220, 17, 16, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 220, 18, 13, 20, 4, 83913, 310, 18137, 250, 222, 30534, 107439, 9370, 44931, 28311, 310, 481, 9329, 2078, 25, 4891, 222, 118, 100054, 46100, 198, 310, 481, 9329, 675, 25, 4891, 222, 118, 100054, 29991, 198, 310, 481, 489, 67, 16384, 25, 220, 99886, 100696, 9909, 108532, 14, 109430, 23083, 310, 481, 3311, 25, 220, 99886, 80094, 9909, 82587, 23083, 310, 481, 4379, 25, 19468, 102, 95355, 9909, 82587, 23083, 310, 481, 3311, 27234, 12135, 25, 220, 80094, 64471, 58362, 14880, 19793, 9909, 117661, 25511, 3837, 39165, 80094, 24562, 18830, 9, 17992, 13343, 17714, 1866, 23083, 310, 481, 4379, 27234, 12135, 25, 19468, 102, 95355, 64471, 58362, 14880, 19793, 9909, 117661, 25511, 3837, 39165, 102299, 24562, 18830, 9, 17992, 13343, 17714, 1866, 23083, 3374, 310, 80426, 66017, 68805, 28311, 310, 341, 394, 330, 9852, 2078, 788, 330, 17, 16, 114418, 15, 16, 756, 394, 330, 9852, 675, 788, 330, 17, 16, 114418, 15, 16, 756, 394, 330, 376, 67, 16384, 788, 330, 108532, 756, 394, 330, 6045, 788, 220, 16, 15, 15, 15, 15, 15, 15, 15, 345, 394, 330, 7698, 788, 220, 18, 13, 20, 345, 394, 330, 6045, 27234, 12135, 788, 830, 345, 394, 330, 7698, 27234, 12135, 788, 830, 198, 310, 335, 151645, 198, 151644, 77091, 198, 151667, 198, 99692, 3837, 107520, 85106, 54542, 20002, 103008, 104976, 99886, 108704, 90395, 105278, 106637, 17714, 5370, 68805, 1773, 101140, 3837, 104515, 104857, 101113, 20002, 103008, 108704, 33108, 101882, 9370, 44931, 1773, 20002, 107485, 9370, 108704, 20412, 36987, 17, 16, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 220, 18, 13, 20, 4, 55807, 35946, 85106, 101071, 103991, 44931, 64471, 101137, 101882, 3407, 101140, 3837, 9852, 2078, 104583, 104976, 46100, 3837, 99817, 101041, 20412, 2073, 17, 16, 114418, 15, 16, 33590, 99999, 114815, 1773, 9852, 675, 99486, 29991, 3837, 101165, 100000, 2073, 17, 16, 114418, 15, 16, 55807, 104326, 20412, 376, 67, 16384, 3837, 20002, 100692, 106012, 108532, 3837, 99999, 68756, 2073, 108532, 96332, 6045, 20412, 99886, 80094, 3837, 20002, 105764, 2073, 16, 15, 15, 15, 31207, 33590, 99817, 107916, 75317, 20412, 91455, 3837, 77288, 20002, 19793, 26355, 101047, 6045, 20412, 82587, 3837, 99999, 87267, 101041, 104465, 82587, 100414, 1773, 100632, 20002, 19793, 26355, 101047, 6045, 20412, 16, 15, 15, 15, 15, 15, 15, 15, 3837, 99999, 87267, 85106, 105359, 17714, 63431, 8863, 3837, 77288, 20002, 87267, 99880, 100662, 82587, 100414, 1773, 99817, 87267, 85106, 81167, 3837, 77288, 100345, 19793, 26355, 3837, 20002, 87267, 100669, 82587, 3837, 99999, 101041, 61443, 16, 15, 15, 15, 15, 15, 15, 15, 3407, 7698, 20412, 102299, 3837, 20002, 61443, 100146, 18, 13, 20, 69982, 99999, 85106, 105359, 17714, 82587, 18, 13, 20, 1773, 6045, 27234, 12135, 20412, 80094, 24562, 18830, 9, 17992, 3837, 99999, 29635, 17714, 1866, 1773, 7698, 27234, 12135, 20412, 102299, 24562, 18830, 9, 17992, 3837, 99999, 29635, 17714, 1866, 1773, 55338, 44931, 71268, 101137, 101882, 3837, 104689, 108593, 66394, 1773, 100161, 3837, 44063, 59151, 104387, 12857, 5370, 64429, 3837, 103944, 80443, 92894, 87335, 66394, 3837, 91680, 31526, 5370, 8997, 151668, 271, 515, 220, 330, 9852, 2078, 788, 330, 17, 16, 114418, 15, 16, 756, 220, 330, 9852, 675, 788, 330, 17, 16, 114418, 15, 16, 756, 220, 330, 376, 67, 16384, 788, 330, 108532, 756, 220, 330, 6045, 788, 220, 16, 15, 15, 15, 15, 15, 15, 15, 345, 220, 330, 7698, 788, 220, 18, 13, 20, 345, 220, 330, 6045, 27234, 12135, 788, 830, 345, 220, 330, 7698, 27234, 12135, 788, 830, 198, 92], "total_duration": 12327410481, "load_duration": 33722168, "prompt_eval_count": 251, "prompt_eval_duration": 28683870, "eval_count": 368, "eval_duration": 12264076307}
2025-06-09 21:17:50,313 - __main__ - INFO - Raw model response: <think>
好的，我现在需要处理用户提供的债券交易文本，并将其解析为JSON格式。首先，我要仔细阅读用户提供的文本和要求的字段。用户给出的文本是：“21国债01 买入 *1000万 3.5%”。我需要检查每个字段是否符合要求。

首先，assetCode应该是债券代码，这里直接是“21国债01”，所以没问题。assetName就是名称，同样也是“21国债01”。接下来是trdSide，用户明确说是买入，所以填“买入”。

amount是交易金额，用户用了“1000万”，这里需要注意单位是万元，但用户示例中的amount是数字，所以可能直接保留数字形式。不过用户示例中的amount是10000000，所以可能需要转换为整数，但用户可能希望保持数字形式。这里可能需要确认，但根据示例，用户可能接受数字，所以直接写10000000。

rate是利率，用户写的是3.5%，所以需要转换为数字3.5。amountReqFlag是金额前有*号，所以设为true。rateReqFlag是利率前有*号，所以设为true。所有字段都符合要求，不需要额外说明。最后，将结果整理成JSON对象，确保没有其他文字说明，只返回JSON。
</think>

{
  "assetCode": "21国债01",
  "assetName": "21国债01",
  "trdSide": "买入",
  "amount": 10000000,
  "rate": 3.5,
  "amountReqFlag": true,
  "rateReqFlag": true
}
2025-06-09 21:17:50,314 - __main__ - ERROR - JSON decode error: Expecting value: line 1 column 1 (char 0)
2025-06-09 21:17:50,316 - __main__ - INFO - Extracted JSON string: {
  "assetCode": "21国债01",
  "assetName": "21国债01",
  "trdSide": "买入",
  "amount": 10000000,
  "rate": 3.5,
  "amountReqFlag": true,
  "rateReqFlag": true
}
2025-06-09 21:17:50,316 - __main__ - INFO - Successfully parsed bond data: {'assetCode': '21国债01', 'assetName': '21国债01', 'trdSide': '买入', 'amount': 10000000, 'rate': 3.5, 'amountReqFlag': True, 'rateReqFlag': True}
2025-06-09 21:17:50,319 - __main__ - INFO - Successfully validated and returned parsed data: assetCode='21国债01' assetName='21国债01' trdSide='买入' amount=10000000.0 rate=3.5 amountReqFlag=True rateReqFlag=True
2025-06-09 21:19:33,958 - __main__ - INFO - Received request to parse bond text: 25国债01 买入 *1000万 3.5% 
2025-06-09 21:19:33,974 - __main__ - INFO - Calling Ollama model with text: 25国债01 买入 *1000万 3.5% 
2025-06-09 21:19:33,985 - __main__ - INFO - Ollama service is available
2025-06-09 21:19:34,010 - __main__ - INFO - Available models: {"models": [{"name": "qwen3:0.6b", "model": "qwen3:0.6b", "modified_at": "2025-05-08T01:27:52.753829715+08:00", "size": 522653526, "digest": "3bae9c93586b27bedaa979979733c2b0edd1d0defc745e9638f2161192a0ccf0", "details": {"parent_model": "", "format": "gguf", "family": "qwen3", "families": ["qwen3"], "parameter_size": "751.63M", "quantization_level": "Q4_K_M"}}]}
2025-06-09 21:19:34,023 - __main__ - INFO - Sending request to Ollama: {"model": "qwen3:0.6b", "prompt": "请将以下债券交易文本解析为JSON格式，只返回JSON对象，不要包含其他文字说明：\n            25国债01 买入 *1000万 3.5% \n            \n            需要提取的字段：\n            - assetCode: 债券代码\n            - assetName: 债券名称\n            - trdSide: 交易方向（买入/卖出）\n            - amount: 交易金额（数字）\n            - rate: 利率（数字）\n            - amountReqFlag: 金额是否需请示（布尔值，当金额前有*号时为true）\n            - rateReqFlag: 利率是否需请示（布尔值，当利率前有*号时为true）\n            \n            示例输出格式：\n            {\n                \"assetCode\": \"21国债01\",\n                \"assetName\": \"21国债01\",\n                \"trdSide\": \"买入\",\n                \"amount\": 10000000,\n                \"rate\": 3.5,\n                \"amountReqFlag\": true,\n                \"rateReqFlag\": true\n            }", "stream": false}
2025-06-09 21:19:45,038 - __main__ - INFO - Received response from Ollama: {"model": "qwen3:0.6b", "created_at": "2025-06-09T13:19:45.031934Z", "response": "<think>\n好的，我需要处理用户提供的债券交易文本，并将其解析成指定的JSON格式。首先，我要仔细阅读用户提供的文本和要求的字段。文本是“25国债01 买入 *1000万 3.5%”，需要提取的字段包括assetCode、assetName、trdSide、amount、rate、amountReqFlag、rateReqFlag。\n\n首先，assetCode应该就是文本中的“25国债01”，看起来没错。assetName可能也是同样的名称，所以直接提取。trdSide是“买入”，所以正确。amount是“*1000万”，这里用户要求金额是数字，所以转换成10000000。rate是3.5，也是数字。金额是否需请示是true，因为前有*号，所以amountReqFlag设为true。同样，利率是否需请示也是true，因为前有*号，所以rateReqFlag设为true。检查一下有没有遗漏的字段，比如示例中的格式是否正确，确保没有其他文字说明。确认所有字段都符合要求后，就可以构造JSON对象了。\n</think>\n\n{\n  \"assetCode\": \"21国债01\",\n  \"assetName\": \"21国债01\",\n  \"trdSide\": \"买入\",\n  \"amount\": 10000000,\n  \"rate\": 3.5,\n  \"amountReqFlag\": true,\n  \"rateReqFlag\": true\n}", "done": true, "done_reason": "stop", "context": [151644, 872, 198, 14880, 44063, 87752, 104976, 99886, 108704, 106637, 17714, 5370, 68805, 3837, 91680, 31526, 5370, 64429, 3837, 100148, 102298, 92894, 87335, 66394, 28311, 310, 220, 17, 20, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 220, 18, 13, 20, 4, 83913, 310, 18137, 250, 222, 30534, 107439, 9370, 44931, 28311, 310, 481, 9329, 2078, 25, 4891, 222, 118, 100054, 46100, 198, 310, 481, 9329, 675, 25, 4891, 222, 118, 100054, 29991, 198, 310, 481, 489, 67, 16384, 25, 220, 99886, 100696, 9909, 108532, 14, 109430, 23083, 310, 481, 3311, 25, 220, 99886, 80094, 9909, 82587, 23083, 310, 481, 4379, 25, 19468, 102, 95355, 9909, 82587, 23083, 310, 481, 3311, 27234, 12135, 25, 220, 80094, 64471, 58362, 14880, 19793, 9909, 117661, 25511, 3837, 39165, 80094, 24562, 18830, 9, 17992, 13343, 17714, 1866, 23083, 310, 481, 4379, 27234, 12135, 25, 19468, 102, 95355, 64471, 58362, 14880, 19793, 9909, 117661, 25511, 3837, 39165, 102299, 24562, 18830, 9, 17992, 13343, 17714, 1866, 23083, 3374, 310, 80426, 66017, 68805, 28311, 310, 341, 394, 330, 9852, 2078, 788, 330, 17, 16, 114418, 15, 16, 756, 394, 330, 9852, 675, 788, 330, 17, 16, 114418, 15, 16, 756, 394, 330, 376, 67, 16384, 788, 330, 108532, 756, 394, 330, 6045, 788, 220, 16, 15, 15, 15, 15, 15, 15, 15, 345, 394, 330, 7698, 788, 220, 18, 13, 20, 345, 394, 330, 6045, 27234, 12135, 788, 830, 345, 394, 330, 7698, 27234, 12135, 788, 830, 198, 310, 335, 151645, 198, 151644, 77091, 198, 151667, 198, 99692, 3837, 35946, 85106, 54542, 20002, 103008, 104976, 99886, 108704, 90395, 105278, 106637, 12857, 105146, 9370, 5370, 68805, 1773, 101140, 3837, 104515, 104857, 101113, 20002, 103008, 108704, 33108, 101882, 9370, 44931, 1773, 108704, 20412, 2073, 17, 20, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 220, 18, 13, 20, 4, 33590, 85106, 107439, 9370, 44931, 100630, 9852, 2078, 5373, 9852, 675, 5373, 376, 67, 16384, 5373, 6045, 5373, 7698, 5373, 6045, 27234, 12135, 5373, 7698, 27234, 12135, 3407, 101140, 3837, 9852, 2078, 99730, 99486, 108704, 101047, 2073, 17, 20, 114418, 15, 16, 33590, 104544, 109012, 1773, 9852, 675, 87267, 100000, 107948, 29991, 3837, 99999, 101041, 107439, 1773, 376, 67, 16384, 20412, 2073, 108532, 33590, 99999, 88991, 1773, 6045, 20412, 2073, 9, 16, 15, 15, 15, 31207, 33590, 99817, 20002, 101882, 80094, 20412, 82587, 3837, 99999, 105359, 12857, 16, 15, 15, 15, 15, 15, 15, 15, 1773, 7698, 20412, 18, 13, 20, 3837, 100000, 82587, 1773, 80094, 64471, 58362, 14880, 19793, 20412, 1866, 3837, 99519, 24562, 18830, 9, 17992, 3837, 99999, 6045, 27234, 12135, 29635, 17714, 1866, 1773, 101165, 3837, 102299, 64471, 58362, 14880, 19793, 100000, 1866, 3837, 99519, 24562, 18830, 9, 17992, 3837, 99999, 7698, 27234, 12135, 29635, 17714, 1866, 1773, 101071, 100158, 104710, 114078, 9370, 44931, 3837, 101912, 19793, 26355, 101047, 68805, 64471, 88991, 3837, 103944, 80443, 92894, 87335, 66394, 1773, 81167, 55338, 44931, 71268, 101137, 101882, 33447, 3837, 102003, 109314, 5370, 64429, 34187, 8997, 151668, 271, 515, 220, 330, 9852, 2078, 788, 330, 17, 16, 114418, 15, 16, 756, 220, 330, 9852, 675, 788, 330, 17, 16, 114418, 15, 16, 756, 220, 330, 376, 67, 16384, 788, 330, 108532, 756, 220, 330, 6045, 788, 220, 16, 15, 15, 15, 15, 15, 15, 15, 345, 220, 330, 7698, 788, 220, 18, 13, 20, 345, 220, 330, 6045, 27234, 12135, 788, 830, 345, 220, 330, 7698, 27234, 12135, 788, 830, 198, 92], "total_duration": 11003015992, "load_duration": 27915850, "prompt_eval_count": 251, "prompt_eval_duration": 2225479887, "eval_count": 318, "eval_duration": 8748775595}
2025-06-09 21:19:45,039 - __main__ - INFO - Validating Ollama response: {"model": "qwen3:0.6b", "created_at": "2025-06-09T13:19:45.031934Z", "response": "<think>\n好的，我需要处理用户提供的债券交易文本，并将其解析成指定的JSON格式。首先，我要仔细阅读用户提供的文本和要求的字段。文本是“25国债01 买入 *1000万 3.5%”，需要提取的字段包括assetCode、assetName、trdSide、amount、rate、amountReqFlag、rateReqFlag。\n\n首先，assetCode应该就是文本中的“25国债01”，看起来没错。assetName可能也是同样的名称，所以直接提取。trdSide是“买入”，所以正确。amount是“*1000万”，这里用户要求金额是数字，所以转换成10000000。rate是3.5，也是数字。金额是否需请示是true，因为前有*号，所以amountReqFlag设为true。同样，利率是否需请示也是true，因为前有*号，所以rateReqFlag设为true。检查一下有没有遗漏的字段，比如示例中的格式是否正确，确保没有其他文字说明。确认所有字段都符合要求后，就可以构造JSON对象了。\n</think>\n\n{\n  \"assetCode\": \"21国债01\",\n  \"assetName\": \"21国债01\",\n  \"trdSide\": \"买入\",\n  \"amount\": 10000000,\n  \"rate\": 3.5,\n  \"amountReqFlag\": true,\n  \"rateReqFlag\": true\n}", "done": true, "done_reason": "stop", "context": [151644, 872, 198, 14880, 44063, 87752, 104976, 99886, 108704, 106637, 17714, 5370, 68805, 3837, 91680, 31526, 5370, 64429, 3837, 100148, 102298, 92894, 87335, 66394, 28311, 310, 220, 17, 20, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 220, 18, 13, 20, 4, 83913, 310, 18137, 250, 222, 30534, 107439, 9370, 44931, 28311, 310, 481, 9329, 2078, 25, 4891, 222, 118, 100054, 46100, 198, 310, 481, 9329, 675, 25, 4891, 222, 118, 100054, 29991, 198, 310, 481, 489, 67, 16384, 25, 220, 99886, 100696, 9909, 108532, 14, 109430, 23083, 310, 481, 3311, 25, 220, 99886, 80094, 9909, 82587, 23083, 310, 481, 4379, 25, 19468, 102, 95355, 9909, 82587, 23083, 310, 481, 3311, 27234, 12135, 25, 220, 80094, 64471, 58362, 14880, 19793, 9909, 117661, 25511, 3837, 39165, 80094, 24562, 18830, 9, 17992, 13343, 17714, 1866, 23083, 310, 481, 4379, 27234, 12135, 25, 19468, 102, 95355, 64471, 58362, 14880, 19793, 9909, 117661, 25511, 3837, 39165, 102299, 24562, 18830, 9, 17992, 13343, 17714, 1866, 23083, 3374, 310, 80426, 66017, 68805, 28311, 310, 341, 394, 330, 9852, 2078, 788, 330, 17, 16, 114418, 15, 16, 756, 394, 330, 9852, 675, 788, 330, 17, 16, 114418, 15, 16, 756, 394, 330, 376, 67, 16384, 788, 330, 108532, 756, 394, 330, 6045, 788, 220, 16, 15, 15, 15, 15, 15, 15, 15, 345, 394, 330, 7698, 788, 220, 18, 13, 20, 345, 394, 330, 6045, 27234, 12135, 788, 830, 345, 394, 330, 7698, 27234, 12135, 788, 830, 198, 310, 335, 151645, 198, 151644, 77091, 198, 151667, 198, 99692, 3837, 35946, 85106, 54542, 20002, 103008, 104976, 99886, 108704, 90395, 105278, 106637, 12857, 105146, 9370, 5370, 68805, 1773, 101140, 3837, 104515, 104857, 101113, 20002, 103008, 108704, 33108, 101882, 9370, 44931, 1773, 108704, 20412, 2073, 17, 20, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 220, 18, 13, 20, 4, 33590, 85106, 107439, 9370, 44931, 100630, 9852, 2078, 5373, 9852, 675, 5373, 376, 67, 16384, 5373, 6045, 5373, 7698, 5373, 6045, 27234, 12135, 5373, 7698, 27234, 12135, 3407, 101140, 3837, 9852, 2078, 99730, 99486, 108704, 101047, 2073, 17, 20, 114418, 15, 16, 33590, 104544, 109012, 1773, 9852, 675, 87267, 100000, 107948, 29991, 3837, 99999, 101041, 107439, 1773, 376, 67, 16384, 20412, 2073, 108532, 33590, 99999, 88991, 1773, 6045, 20412, 2073, 9, 16, 15, 15, 15, 31207, 33590, 99817, 20002, 101882, 80094, 20412, 82587, 3837, 99999, 105359, 12857, 16, 15, 15, 15, 15, 15, 15, 15, 1773, 7698, 20412, 18, 13, 20, 3837, 100000, 82587, 1773, 80094, 64471, 58362, 14880, 19793, 20412, 1866, 3837, 99519, 24562, 18830, 9, 17992, 3837, 99999, 6045, 27234, 12135, 29635, 17714, 1866, 1773, 101165, 3837, 102299, 64471, 58362, 14880, 19793, 100000, 1866, 3837, 99519, 24562, 18830, 9, 17992, 3837, 99999, 7698, 27234, 12135, 29635, 17714, 1866, 1773, 101071, 100158, 104710, 114078, 9370, 44931, 3837, 101912, 19793, 26355, 101047, 68805, 64471, 88991, 3837, 103944, 80443, 92894, 87335, 66394, 1773, 81167, 55338, 44931, 71268, 101137, 101882, 33447, 3837, 102003, 109314, 5370, 64429, 34187, 8997, 151668, 271, 515, 220, 330, 9852, 2078, 788, 330, 17, 16, 114418, 15, 16, 756, 220, 330, 9852, 675, 788, 330, 17, 16, 114418, 15, 16, 756, 220, 330, 376, 67, 16384, 788, 330, 108532, 756, 220, 330, 6045, 788, 220, 16, 15, 15, 15, 15, 15, 15, 15, 345, 220, 330, 7698, 788, 220, 18, 13, 20, 345, 220, 330, 6045, 27234, 12135, 788, 830, 345, 220, 330, 7698, 27234, 12135, 788, 830, 198, 92], "total_duration": 11003015992, "load_duration": 27915850, "prompt_eval_count": 251, "prompt_eval_duration": 2225479887, "eval_count": 318, "eval_duration": 8748775595}
2025-06-09 21:19:45,039 - __main__ - INFO - Raw model response: <think>
好的，我需要处理用户提供的债券交易文本，并将其解析成指定的JSON格式。首先，我要仔细阅读用户提供的文本和要求的字段。文本是“25国债01 买入 *1000万 3.5%”，需要提取的字段包括assetCode、assetName、trdSide、amount、rate、amountReqFlag、rateReqFlag。

首先，assetCode应该就是文本中的“25国债01”，看起来没错。assetName可能也是同样的名称，所以直接提取。trdSide是“买入”，所以正确。amount是“*1000万”，这里用户要求金额是数字，所以转换成10000000。rate是3.5，也是数字。金额是否需请示是true，因为前有*号，所以amountReqFlag设为true。同样，利率是否需请示也是true，因为前有*号，所以rateReqFlag设为true。检查一下有没有遗漏的字段，比如示例中的格式是否正确，确保没有其他文字说明。确认所有字段都符合要求后，就可以构造JSON对象了。
</think>

{
  "assetCode": "21国债01",
  "assetName": "21国债01",
  "trdSide": "买入",
  "amount": 10000000,
  "rate": 3.5,
  "amountReqFlag": true,
  "rateReqFlag": true
}
2025-06-09 21:19:45,039 - __main__ - ERROR - JSON decode error: Expecting value: line 1 column 1 (char 0)
2025-06-09 21:19:45,040 - __main__ - INFO - Extracted JSON string: {
  "assetCode": "21国债01",
  "assetName": "21国债01",
  "trdSide": "买入",
  "amount": 10000000,
  "rate": 3.5,
  "amountReqFlag": true,
  "rateReqFlag": true
}
2025-06-09 21:19:45,040 - __main__ - INFO - Successfully parsed bond data: {'assetCode': '21国债01', 'assetName': '21国债01', 'trdSide': '买入', 'amount': 10000000, 'rate': 3.5, 'amountReqFlag': True, 'rateReqFlag': True}
2025-06-09 21:19:45,041 - __main__ - INFO - Successfully validated and returned parsed data: assetCode='21国债01' assetName='21国债01' trdSide='买入' amount=10000000.0 rate=3.5 amountReqFlag=True rateReqFlag=True
2025-06-09 21:20:24,003 - __main__ - INFO - Starting bond text parsing service...
2025-06-09 21:20:44,074 - __main__ - INFO - Received request to parse bond text: 25国债01 买入 *1000万 3.6% 
2025-06-09 21:20:44,082 - __main__ - INFO - Calling Ollama model with text: 25国债01 买入 *1000万 3.6% 
2025-06-09 21:20:44,119 - __main__ - INFO - Ollama service is available
2025-06-09 21:20:44,137 - __main__ - INFO - Available models: {"models": [{"name": "qwen3:0.6b", "model": "qwen3:0.6b", "modified_at": "2025-05-08T01:27:52.753829715+08:00", "size": 522653526, "digest": "3bae9c93586b27bedaa979979733c2b0edd1d0defc745e9638f2161192a0ccf0", "details": {"parent_model": "", "format": "gguf", "family": "qwen3", "families": ["qwen3"], "parameter_size": "751.63M", "quantization_level": "Q4_K_M"}}]}
2025-06-09 21:20:44,152 - __main__ - INFO - Sending request to Ollama: {"model": "qwen3:0.6b", "prompt": "请将以下债券交易文本解析为JSON格式，只返回JSON对象，不要包含其他文字说明：\n            25国债01 买入 *1000万 3.6% \n            \n            需要提取的字段：\n            - assetCode: 债券代码\n            - assetName: 债券名称\n            - trdSide: 交易方向（买入/卖出）\n            - amount: 交易金额（数字）\n            - rate: 利率（数字）\n            - amountReqFlag: 金额是否需请示（布尔值，当金额前有*号时为true）\n            - rateReqFlag: 利率是否需请示（布尔值，当利率前有*号时为true）\n            \n            示例输出格式：\n            {\n                \"assetCode\": \"21001.IB\",\n                \"assetName\": \"21国债01\",\n                \"trdSide\": \"买入\",\n                \"amount\": 10000000,\n                \"rate\": 3.5,\n                \"amountReqFlag\": true,\n                \"rateReqFlag\": true\n            }", "stream": false}
2025-06-09 21:20:57,870 - __main__ - INFO - Received response from Ollama: {"model": "qwen3:0.6b", "created_at": "2025-06-09T13:20:57.861917Z", "response": "<think>\n好的，我现在需要处理用户提供的债券交易文本，并将其解析为JSON格式。首先，我要仔细阅读用户提供的文本和要求的字段，确保不遗漏任何细节。\n\n用户提供的文本是：“25国债01 买入 *1000万 3.6%”。看起来这是一个买入债券的交易记录，债券代码是25国债01，名称是21国债01，交易方向是买入，金额是*1000万，利率是3.6%。需要提取的字段包括assetCode、assetName、trdSide、amount、rate、amountReqFlag、rateReqFlag。\n\n首先，assetCode应该是债券代码，这里用户给出的是“25国债01”，所以直接提取。assetName是名称，用户提到的是“21国债01”，所以没问题。trdSide是买入，放在最后。amount是数字，这里用户写的是*1000万，所以金额是10000000，amount字段填进去。rate是3.6，转换成数字没问题。amountReqFlag是true，因为金额前有*号，rateReqFlag也是true，因为利率前有*号。需要检查是否有其他可能的错误，比如逗号的位置或者数字的正确格式，但看起来没问题。最后，按照示例输出格式，确保字段正确对应，并且不包含其他文字说明。\n</think>\n\n{\n  \"assetCode\": \"21001.IB\",\n  \"assetName\": \"21国债01\",\n  \"trdSide\": \"买入\",\n  \"amount\": 10000000,\n  \"rate\": 3.5,\n  \"amountReqFlag\": true,\n  \"rateReqFlag\": true\n}", "done": true, "done_reason": "stop", "context": [151644, 872, 198, 14880, 44063, 87752, 104976, 99886, 108704, 106637, 17714, 5370, 68805, 3837, 91680, 31526, 5370, 64429, 3837, 100148, 102298, 92894, 87335, 66394, 28311, 310, 220, 17, 20, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 220, 18, 13, 21, 4, 83913, 310, 18137, 250, 222, 30534, 107439, 9370, 44931, 28311, 310, 481, 9329, 2078, 25, 4891, 222, 118, 100054, 46100, 198, 310, 481, 9329, 675, 25, 4891, 222, 118, 100054, 29991, 198, 310, 481, 489, 67, 16384, 25, 220, 99886, 100696, 9909, 108532, 14, 109430, 23083, 310, 481, 3311, 25, 220, 99886, 80094, 9909, 82587, 23083, 310, 481, 4379, 25, 19468, 102, 95355, 9909, 82587, 23083, 310, 481, 3311, 27234, 12135, 25, 220, 80094, 64471, 58362, 14880, 19793, 9909, 117661, 25511, 3837, 39165, 80094, 24562, 18830, 9, 17992, 13343, 17714, 1866, 23083, 310, 481, 4379, 27234, 12135, 25, 19468, 102, 95355, 64471, 58362, 14880, 19793, 9909, 117661, 25511, 3837, 39165, 102299, 24562, 18830, 9, 17992, 13343, 17714, 1866, 23083, 3374, 310, 80426, 66017, 68805, 28311, 310, 341, 394, 330, 9852, 2078, 788, 330, 17, 16, 15, 15, 16, 2447, 33, 756, 394, 330, 9852, 675, 788, 330, 17, 16, 114418, 15, 16, 756, 394, 330, 376, 67, 16384, 788, 330, 108532, 756, 394, 330, 6045, 788, 220, 16, 15, 15, 15, 15, 15, 15, 15, 345, 394, 330, 7698, 788, 220, 18, 13, 20, 345, 394, 330, 6045, 27234, 12135, 788, 830, 345, 394, 330, 7698, 27234, 12135, 788, 830, 198, 310, 335, 151645, 198, 151644, 77091, 198, 151667, 198, 99692, 3837, 107520, 85106, 54542, 20002, 103008, 104976, 99886, 108704, 90395, 105278, 106637, 17714, 5370, 68805, 1773, 101140, 3837, 104515, 104857, 101113, 20002, 103008, 108704, 33108, 101882, 9370, 44931, 3837, 103944, 16530, 114078, 99885, 104449, 3407, 20002, 103008, 108704, 20412, 36987, 17, 20, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 220, 18, 13, 21, 4, 55807, 104544, 105464, 108532, 104976, 9370, 99886, 65577, 3837, 104976, 46100, 20412, 17, 20, 114418, 15, 16, 3837, 29991, 20412, 17, 16, 114418, 15, 16, 3837, 99886, 100696, 20412, 108532, 3837, 80094, 20412, 9, 16, 15, 15, 15, 31207, 3837, 102299, 20412, 18, 13, 21, 4, 1773, 85106, 107439, 9370, 44931, 100630, 9852, 2078, 5373, 9852, 675, 5373, 376, 67, 16384, 5373, 6045, 5373, 7698, 5373, 6045, 27234, 12135, 5373, 7698, 27234, 12135, 3407, 101140, 3837, 9852, 2078, 104583, 104976, 46100, 3837, 99817, 20002, 107485, 100146, 2073, 17, 20, 114418, 15, 16, 33590, 99999, 101041, 107439, 1773, 9852, 675, 20412, 29991, 3837, 20002, 104496, 100146, 2073, 17, 16, 114418, 15, 16, 33590, 99999, 114815, 1773, 376, 67, 16384, 20412, 108532, 3837, 104132, 100161, 1773, 6045, 20412, 82587, 3837, 99817, 20002, 61443, 100146, 9, 16, 15, 15, 15, 31207, 3837, 99999, 80094, 20412, 16, 15, 15, 15, 15, 15, 15, 15, 3837, 6045, 44931, 68756, 104880, 1773, 7698, 20412, 18, 13, 21, 3837, 105359, 12857, 82587, 114815, 1773, 6045, 27234, 12135, 20412, 1866, 3837, 99519, 80094, 24562, 18830, 9, 17992, 3837, 7698, 27234, 12135, 100000, 1866, 3837, 99519, 102299, 24562, 18830, 9, 17992, 1773, 85106, 101071, 107189, 92894, 87267, 9370, 32100, 3837, 101912, 107463, 17992, 104473, 100631, 82587, 9370, 88991, 68805, 3837, 77288, 104544, 114815, 1773, 100161, 3837, 101892, 19793, 26355, 66017, 68805, 3837, 103944, 44931, 88991, 103124, 90395, 100136, 16530, 102298, 92894, 87335, 66394, 8997, 151668, 271, 515, 220, 330, 9852, 2078, 788, 330, 17, 16, 15, 15, 16, 2447, 33, 756, 220, 330, 9852, 675, 788, 330, 17, 16, 114418, 15, 16, 756, 220, 330, 376, 67, 16384, 788, 330, 108532, 756, 220, 330, 6045, 788, 220, 16, 15, 15, 15, 15, 15, 15, 15, 345, 220, 330, 7698, 788, 220, 18, 13, 20, 345, 220, 330, 6045, 27234, 12135, 788, 830, 345, 220, 330, 7698, 27234, 12135, 788, 830, 198, 92], "total_duration": 13696725858, "load_duration": 38611912, "prompt_eval_count": 253, "prompt_eval_duration": 2175226323, "eval_count": 375, "eval_duration": 11481742987}
2025-06-09 21:20:57,871 - __main__ - INFO - Validating Ollama response: {"model": "qwen3:0.6b", "created_at": "2025-06-09T13:20:57.861917Z", "response": "<think>\n好的，我现在需要处理用户提供的债券交易文本，并将其解析为JSON格式。首先，我要仔细阅读用户提供的文本和要求的字段，确保不遗漏任何细节。\n\n用户提供的文本是：“25国债01 买入 *1000万 3.6%”。看起来这是一个买入债券的交易记录，债券代码是25国债01，名称是21国债01，交易方向是买入，金额是*1000万，利率是3.6%。需要提取的字段包括assetCode、assetName、trdSide、amount、rate、amountReqFlag、rateReqFlag。\n\n首先，assetCode应该是债券代码，这里用户给出的是“25国债01”，所以直接提取。assetName是名称，用户提到的是“21国债01”，所以没问题。trdSide是买入，放在最后。amount是数字，这里用户写的是*1000万，所以金额是10000000，amount字段填进去。rate是3.6，转换成数字没问题。amountReqFlag是true，因为金额前有*号，rateReqFlag也是true，因为利率前有*号。需要检查是否有其他可能的错误，比如逗号的位置或者数字的正确格式，但看起来没问题。最后，按照示例输出格式，确保字段正确对应，并且不包含其他文字说明。\n</think>\n\n{\n  \"assetCode\": \"21001.IB\",\n  \"assetName\": \"21国债01\",\n  \"trdSide\": \"买入\",\n  \"amount\": 10000000,\n  \"rate\": 3.5,\n  \"amountReqFlag\": true,\n  \"rateReqFlag\": true\n}", "done": true, "done_reason": "stop", "context": [151644, 872, 198, 14880, 44063, 87752, 104976, 99886, 108704, 106637, 17714, 5370, 68805, 3837, 91680, 31526, 5370, 64429, 3837, 100148, 102298, 92894, 87335, 66394, 28311, 310, 220, 17, 20, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 220, 18, 13, 21, 4, 83913, 310, 18137, 250, 222, 30534, 107439, 9370, 44931, 28311, 310, 481, 9329, 2078, 25, 4891, 222, 118, 100054, 46100, 198, 310, 481, 9329, 675, 25, 4891, 222, 118, 100054, 29991, 198, 310, 481, 489, 67, 16384, 25, 220, 99886, 100696, 9909, 108532, 14, 109430, 23083, 310, 481, 3311, 25, 220, 99886, 80094, 9909, 82587, 23083, 310, 481, 4379, 25, 19468, 102, 95355, 9909, 82587, 23083, 310, 481, 3311, 27234, 12135, 25, 220, 80094, 64471, 58362, 14880, 19793, 9909, 117661, 25511, 3837, 39165, 80094, 24562, 18830, 9, 17992, 13343, 17714, 1866, 23083, 310, 481, 4379, 27234, 12135, 25, 19468, 102, 95355, 64471, 58362, 14880, 19793, 9909, 117661, 25511, 3837, 39165, 102299, 24562, 18830, 9, 17992, 13343, 17714, 1866, 23083, 3374, 310, 80426, 66017, 68805, 28311, 310, 341, 394, 330, 9852, 2078, 788, 330, 17, 16, 15, 15, 16, 2447, 33, 756, 394, 330, 9852, 675, 788, 330, 17, 16, 114418, 15, 16, 756, 394, 330, 376, 67, 16384, 788, 330, 108532, 756, 394, 330, 6045, 788, 220, 16, 15, 15, 15, 15, 15, 15, 15, 345, 394, 330, 7698, 788, 220, 18, 13, 20, 345, 394, 330, 6045, 27234, 12135, 788, 830, 345, 394, 330, 7698, 27234, 12135, 788, 830, 198, 310, 335, 151645, 198, 151644, 77091, 198, 151667, 198, 99692, 3837, 107520, 85106, 54542, 20002, 103008, 104976, 99886, 108704, 90395, 105278, 106637, 17714, 5370, 68805, 1773, 101140, 3837, 104515, 104857, 101113, 20002, 103008, 108704, 33108, 101882, 9370, 44931, 3837, 103944, 16530, 114078, 99885, 104449, 3407, 20002, 103008, 108704, 20412, 36987, 17, 20, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 220, 18, 13, 21, 4, 55807, 104544, 105464, 108532, 104976, 9370, 99886, 65577, 3837, 104976, 46100, 20412, 17, 20, 114418, 15, 16, 3837, 29991, 20412, 17, 16, 114418, 15, 16, 3837, 99886, 100696, 20412, 108532, 3837, 80094, 20412, 9, 16, 15, 15, 15, 31207, 3837, 102299, 20412, 18, 13, 21, 4, 1773, 85106, 107439, 9370, 44931, 100630, 9852, 2078, 5373, 9852, 675, 5373, 376, 67, 16384, 5373, 6045, 5373, 7698, 5373, 6045, 27234, 12135, 5373, 7698, 27234, 12135, 3407, 101140, 3837, 9852, 2078, 104583, 104976, 46100, 3837, 99817, 20002, 107485, 100146, 2073, 17, 20, 114418, 15, 16, 33590, 99999, 101041, 107439, 1773, 9852, 675, 20412, 29991, 3837, 20002, 104496, 100146, 2073, 17, 16, 114418, 15, 16, 33590, 99999, 114815, 1773, 376, 67, 16384, 20412, 108532, 3837, 104132, 100161, 1773, 6045, 20412, 82587, 3837, 99817, 20002, 61443, 100146, 9, 16, 15, 15, 15, 31207, 3837, 99999, 80094, 20412, 16, 15, 15, 15, 15, 15, 15, 15, 3837, 6045, 44931, 68756, 104880, 1773, 7698, 20412, 18, 13, 21, 3837, 105359, 12857, 82587, 114815, 1773, 6045, 27234, 12135, 20412, 1866, 3837, 99519, 80094, 24562, 18830, 9, 17992, 3837, 7698, 27234, 12135, 100000, 1866, 3837, 99519, 102299, 24562, 18830, 9, 17992, 1773, 85106, 101071, 107189, 92894, 87267, 9370, 32100, 3837, 101912, 107463, 17992, 104473, 100631, 82587, 9370, 88991, 68805, 3837, 77288, 104544, 114815, 1773, 100161, 3837, 101892, 19793, 26355, 66017, 68805, 3837, 103944, 44931, 88991, 103124, 90395, 100136, 16530, 102298, 92894, 87335, 66394, 8997, 151668, 271, 515, 220, 330, 9852, 2078, 788, 330, 17, 16, 15, 15, 16, 2447, 33, 756, 220, 330, 9852, 675, 788, 330, 17, 16, 114418, 15, 16, 756, 220, 330, 376, 67, 16384, 788, 330, 108532, 756, 220, 330, 6045, 788, 220, 16, 15, 15, 15, 15, 15, 15, 15, 345, 220, 330, 7698, 788, 220, 18, 13, 20, 345, 220, 330, 6045, 27234, 12135, 788, 830, 345, 220, 330, 7698, 27234, 12135, 788, 830, 198, 92], "total_duration": 13696725858, "load_duration": 38611912, "prompt_eval_count": 253, "prompt_eval_duration": 2175226323, "eval_count": 375, "eval_duration": 11481742987}
2025-06-09 21:20:57,871 - __main__ - INFO - Raw model response: <think>
好的，我现在需要处理用户提供的债券交易文本，并将其解析为JSON格式。首先，我要仔细阅读用户提供的文本和要求的字段，确保不遗漏任何细节。

用户提供的文本是：“25国债01 买入 *1000万 3.6%”。看起来这是一个买入债券的交易记录，债券代码是25国债01，名称是21国债01，交易方向是买入，金额是*1000万，利率是3.6%。需要提取的字段包括assetCode、assetName、trdSide、amount、rate、amountReqFlag、rateReqFlag。

首先，assetCode应该是债券代码，这里用户给出的是“25国债01”，所以直接提取。assetName是名称，用户提到的是“21国债01”，所以没问题。trdSide是买入，放在最后。amount是数字，这里用户写的是*1000万，所以金额是10000000，amount字段填进去。rate是3.6，转换成数字没问题。amountReqFlag是true，因为金额前有*号，rateReqFlag也是true，因为利率前有*号。需要检查是否有其他可能的错误，比如逗号的位置或者数字的正确格式，但看起来没问题。最后，按照示例输出格式，确保字段正确对应，并且不包含其他文字说明。
</think>

{
  "assetCode": "21001.IB",
  "assetName": "21国债01",
  "trdSide": "买入",
  "amount": 10000000,
  "rate": 3.5,
  "amountReqFlag": true,
  "rateReqFlag": true
}
2025-06-09 21:20:57,871 - __main__ - ERROR - JSON decode error: Expecting value: line 1 column 1 (char 0)
2025-06-09 21:20:57,872 - __main__ - INFO - Extracted JSON string: {
  "assetCode": "21001.IB",
  "assetName": "21国债01",
  "trdSide": "买入",
  "amount": 10000000,
  "rate": 3.5,
  "amountReqFlag": true,
  "rateReqFlag": true
}
2025-06-09 21:20:57,872 - __main__ - INFO - Successfully parsed bond data: {'assetCode': '21001.IB', 'assetName': '21国债01', 'trdSide': '买入', 'amount': 10000000, 'rate': 3.5, 'amountReqFlag': True, 'rateReqFlag': True}
2025-06-09 21:20:57,873 - __main__ - INFO - Successfully validated and returned parsed data: assetCode='21001.IB' assetName='21国债01' trdSide='买入' amount=10000000.0 rate=3.5 amountReqFlag=True rateReqFlag=True
2025-06-09 21:21:35,158 - __main__ - INFO - Starting bond text parsing service...
2025-06-09 21:21:52,788 - __main__ - INFO - Received request to parse bond text: 25国债01 买入 *1000万 3.6% 
2025-06-09 21:21:52,800 - __main__ - INFO - Calling Ollama model with text: 25国债01 买入 *1000万 3.6% 
2025-06-09 21:21:52,830 - __main__ - INFO - Ollama service is available
2025-06-09 21:21:52,860 - __main__ - INFO - Available models: {"models": [{"name": "qwen3:0.6b", "model": "qwen3:0.6b", "modified_at": "2025-05-08T01:27:52.753829715+08:00", "size": 522653526, "digest": "3bae9c93586b27bedaa979979733c2b0edd1d0defc745e9638f2161192a0ccf0", "details": {"parent_model": "", "format": "gguf", "family": "qwen3", "families": ["qwen3"], "parameter_size": "751.63M", "quantization_level": "Q4_K_M"}}]}
2025-06-09 21:21:52,860 - __main__ - INFO - Sending request to Ollama: {"model": "qwen3:0.6b", "prompt": "请将以下债券交易文本解析为JSON格式，只返回JSON对象，不要包含其他文字说明：\n            25国债01 买入 *1000万 3.6% \n            \n            需要提取的字段：\n            - assetCode: 债券代码\n            - assetName: 债券名称\n            - trdSide: 交易方向（买入/卖出）\n            - amount: 交易金额（数字）\n            - rate: 利率（数字）\n            - amountReqFlag: 金额是否需请示（布尔值，当金额前有*号时为true）\n            - rateReqFlag: 利率是否需请示（布尔值，当利率前有*号时为true）\n            \n            ", "stream": false}
2025-06-09 21:22:02,774 - __main__ - INFO - Received response from Ollama: {"model": "qwen3:0.6b", "created_at": "2025-06-09T13:22:02.766458Z", "response": "<think>\n好的，我现在需要处理用户提供的债券交易文本，并将其解析为JSON格式。首先，我要仔细阅读用户提供的文本，确保理解每个部分的内容。\n\n用户给出的文本是：“25国债01 买入 *1000万 3.6%”。看起来这是一个债券交易的示例，包含多个字段。首先，我需要确定用户的需求，即提取特定字段，而不需要其他文字说明。\n\n首先，资产代码是“25国债01”，这应该是assetCode的值。然后，债券名称应该是“国债01”，所以assetName应该是这个。接下来是交易方向，用户提到“买入”，所以trdSide是“买入”。金额方面，用户输入的是“*1000万”，这里需要判断是否需要请示。金额前有*号，所以amountReqFlag应该是true。利率部分是“3.6%”，同样需要检查是否需要请示，利率前没有*号，所以rateReqFlag应该是false。\n\n现在，我需要将这些信息整合成一个包含所有指定字段的JSON对象。确保没有遗漏任何字段，并且数据类型正确，比如金额和利率都是数字，布尔值正确。最后，检查一下是否有任何其他可能的错误或遗漏，比如标点符号或格式问题，确保输出的JSON是有效的，并且完全符合用户的要求。\n</think>\n\n{\n  \"assetCode\": \"25国债01\",\n  \"assetName\": \"国债01\",\n  \"trdSide\": \"买入\",\n  \"amount\": 1000,\n  \"rate\": 3.6,\n  \"amountReqFlag\": true,\n  \"rateReqFlag\": false\n}", "done": true, "done_reason": "stop", "context": [151644, 872, 198, 14880, 44063, 87752, 104976, 99886, 108704, 106637, 17714, 5370, 68805, 3837, 91680, 31526, 5370, 64429, 3837, 100148, 102298, 92894, 87335, 66394, 28311, 310, 220, 17, 20, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 220, 18, 13, 21, 4, 83913, 310, 18137, 250, 222, 30534, 107439, 9370, 44931, 28311, 310, 481, 9329, 2078, 25, 4891, 222, 118, 100054, 46100, 198, 310, 481, 9329, 675, 25, 4891, 222, 118, 100054, 29991, 198, 310, 481, 489, 67, 16384, 25, 220, 99886, 100696, 9909, 108532, 14, 109430, 23083, 310, 481, 3311, 25, 220, 99886, 80094, 9909, 82587, 23083, 310, 481, 4379, 25, 19468, 102, 95355, 9909, 82587, 23083, 310, 481, 3311, 27234, 12135, 25, 220, 80094, 64471, 58362, 14880, 19793, 9909, 117661, 25511, 3837, 39165, 80094, 24562, 18830, 9, 17992, 13343, 17714, 1866, 23083, 310, 481, 4379, 27234, 12135, 25, 19468, 102, 95355, 64471, 58362, 14880, 19793, 9909, 117661, 25511, 3837, 39165, 102299, 24562, 18830, 9, 17992, 13343, 17714, 1866, 23083, 3374, 1797, 151645, 198, 151644, 77091, 198, 151667, 198, 99692, 3837, 107520, 85106, 54542, 20002, 103008, 104976, 99886, 108704, 90395, 105278, 106637, 17714, 5370, 68805, 1773, 101140, 3837, 104515, 104857, 101113, 20002, 103008, 108704, 3837, 103944, 101128, 103991, 99659, 104597, 3407, 20002, 107485, 9370, 108704, 20412, 36987, 17, 20, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 220, 18, 13, 21, 4, 55807, 104544, 105464, 104976, 99886, 9370, 19793, 26355, 3837, 102298, 101213, 44931, 1773, 101140, 3837, 35946, 85106, 60610, 20002, 104378, 3837, 91676, 107439, 105149, 44931, 3837, 68536, 104689, 92894, 87335, 66394, 3407, 101140, 3837, 99814, 46100, 20412, 2073, 17, 20, 114418, 15, 16, 33590, 43288, 104583, 9852, 2078, 9370, 25511, 1773, 101889, 3837, 104976, 29991, 104583, 2073, 114418, 15, 16, 33590, 99999, 9852, 675, 104583, 99487, 1773, 104326, 20412, 99886, 100696, 3837, 20002, 104496, 2073, 108532, 33590, 99999, 376, 67, 16384, 20412, 2073, 108532, 55807, 80094, 99522, 3837, 20002, 31196, 100146, 2073, 9, 16, 15, 15, 15, 31207, 33590, 99817, 85106, 104317, 64471, 85106, 14880, 19793, 1773, 80094, 24562, 18830, 9, 17992, 3837, 99999, 6045, 27234, 12135, 104583, 1866, 1773, 102299, 99659, 20412, 2073, 18, 13, 21, 4, 33590, 101165, 85106, 101071, 64471, 85106, 14880, 19793, 3837, 102299, 24562, 80443, 9, 17992, 3837, 99999, 7698, 27234, 12135, 104583, 3849, 3407, 99601, 3837, 35946, 85106, 44063, 100001, 27369, 102102, 12857, 46944, 102298, 55338, 105146, 44931, 9370, 5370, 64429, 1773, 103944, 80443, 114078, 99885, 44931, 90395, 100136, 20074, 31905, 88991, 3837, 101912, 80094, 33108, 102299, 100132, 82587, 3837, 117661, 25511, 88991, 1773, 100161, 3837, 101071, 100158, 107189, 99885, 92894, 87267, 9370, 32100, 57191, 114078, 3837, 101912, 30844, 27442, 108872, 57191, 68805, 86119, 3837, 103944, 66017, 9370, 5370, 20412, 104775, 90395, 100136, 100372, 101137, 20002, 104272, 8997, 151668, 271, 515, 220, 330, 9852, 2078, 788, 330, 17, 20, 114418, 15, 16, 756, 220, 330, 9852, 675, 788, 330, 114418, 15, 16, 756, 220, 330, 376, 67, 16384, 788, 330, 108532, 756, 220, 330, 6045, 788, 220, 16, 15, 15, 15, 345, 220, 330, 7698, 788, 220, 18, 13, 21, 345, 220, 330, 6045, 27234, 12135, 788, 830, 345, 220, 330, 7698, 27234, 12135, 788, 895, 198, 92], "total_duration": 9899376560, "load_duration": 30512858, "prompt_eval_count": 171, "prompt_eval_duration": 104623027, "eval_count": 353, "eval_duration": 9763014270}
2025-06-09 21:22:02,774 - __main__ - INFO - Validating Ollama response: {"model": "qwen3:0.6b", "created_at": "2025-06-09T13:22:02.766458Z", "response": "<think>\n好的，我现在需要处理用户提供的债券交易文本，并将其解析为JSON格式。首先，我要仔细阅读用户提供的文本，确保理解每个部分的内容。\n\n用户给出的文本是：“25国债01 买入 *1000万 3.6%”。看起来这是一个债券交易的示例，包含多个字段。首先，我需要确定用户的需求，即提取特定字段，而不需要其他文字说明。\n\n首先，资产代码是“25国债01”，这应该是assetCode的值。然后，债券名称应该是“国债01”，所以assetName应该是这个。接下来是交易方向，用户提到“买入”，所以trdSide是“买入”。金额方面，用户输入的是“*1000万”，这里需要判断是否需要请示。金额前有*号，所以amountReqFlag应该是true。利率部分是“3.6%”，同样需要检查是否需要请示，利率前没有*号，所以rateReqFlag应该是false。\n\n现在，我需要将这些信息整合成一个包含所有指定字段的JSON对象。确保没有遗漏任何字段，并且数据类型正确，比如金额和利率都是数字，布尔值正确。最后，检查一下是否有任何其他可能的错误或遗漏，比如标点符号或格式问题，确保输出的JSON是有效的，并且完全符合用户的要求。\n</think>\n\n{\n  \"assetCode\": \"25国债01\",\n  \"assetName\": \"国债01\",\n  \"trdSide\": \"买入\",\n  \"amount\": 1000,\n  \"rate\": 3.6,\n  \"amountReqFlag\": true,\n  \"rateReqFlag\": false\n}", "done": true, "done_reason": "stop", "context": [151644, 872, 198, 14880, 44063, 87752, 104976, 99886, 108704, 106637, 17714, 5370, 68805, 3837, 91680, 31526, 5370, 64429, 3837, 100148, 102298, 92894, 87335, 66394, 28311, 310, 220, 17, 20, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 220, 18, 13, 21, 4, 83913, 310, 18137, 250, 222, 30534, 107439, 9370, 44931, 28311, 310, 481, 9329, 2078, 25, 4891, 222, 118, 100054, 46100, 198, 310, 481, 9329, 675, 25, 4891, 222, 118, 100054, 29991, 198, 310, 481, 489, 67, 16384, 25, 220, 99886, 100696, 9909, 108532, 14, 109430, 23083, 310, 481, 3311, 25, 220, 99886, 80094, 9909, 82587, 23083, 310, 481, 4379, 25, 19468, 102, 95355, 9909, 82587, 23083, 310, 481, 3311, 27234, 12135, 25, 220, 80094, 64471, 58362, 14880, 19793, 9909, 117661, 25511, 3837, 39165, 80094, 24562, 18830, 9, 17992, 13343, 17714, 1866, 23083, 310, 481, 4379, 27234, 12135, 25, 19468, 102, 95355, 64471, 58362, 14880, 19793, 9909, 117661, 25511, 3837, 39165, 102299, 24562, 18830, 9, 17992, 13343, 17714, 1866, 23083, 3374, 1797, 151645, 198, 151644, 77091, 198, 151667, 198, 99692, 3837, 107520, 85106, 54542, 20002, 103008, 104976, 99886, 108704, 90395, 105278, 106637, 17714, 5370, 68805, 1773, 101140, 3837, 104515, 104857, 101113, 20002, 103008, 108704, 3837, 103944, 101128, 103991, 99659, 104597, 3407, 20002, 107485, 9370, 108704, 20412, 36987, 17, 20, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 220, 18, 13, 21, 4, 55807, 104544, 105464, 104976, 99886, 9370, 19793, 26355, 3837, 102298, 101213, 44931, 1773, 101140, 3837, 35946, 85106, 60610, 20002, 104378, 3837, 91676, 107439, 105149, 44931, 3837, 68536, 104689, 92894, 87335, 66394, 3407, 101140, 3837, 99814, 46100, 20412, 2073, 17, 20, 114418, 15, 16, 33590, 43288, 104583, 9852, 2078, 9370, 25511, 1773, 101889, 3837, 104976, 29991, 104583, 2073, 114418, 15, 16, 33590, 99999, 9852, 675, 104583, 99487, 1773, 104326, 20412, 99886, 100696, 3837, 20002, 104496, 2073, 108532, 33590, 99999, 376, 67, 16384, 20412, 2073, 108532, 55807, 80094, 99522, 3837, 20002, 31196, 100146, 2073, 9, 16, 15, 15, 15, 31207, 33590, 99817, 85106, 104317, 64471, 85106, 14880, 19793, 1773, 80094, 24562, 18830, 9, 17992, 3837, 99999, 6045, 27234, 12135, 104583, 1866, 1773, 102299, 99659, 20412, 2073, 18, 13, 21, 4, 33590, 101165, 85106, 101071, 64471, 85106, 14880, 19793, 3837, 102299, 24562, 80443, 9, 17992, 3837, 99999, 7698, 27234, 12135, 104583, 3849, 3407, 99601, 3837, 35946, 85106, 44063, 100001, 27369, 102102, 12857, 46944, 102298, 55338, 105146, 44931, 9370, 5370, 64429, 1773, 103944, 80443, 114078, 99885, 44931, 90395, 100136, 20074, 31905, 88991, 3837, 101912, 80094, 33108, 102299, 100132, 82587, 3837, 117661, 25511, 88991, 1773, 100161, 3837, 101071, 100158, 107189, 99885, 92894, 87267, 9370, 32100, 57191, 114078, 3837, 101912, 30844, 27442, 108872, 57191, 68805, 86119, 3837, 103944, 66017, 9370, 5370, 20412, 104775, 90395, 100136, 100372, 101137, 20002, 104272, 8997, 151668, 271, 515, 220, 330, 9852, 2078, 788, 330, 17, 20, 114418, 15, 16, 756, 220, 330, 9852, 675, 788, 330, 114418, 15, 16, 756, 220, 330, 376, 67, 16384, 788, 330, 108532, 756, 220, 330, 6045, 788, 220, 16, 15, 15, 15, 345, 220, 330, 7698, 788, 220, 18, 13, 21, 345, 220, 330, 6045, 27234, 12135, 788, 830, 345, 220, 330, 7698, 27234, 12135, 788, 895, 198, 92], "total_duration": 9899376560, "load_duration": 30512858, "prompt_eval_count": 171, "prompt_eval_duration": 104623027, "eval_count": 353, "eval_duration": 9763014270}
2025-06-09 21:22:02,775 - __main__ - INFO - Raw model response: <think>
好的，我现在需要处理用户提供的债券交易文本，并将其解析为JSON格式。首先，我要仔细阅读用户提供的文本，确保理解每个部分的内容。

用户给出的文本是：“25国债01 买入 *1000万 3.6%”。看起来这是一个债券交易的示例，包含多个字段。首先，我需要确定用户的需求，即提取特定字段，而不需要其他文字说明。

首先，资产代码是“25国债01”，这应该是assetCode的值。然后，债券名称应该是“国债01”，所以assetName应该是这个。接下来是交易方向，用户提到“买入”，所以trdSide是“买入”。金额方面，用户输入的是“*1000万”，这里需要判断是否需要请示。金额前有*号，所以amountReqFlag应该是true。利率部分是“3.6%”，同样需要检查是否需要请示，利率前没有*号，所以rateReqFlag应该是false。

现在，我需要将这些信息整合成一个包含所有指定字段的JSON对象。确保没有遗漏任何字段，并且数据类型正确，比如金额和利率都是数字，布尔值正确。最后，检查一下是否有任何其他可能的错误或遗漏，比如标点符号或格式问题，确保输出的JSON是有效的，并且完全符合用户的要求。
</think>

{
  "assetCode": "25国债01",
  "assetName": "国债01",
  "trdSide": "买入",
  "amount": 1000,
  "rate": 3.6,
  "amountReqFlag": true,
  "rateReqFlag": false
}
2025-06-09 21:22:02,775 - __main__ - ERROR - JSON decode error: Expecting value: line 1 column 1 (char 0)
2025-06-09 21:22:02,775 - __main__ - INFO - Extracted JSON string: {
  "assetCode": "25国债01",
  "assetName": "国债01",
  "trdSide": "买入",
  "amount": 1000,
  "rate": 3.6,
  "amountReqFlag": true,
  "rateReqFlag": false
}
2025-06-09 21:22:02,775 - __main__ - INFO - Successfully parsed bond data: {'assetCode': '25国债01', 'assetName': '国债01', 'trdSide': '买入', 'amount': 1000, 'rate': 3.6, 'amountReqFlag': True, 'rateReqFlag': False}
2025-06-09 21:22:02,777 - __main__ - INFO - Successfully validated and returned parsed data: assetCode='25国债01' assetName='国债01' trdSide='买入' amount=1000.0 rate=3.6 amountReqFlag=True rateReqFlag=False
2025-06-09 21:22:42,371 - __main__ - INFO - Received request to parse bond text: 250001.IB 25国债01 买入 *1000万 3.6% 
2025-06-09 21:22:42,387 - __main__ - INFO - Calling Ollama model with text: 250001.IB 25国债01 买入 *1000万 3.6% 
2025-06-09 21:22:42,399 - __main__ - INFO - Ollama service is available
2025-06-09 21:22:42,425 - __main__ - INFO - Available models: {"models": [{"name": "qwen3:0.6b", "model": "qwen3:0.6b", "modified_at": "2025-05-08T01:27:52.753829715+08:00", "size": 522653526, "digest": "3bae9c93586b27bedaa979979733c2b0edd1d0defc745e9638f2161192a0ccf0", "details": {"parent_model": "", "format": "gguf", "family": "qwen3", "families": ["qwen3"], "parameter_size": "751.63M", "quantization_level": "Q4_K_M"}}]}
2025-06-09 21:22:42,435 - __main__ - INFO - Sending request to Ollama: {"model": "qwen3:0.6b", "prompt": "请将以下债券交易文本解析为JSON格式，只返回JSON对象，不要包含其他文字说明：\n            250001.IB 25国债01 买入 *1000万 3.6% \n            \n            需要提取的字段：\n            - assetCode: 债券代码\n            - assetName: 债券名称\n            - trdSide: 交易方向（买入/卖出）\n            - amount: 交易金额（数字）\n            - rate: 利率（数字）\n            - amountReqFlag: 金额是否需请示（布尔值，当金额前有*号时为true）\n            - rateReqFlag: 利率是否需请示（布尔值，当利率前有*号时为true）\n            \n            ", "stream": false}
2025-06-09 21:22:56,140 - __main__ - INFO - Received response from Ollama: {"model": "qwen3:0.6b", "created_at": "2025-06-09T13:22:56.132248Z", "response": "<think>\n好的，我现在需要处理用户提供的债券交易文本，并将其解析为JSON格式。首先，我要仔细阅读用户提供的文本和要求的字段。用户给出的文本是：“250001.IB 25国债01 买入 *1000万 3.6%”。接下来需要提取的字段包括assetCode、assetName、trdSide、amount、rate、amountReqFlag、rateReqFlag。\n\n首先，assetCode应该是债券代码，这里看起来是“250001.IB 25国债01”，但可能用户希望将逗号分隔的部分合并，所以可能需要确认是否需要分开处理，但根据用户的要求，只返回JSON对象，所以可能直接提取这两个部分作为assetCode和assetName。不过原文本中资产代码可能已经是完整的，比如“250001.IB 25国债01”，所以可能直接作为assetCode和assetName。不过可能用户希望将这两个部分合并，但根据JSON的结构，可能需要分开，所以这里可能需要保留原样。\n\n然后是trdSide，这里明确是“买入”，所以填入。amount是1000万，但需要转换为数字，所以是1000。rate是3.6%，需要转换为数字，所以是3.6。amountReqFlag是true，因为有*号，而rateReqFlag也是true，因为有%号。\n\n现在检查是否有遗漏的字段，用户要求的字段是否都包含，这里所有字段都提取到了。最后，确保JSON格式正确，没有多余的文字说明，只返回对象。确认无误后，就可以生成最终的JSON对象了。\n</think>\n\n{\n  \"assetCode\": \"250001.IB 25国债01\",\n  \"assetName\": \"25国债01\",\n  \"trdSide\": \"买入\",\n  \"amount\": 1000,\n  \"rate\": 3.6,\n  \"amountReqFlag\": true,\n  \"rateReqFlag\": true\n}", "done": true, "done_reason": "stop", "context": [151644, 872, 198, 14880, 44063, 87752, 104976, 99886, 108704, 106637, 17714, 5370, 68805, 3837, 91680, 31526, 5370, 64429, 3837, 100148, 102298, 92894, 87335, 66394, 28311, 310, 220, 17, 20, 15, 15, 15, 16, 2447, 33, 220, 17, 20, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 220, 18, 13, 21, 4, 83913, 310, 18137, 250, 222, 30534, 107439, 9370, 44931, 28311, 310, 481, 9329, 2078, 25, 4891, 222, 118, 100054, 46100, 198, 310, 481, 9329, 675, 25, 4891, 222, 118, 100054, 29991, 198, 310, 481, 489, 67, 16384, 25, 220, 99886, 100696, 9909, 108532, 14, 109430, 23083, 310, 481, 3311, 25, 220, 99886, 80094, 9909, 82587, 23083, 310, 481, 4379, 25, 19468, 102, 95355, 9909, 82587, 23083, 310, 481, 3311, 27234, 12135, 25, 220, 80094, 64471, 58362, 14880, 19793, 9909, 117661, 25511, 3837, 39165, 80094, 24562, 18830, 9, 17992, 13343, 17714, 1866, 23083, 310, 481, 4379, 27234, 12135, 25, 19468, 102, 95355, 64471, 58362, 14880, 19793, 9909, 117661, 25511, 3837, 39165, 102299, 24562, 18830, 9, 17992, 13343, 17714, 1866, 23083, 3374, 1797, 151645, 198, 151644, 77091, 198, 151667, 198, 99692, 3837, 107520, 85106, 54542, 20002, 103008, 104976, 99886, 108704, 90395, 105278, 106637, 17714, 5370, 68805, 1773, 101140, 3837, 104515, 104857, 101113, 20002, 103008, 108704, 33108, 101882, 9370, 44931, 1773, 20002, 107485, 9370, 108704, 20412, 36987, 17, 20, 15, 15, 15, 16, 2447, 33, 220, 17, 20, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 220, 18, 13, 21, 4, 55807, 104326, 85106, 107439, 9370, 44931, 100630, 9852, 2078, 5373, 9852, 675, 5373, 376, 67, 16384, 5373, 6045, 5373, 7698, 5373, 6045, 27234, 12135, 5373, 7698, 27234, 12135, 3407, 101140, 3837, 9852, 2078, 104583, 104976, 46100, 3837, 99817, 104544, 20412, 2073, 17, 20, 15, 15, 15, 16, 2447, 33, 220, 17, 20, 114418, 15, 16, 33590, 77288, 87267, 20002, 99880, 44063, 107463, 17992, 17177, 99859, 107625, 106080, 3837, 99999, 87267, 85106, 81167, 64471, 85106, 107878, 54542, 3837, 77288, 100345, 20002, 104272, 3837, 91680, 31526, 5370, 64429, 3837, 99999, 87267, 101041, 107439, 105932, 99659, 100622, 9852, 2078, 33108, 9852, 675, 1773, 100632, 103283, 21894, 15946, 99814, 46100, 87267, 107056, 105896, 3837, 101912, 2073, 17, 20, 15, 15, 15, 16, 2447, 33, 220, 17, 20, 114418, 15, 16, 33590, 99999, 87267, 101041, 100622, 9852, 2078, 33108, 9852, 675, 1773, 100632, 87267, 20002, 99880, 44063, 105932, 99659, 106080, 3837, 77288, 100345, 5370, 9370, 100166, 3837, 87267, 85106, 107878, 3837, 99999, 99817, 87267, 85106, 104465, 52129, 90885, 3407, 101889, 20412, 376, 67, 16384, 3837, 99817, 100692, 20412, 2073, 108532, 33590, 99999, 68756, 17254, 1773, 6045, 20412, 16, 15, 15, 15, 31207, 3837, 77288, 85106, 105359, 17714, 82587, 3837, 99999, 20412, 16, 15, 15, 15, 1773, 7698, 20412, 18, 13, 21, 69982, 85106, 105359, 17714, 82587, 3837, 99999, 20412, 18, 13, 21, 1773, 6045, 27234, 12135, 20412, 1866, 3837, 99519, 18830, 9, 17992, 3837, 68536, 7698, 27234, 12135, 100000, 1866, 3837, 99519, 18830, 4, 17992, 3407, 99601, 101071, 107189, 114078, 9370, 44931, 3837, 20002, 101882, 9370, 44931, 64471, 71268, 102298, 3837, 99817, 55338, 44931, 71268, 107439, 99495, 1773, 100161, 3837, 103944, 5370, 68805, 88991, 3837, 80443, 115916, 109502, 66394, 3837, 91680, 31526, 64429, 1773, 81167, 42192, 29056, 33447, 3837, 102003, 43959, 103941, 9370, 5370, 64429, 34187, 8997, 151668, 271, 515, 220, 330, 9852, 2078, 788, 330, 17, 20, 15, 15, 15, 16, 2447, 33, 220, 17, 20, 114418, 15, 16, 756, 220, 330, 9852, 675, 788, 330, 17, 20, 114418, 15, 16, 756, 220, 330, 376, 67, 16384, 788, 330, 108532, 756, 220, 330, 6045, 788, 220, 16, 15, 15, 15, 345, 220, 330, 7698, 788, 220, 18, 13, 21, 345, 220, 330, 6045, 27234, 12135, 788, 830, 345, 220, 330, 7698, 27234, 12135, 788, 830, 198, 92], "total_duration": 13686596604, "load_duration": 38943714, "prompt_eval_count": 180, "prompt_eval_duration": 1527544253, "eval_count": 439, "eval_duration": 12119133521}
2025-06-09 21:22:56,141 - __main__ - INFO - Validating Ollama response: {"model": "qwen3:0.6b", "created_at": "2025-06-09T13:22:56.132248Z", "response": "<think>\n好的，我现在需要处理用户提供的债券交易文本，并将其解析为JSON格式。首先，我要仔细阅读用户提供的文本和要求的字段。用户给出的文本是：“250001.IB 25国债01 买入 *1000万 3.6%”。接下来需要提取的字段包括assetCode、assetName、trdSide、amount、rate、amountReqFlag、rateReqFlag。\n\n首先，assetCode应该是债券代码，这里看起来是“250001.IB 25国债01”，但可能用户希望将逗号分隔的部分合并，所以可能需要确认是否需要分开处理，但根据用户的要求，只返回JSON对象，所以可能直接提取这两个部分作为assetCode和assetName。不过原文本中资产代码可能已经是完整的，比如“250001.IB 25国债01”，所以可能直接作为assetCode和assetName。不过可能用户希望将这两个部分合并，但根据JSON的结构，可能需要分开，所以这里可能需要保留原样。\n\n然后是trdSide，这里明确是“买入”，所以填入。amount是1000万，但需要转换为数字，所以是1000。rate是3.6%，需要转换为数字，所以是3.6。amountReqFlag是true，因为有*号，而rateReqFlag也是true，因为有%号。\n\n现在检查是否有遗漏的字段，用户要求的字段是否都包含，这里所有字段都提取到了。最后，确保JSON格式正确，没有多余的文字说明，只返回对象。确认无误后，就可以生成最终的JSON对象了。\n</think>\n\n{\n  \"assetCode\": \"250001.IB 25国债01\",\n  \"assetName\": \"25国债01\",\n  \"trdSide\": \"买入\",\n  \"amount\": 1000,\n  \"rate\": 3.6,\n  \"amountReqFlag\": true,\n  \"rateReqFlag\": true\n}", "done": true, "done_reason": "stop", "context": [151644, 872, 198, 14880, 44063, 87752, 104976, 99886, 108704, 106637, 17714, 5370, 68805, 3837, 91680, 31526, 5370, 64429, 3837, 100148, 102298, 92894, 87335, 66394, 28311, 310, 220, 17, 20, 15, 15, 15, 16, 2447, 33, 220, 17, 20, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 220, 18, 13, 21, 4, 83913, 310, 18137, 250, 222, 30534, 107439, 9370, 44931, 28311, 310, 481, 9329, 2078, 25, 4891, 222, 118, 100054, 46100, 198, 310, 481, 9329, 675, 25, 4891, 222, 118, 100054, 29991, 198, 310, 481, 489, 67, 16384, 25, 220, 99886, 100696, 9909, 108532, 14, 109430, 23083, 310, 481, 3311, 25, 220, 99886, 80094, 9909, 82587, 23083, 310, 481, 4379, 25, 19468, 102, 95355, 9909, 82587, 23083, 310, 481, 3311, 27234, 12135, 25, 220, 80094, 64471, 58362, 14880, 19793, 9909, 117661, 25511, 3837, 39165, 80094, 24562, 18830, 9, 17992, 13343, 17714, 1866, 23083, 310, 481, 4379, 27234, 12135, 25, 19468, 102, 95355, 64471, 58362, 14880, 19793, 9909, 117661, 25511, 3837, 39165, 102299, 24562, 18830, 9, 17992, 13343, 17714, 1866, 23083, 3374, 1797, 151645, 198, 151644, 77091, 198, 151667, 198, 99692, 3837, 107520, 85106, 54542, 20002, 103008, 104976, 99886, 108704, 90395, 105278, 106637, 17714, 5370, 68805, 1773, 101140, 3837, 104515, 104857, 101113, 20002, 103008, 108704, 33108, 101882, 9370, 44931, 1773, 20002, 107485, 9370, 108704, 20412, 36987, 17, 20, 15, 15, 15, 16, 2447, 33, 220, 17, 20, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 220, 18, 13, 21, 4, 55807, 104326, 85106, 107439, 9370, 44931, 100630, 9852, 2078, 5373, 9852, 675, 5373, 376, 67, 16384, 5373, 6045, 5373, 7698, 5373, 6045, 27234, 12135, 5373, 7698, 27234, 12135, 3407, 101140, 3837, 9852, 2078, 104583, 104976, 46100, 3837, 99817, 104544, 20412, 2073, 17, 20, 15, 15, 15, 16, 2447, 33, 220, 17, 20, 114418, 15, 16, 33590, 77288, 87267, 20002, 99880, 44063, 107463, 17992, 17177, 99859, 107625, 106080, 3837, 99999, 87267, 85106, 81167, 64471, 85106, 107878, 54542, 3837, 77288, 100345, 20002, 104272, 3837, 91680, 31526, 5370, 64429, 3837, 99999, 87267, 101041, 107439, 105932, 99659, 100622, 9852, 2078, 33108, 9852, 675, 1773, 100632, 103283, 21894, 15946, 99814, 46100, 87267, 107056, 105896, 3837, 101912, 2073, 17, 20, 15, 15, 15, 16, 2447, 33, 220, 17, 20, 114418, 15, 16, 33590, 99999, 87267, 101041, 100622, 9852, 2078, 33108, 9852, 675, 1773, 100632, 87267, 20002, 99880, 44063, 105932, 99659, 106080, 3837, 77288, 100345, 5370, 9370, 100166, 3837, 87267, 85106, 107878, 3837, 99999, 99817, 87267, 85106, 104465, 52129, 90885, 3407, 101889, 20412, 376, 67, 16384, 3837, 99817, 100692, 20412, 2073, 108532, 33590, 99999, 68756, 17254, 1773, 6045, 20412, 16, 15, 15, 15, 31207, 3837, 77288, 85106, 105359, 17714, 82587, 3837, 99999, 20412, 16, 15, 15, 15, 1773, 7698, 20412, 18, 13, 21, 69982, 85106, 105359, 17714, 82587, 3837, 99999, 20412, 18, 13, 21, 1773, 6045, 27234, 12135, 20412, 1866, 3837, 99519, 18830, 9, 17992, 3837, 68536, 7698, 27234, 12135, 100000, 1866, 3837, 99519, 18830, 4, 17992, 3407, 99601, 101071, 107189, 114078, 9370, 44931, 3837, 20002, 101882, 9370, 44931, 64471, 71268, 102298, 3837, 99817, 55338, 44931, 71268, 107439, 99495, 1773, 100161, 3837, 103944, 5370, 68805, 88991, 3837, 80443, 115916, 109502, 66394, 3837, 91680, 31526, 64429, 1773, 81167, 42192, 29056, 33447, 3837, 102003, 43959, 103941, 9370, 5370, 64429, 34187, 8997, 151668, 271, 515, 220, 330, 9852, 2078, 788, 330, 17, 20, 15, 15, 15, 16, 2447, 33, 220, 17, 20, 114418, 15, 16, 756, 220, 330, 9852, 675, 788, 330, 17, 20, 114418, 15, 16, 756, 220, 330, 376, 67, 16384, 788, 330, 108532, 756, 220, 330, 6045, 788, 220, 16, 15, 15, 15, 345, 220, 330, 7698, 788, 220, 18, 13, 21, 345, 220, 330, 6045, 27234, 12135, 788, 830, 345, 220, 330, 7698, 27234, 12135, 788, 830, 198, 92], "total_duration": 13686596604, "load_duration": 38943714, "prompt_eval_count": 180, "prompt_eval_duration": 1527544253, "eval_count": 439, "eval_duration": 12119133521}
2025-06-09 21:22:56,141 - __main__ - INFO - Raw model response: <think>
好的，我现在需要处理用户提供的债券交易文本，并将其解析为JSON格式。首先，我要仔细阅读用户提供的文本和要求的字段。用户给出的文本是：“250001.IB 25国债01 买入 *1000万 3.6%”。接下来需要提取的字段包括assetCode、assetName、trdSide、amount、rate、amountReqFlag、rateReqFlag。

首先，assetCode应该是债券代码，这里看起来是“250001.IB 25国债01”，但可能用户希望将逗号分隔的部分合并，所以可能需要确认是否需要分开处理，但根据用户的要求，只返回JSON对象，所以可能直接提取这两个部分作为assetCode和assetName。不过原文本中资产代码可能已经是完整的，比如“250001.IB 25国债01”，所以可能直接作为assetCode和assetName。不过可能用户希望将这两个部分合并，但根据JSON的结构，可能需要分开，所以这里可能需要保留原样。

然后是trdSide，这里明确是“买入”，所以填入。amount是1000万，但需要转换为数字，所以是1000。rate是3.6%，需要转换为数字，所以是3.6。amountReqFlag是true，因为有*号，而rateReqFlag也是true，因为有%号。

现在检查是否有遗漏的字段，用户要求的字段是否都包含，这里所有字段都提取到了。最后，确保JSON格式正确，没有多余的文字说明，只返回对象。确认无误后，就可以生成最终的JSON对象了。
</think>

{
  "assetCode": "250001.IB 25国债01",
  "assetName": "25国债01",
  "trdSide": "买入",
  "amount": 1000,
  "rate": 3.6,
  "amountReqFlag": true,
  "rateReqFlag": true
}
2025-06-09 21:22:56,141 - __main__ - ERROR - JSON decode error: Expecting value: line 1 column 1 (char 0)
2025-06-09 21:22:56,142 - __main__ - INFO - Extracted JSON string: {
  "assetCode": "250001.IB 25国债01",
  "assetName": "25国债01",
  "trdSide": "买入",
  "amount": 1000,
  "rate": 3.6,
  "amountReqFlag": true,
  "rateReqFlag": true
}
2025-06-09 21:22:56,142 - __main__ - INFO - Successfully parsed bond data: {'assetCode': '250001.IB 25国债01', 'assetName': '25国债01', 'trdSide': '买入', 'amount': 1000, 'rate': 3.6, 'amountReqFlag': True, 'rateReqFlag': True}
2025-06-09 21:22:56,143 - __main__ - INFO - Successfully validated and returned parsed data: assetCode='250001.IB 25国债01' assetName='25国债01' trdSide='买入' amount=1000.0 rate=3.6 amountReqFlag=True rateReqFlag=True
2025-06-09 21:23:12,322 - __main__ - INFO - Received request to parse bond text: 250001.IB 25国债01 买入 *1000万 3.6% 
2025-06-09 21:23:12,339 - __main__ - INFO - Calling Ollama model with text: 250001.IB 25国债01 买入 *1000万 3.6% 
2025-06-09 21:23:12,348 - __main__ - INFO - Ollama service is available
2025-06-09 21:23:12,375 - __main__ - INFO - Available models: {"models": [{"name": "qwen3:0.6b", "model": "qwen3:0.6b", "modified_at": "2025-05-08T01:27:52.753829715+08:00", "size": 522653526, "digest": "3bae9c93586b27bedaa979979733c2b0edd1d0defc745e9638f2161192a0ccf0", "details": {"parent_model": "", "format": "gguf", "family": "qwen3", "families": ["qwen3"], "parameter_size": "751.63M", "quantization_level": "Q4_K_M"}}]}
2025-06-09 21:23:12,387 - __main__ - INFO - Sending request to Ollama: {"model": "qwen3:0.6b", "prompt": "请将以下债券交易文本解析为JSON格式，只返回JSON对象，不要包含其他文字说明：\n            250001.IB 25国债01 买入 *1000万 3.6% \n            \n            需要提取的字段：\n            - assetCode: 债券代码\n            - assetName: 债券名称\n            - trdSide: 交易方向（买入/卖出）\n            - amount: 交易金额（数字）\n            - rate: 利率（数字）\n            - amountReqFlag: 金额是否需请示（布尔值，当金额前有*号时为true）\n            - rateReqFlag: 利率是否需请示（布尔值，当利率前有*号时为true）\n            \n            ", "stream": false}
2025-06-09 21:23:22,022 - __main__ - INFO - Received response from Ollama: {"model": "qwen3:0.6b", "created_at": "2025-06-09T13:23:22.016125Z", "response": "<think>\n好的，我现在需要处理用户的请求，把给定的债券交易文本解析成JSON格式。首先，我要仔细阅读用户提供的文本和要求的字段。用户给出的例子是：“250001.IB 25国债01 买入 *1000万 3.6%”，并要求提取资产代码、名称、交易方向、金额、利率、金额请示标志和利率请示标志。\n\n首先，我要确定每个字段对应的正确值。资产代码是“250001.IB”，名称应该是“25国债01”。交易方向是“买入”。金额是1000万，这里要注意数字的格式，用户可能希望金额是数字类型，所以直接写成10000000。利率是3.6%，需要检查是否有请示标志，这里金额前有*，所以amountReqFlag是true。利率前没有*，所以rateReqFlag是false。\n\n接下来要确保所有字段都正确提取，并且没有多余的文字说明。用户特别指出不要包含其他文字，所以必须严格按照要求生成JSON对象，不需要任何解释。检查一遍是否有遗漏或格式错误，比如逗号的位置、引号的使用是否正确。确认所有字段都正确对应，然后输出最终的JSON。\n</think>\n\n{\n  \"assetCode\": \"250001.IB\",\n  \"assetName\": \"25国债01\",\n  \"trdSide\": \"买入\",\n  \"amount\": 10000000,\n  \"rate\": 3.6,\n  \"amountReqFlag\": true,\n  \"rateReqFlag\": false\n}", "done": true, "done_reason": "stop", "context": [151644, 872, 198, 14880, 44063, 87752, 104976, 99886, 108704, 106637, 17714, 5370, 68805, 3837, 91680, 31526, 5370, 64429, 3837, 100148, 102298, 92894, 87335, 66394, 28311, 310, 220, 17, 20, 15, 15, 15, 16, 2447, 33, 220, 17, 20, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 220, 18, 13, 21, 4, 83913, 310, 18137, 250, 222, 30534, 107439, 9370, 44931, 28311, 310, 481, 9329, 2078, 25, 4891, 222, 118, 100054, 46100, 198, 310, 481, 9329, 675, 25, 4891, 222, 118, 100054, 29991, 198, 310, 481, 489, 67, 16384, 25, 220, 99886, 100696, 9909, 108532, 14, 109430, 23083, 310, 481, 3311, 25, 220, 99886, 80094, 9909, 82587, 23083, 310, 481, 4379, 25, 19468, 102, 95355, 9909, 82587, 23083, 310, 481, 3311, 27234, 12135, 25, 220, 80094, 64471, 58362, 14880, 19793, 9909, 117661, 25511, 3837, 39165, 80094, 24562, 18830, 9, 17992, 13343, 17714, 1866, 23083, 310, 481, 4379, 27234, 12135, 25, 19468, 102, 95355, 64471, 58362, 14880, 19793, 9909, 117661, 25511, 3837, 39165, 102299, 24562, 18830, 9, 17992, 13343, 17714, 1866, 23083, 3374, 1797, 151645, 198, 151644, 77091, 198, 151667, 198, 99692, 3837, 107520, 85106, 54542, 107494, 34859, 3837, 99360, 89012, 22382, 9370, 104976, 99886, 108704, 106637, 12857, 5370, 68805, 1773, 101140, 3837, 104515, 104857, 101113, 20002, 103008, 108704, 33108, 101882, 9370, 44931, 1773, 20002, 107485, 111564, 20412, 36987, 17, 20, 15, 15, 15, 16, 2447, 33, 220, 17, 20, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 220, 18, 13, 21, 4, 33590, 62926, 101882, 107439, 99814, 46100, 5373, 29991, 5373, 99886, 100696, 5373, 80094, 5373, 102299, 5373, 80094, 14880, 19793, 101486, 33108, 102299, 14880, 19793, 101486, 3407, 101140, 3837, 104515, 60610, 103991, 44931, 110019, 88991, 25511, 1773, 99814, 46100, 20412, 2073, 17, 20, 15, 15, 15, 16, 2447, 33, 33590, 29991, 104583, 2073, 17, 20, 114418, 15, 16, 55807, 99886, 100696, 20412, 2073, 108532, 55807, 80094, 20412, 16, 15, 15, 15, 31207, 3837, 99817, 105213, 82587, 9370, 68805, 3837, 20002, 87267, 99880, 80094, 20412, 82587, 31905, 3837, 99999, 101041, 61443, 12857, 16, 15, 15, 15, 15, 15, 15, 15, 1773, 102299, 20412, 18, 13, 21, 69982, 85106, 101071, 107189, 14880, 19793, 101486, 3837, 99817, 80094, 24562, 18830, 9, 3837, 99999, 6045, 27234, 12135, 20412, 1866, 1773, 102299, 24562, 80443, 9, 3837, 99999, 7698, 27234, 12135, 20412, 3849, 3407, 104326, 30534, 103944, 55338, 44931, 71268, 88991, 107439, 90395, 100136, 80443, 115916, 109502, 66394, 1773, 20002, 100654, 103988, 100148, 102298, 92894, 87335, 3837, 99999, 100645, 110439, 101882, 43959, 5370, 64429, 3837, 104689, 99885, 104136, 1773, 101071, 107060, 107189, 114078, 57191, 68805, 32100, 3837, 101912, 107463, 17992, 104473, 5373, 72586, 17992, 9370, 37029, 64471, 88991, 1773, 81167, 55338, 44931, 71268, 88991, 103124, 3837, 101889, 66017, 103941, 9370, 5370, 8997, 151668, 271, 515, 220, 330, 9852, 2078, 788, 330, 17, 20, 15, 15, 15, 16, 2447, 33, 756, 220, 330, 9852, 675, 788, 330, 17, 20, 114418, 15, 16, 756, 220, 330, 376, 67, 16384, 788, 330, 108532, 756, 220, 330, 6045, 788, 220, 16, 15, 15, 15, 15, 15, 15, 15, 345, 220, 330, 7698, 788, 220, 18, 13, 21, 345, 220, 330, 6045, 27234, 12135, 788, 830, 345, 220, 330, 7698, 27234, 12135, 788, 895, 198, 92], "total_duration": 9623211808, "load_duration": 30682360, "prompt_eval_count": 180, "prompt_eval_duration": 26397084, "eval_count": 352, "eval_duration": 9565407528}
2025-06-09 21:23:22,023 - __main__ - INFO - Validating Ollama response: {"model": "qwen3:0.6b", "created_at": "2025-06-09T13:23:22.016125Z", "response": "<think>\n好的，我现在需要处理用户的请求，把给定的债券交易文本解析成JSON格式。首先，我要仔细阅读用户提供的文本和要求的字段。用户给出的例子是：“250001.IB 25国债01 买入 *1000万 3.6%”，并要求提取资产代码、名称、交易方向、金额、利率、金额请示标志和利率请示标志。\n\n首先，我要确定每个字段对应的正确值。资产代码是“250001.IB”，名称应该是“25国债01”。交易方向是“买入”。金额是1000万，这里要注意数字的格式，用户可能希望金额是数字类型，所以直接写成10000000。利率是3.6%，需要检查是否有请示标志，这里金额前有*，所以amountReqFlag是true。利率前没有*，所以rateReqFlag是false。\n\n接下来要确保所有字段都正确提取，并且没有多余的文字说明。用户特别指出不要包含其他文字，所以必须严格按照要求生成JSON对象，不需要任何解释。检查一遍是否有遗漏或格式错误，比如逗号的位置、引号的使用是否正确。确认所有字段都正确对应，然后输出最终的JSON。\n</think>\n\n{\n  \"assetCode\": \"250001.IB\",\n  \"assetName\": \"25国债01\",\n  \"trdSide\": \"买入\",\n  \"amount\": 10000000,\n  \"rate\": 3.6,\n  \"amountReqFlag\": true,\n  \"rateReqFlag\": false\n}", "done": true, "done_reason": "stop", "context": [151644, 872, 198, 14880, 44063, 87752, 104976, 99886, 108704, 106637, 17714, 5370, 68805, 3837, 91680, 31526, 5370, 64429, 3837, 100148, 102298, 92894, 87335, 66394, 28311, 310, 220, 17, 20, 15, 15, 15, 16, 2447, 33, 220, 17, 20, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 220, 18, 13, 21, 4, 83913, 310, 18137, 250, 222, 30534, 107439, 9370, 44931, 28311, 310, 481, 9329, 2078, 25, 4891, 222, 118, 100054, 46100, 198, 310, 481, 9329, 675, 25, 4891, 222, 118, 100054, 29991, 198, 310, 481, 489, 67, 16384, 25, 220, 99886, 100696, 9909, 108532, 14, 109430, 23083, 310, 481, 3311, 25, 220, 99886, 80094, 9909, 82587, 23083, 310, 481, 4379, 25, 19468, 102, 95355, 9909, 82587, 23083, 310, 481, 3311, 27234, 12135, 25, 220, 80094, 64471, 58362, 14880, 19793, 9909, 117661, 25511, 3837, 39165, 80094, 24562, 18830, 9, 17992, 13343, 17714, 1866, 23083, 310, 481, 4379, 27234, 12135, 25, 19468, 102, 95355, 64471, 58362, 14880, 19793, 9909, 117661, 25511, 3837, 39165, 102299, 24562, 18830, 9, 17992, 13343, 17714, 1866, 23083, 3374, 1797, 151645, 198, 151644, 77091, 198, 151667, 198, 99692, 3837, 107520, 85106, 54542, 107494, 34859, 3837, 99360, 89012, 22382, 9370, 104976, 99886, 108704, 106637, 12857, 5370, 68805, 1773, 101140, 3837, 104515, 104857, 101113, 20002, 103008, 108704, 33108, 101882, 9370, 44931, 1773, 20002, 107485, 111564, 20412, 36987, 17, 20, 15, 15, 15, 16, 2447, 33, 220, 17, 20, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 220, 18, 13, 21, 4, 33590, 62926, 101882, 107439, 99814, 46100, 5373, 29991, 5373, 99886, 100696, 5373, 80094, 5373, 102299, 5373, 80094, 14880, 19793, 101486, 33108, 102299, 14880, 19793, 101486, 3407, 101140, 3837, 104515, 60610, 103991, 44931, 110019, 88991, 25511, 1773, 99814, 46100, 20412, 2073, 17, 20, 15, 15, 15, 16, 2447, 33, 33590, 29991, 104583, 2073, 17, 20, 114418, 15, 16, 55807, 99886, 100696, 20412, 2073, 108532, 55807, 80094, 20412, 16, 15, 15, 15, 31207, 3837, 99817, 105213, 82587, 9370, 68805, 3837, 20002, 87267, 99880, 80094, 20412, 82587, 31905, 3837, 99999, 101041, 61443, 12857, 16, 15, 15, 15, 15, 15, 15, 15, 1773, 102299, 20412, 18, 13, 21, 69982, 85106, 101071, 107189, 14880, 19793, 101486, 3837, 99817, 80094, 24562, 18830, 9, 3837, 99999, 6045, 27234, 12135, 20412, 1866, 1773, 102299, 24562, 80443, 9, 3837, 99999, 7698, 27234, 12135, 20412, 3849, 3407, 104326, 30534, 103944, 55338, 44931, 71268, 88991, 107439, 90395, 100136, 80443, 115916, 109502, 66394, 1773, 20002, 100654, 103988, 100148, 102298, 92894, 87335, 3837, 99999, 100645, 110439, 101882, 43959, 5370, 64429, 3837, 104689, 99885, 104136, 1773, 101071, 107060, 107189, 114078, 57191, 68805, 32100, 3837, 101912, 107463, 17992, 104473, 5373, 72586, 17992, 9370, 37029, 64471, 88991, 1773, 81167, 55338, 44931, 71268, 88991, 103124, 3837, 101889, 66017, 103941, 9370, 5370, 8997, 151668, 271, 515, 220, 330, 9852, 2078, 788, 330, 17, 20, 15, 15, 15, 16, 2447, 33, 756, 220, 330, 9852, 675, 788, 330, 17, 20, 114418, 15, 16, 756, 220, 330, 376, 67, 16384, 788, 330, 108532, 756, 220, 330, 6045, 788, 220, 16, 15, 15, 15, 15, 15, 15, 15, 345, 220, 330, 7698, 788, 220, 18, 13, 21, 345, 220, 330, 6045, 27234, 12135, 788, 830, 345, 220, 330, 7698, 27234, 12135, 788, 895, 198, 92], "total_duration": 9623211808, "load_duration": 30682360, "prompt_eval_count": 180, "prompt_eval_duration": 26397084, "eval_count": 352, "eval_duration": 9565407528}
2025-06-09 21:23:22,023 - __main__ - INFO - Raw model response: <think>
好的，我现在需要处理用户的请求，把给定的债券交易文本解析成JSON格式。首先，我要仔细阅读用户提供的文本和要求的字段。用户给出的例子是：“250001.IB 25国债01 买入 *1000万 3.6%”，并要求提取资产代码、名称、交易方向、金额、利率、金额请示标志和利率请示标志。

首先，我要确定每个字段对应的正确值。资产代码是“250001.IB”，名称应该是“25国债01”。交易方向是“买入”。金额是1000万，这里要注意数字的格式，用户可能希望金额是数字类型，所以直接写成10000000。利率是3.6%，需要检查是否有请示标志，这里金额前有*，所以amountReqFlag是true。利率前没有*，所以rateReqFlag是false。

接下来要确保所有字段都正确提取，并且没有多余的文字说明。用户特别指出不要包含其他文字，所以必须严格按照要求生成JSON对象，不需要任何解释。检查一遍是否有遗漏或格式错误，比如逗号的位置、引号的使用是否正确。确认所有字段都正确对应，然后输出最终的JSON。
</think>

{
  "assetCode": "250001.IB",
  "assetName": "25国债01",
  "trdSide": "买入",
  "amount": 10000000,
  "rate": 3.6,
  "amountReqFlag": true,
  "rateReqFlag": false
}
2025-06-09 21:23:22,024 - __main__ - ERROR - JSON decode error: Expecting value: line 1 column 1 (char 0)
2025-06-09 21:23:22,024 - __main__ - INFO - Extracted JSON string: {
  "assetCode": "250001.IB",
  "assetName": "25国债01",
  "trdSide": "买入",
  "amount": 10000000,
  "rate": 3.6,
  "amountReqFlag": true,
  "rateReqFlag": false
}
2025-06-09 21:23:22,024 - __main__ - INFO - Successfully parsed bond data: {'assetCode': '250001.IB', 'assetName': '25国债01', 'trdSide': '买入', 'amount': 10000000, 'rate': 3.6, 'amountReqFlag': True, 'rateReqFlag': False}
2025-06-09 21:23:22,026 - __main__ - INFO - Successfully validated and returned parsed data: assetCode='250001.IB' assetName='25国债01' trdSide='买入' amount=10000000.0 rate=3.6 amountReqFlag=True rateReqFlag=False
2025-06-09 21:23:26,447 - __main__ - INFO - Received request to parse bond text: 250001.IB 25国债01 买入 *1000万 3.6% 
2025-06-09 21:23:26,464 - __main__ - INFO - Calling Ollama model with text: 250001.IB 25国债01 买入 *1000万 3.6% 
2025-06-09 21:23:26,474 - __main__ - INFO - Ollama service is available
2025-06-09 21:23:26,496 - __main__ - INFO - Available models: {"models": [{"name": "qwen3:0.6b", "model": "qwen3:0.6b", "modified_at": "2025-05-08T01:27:52.753829715+08:00", "size": 522653526, "digest": "3bae9c93586b27bedaa979979733c2b0edd1d0defc745e9638f2161192a0ccf0", "details": {"parent_model": "", "format": "gguf", "family": "qwen3", "families": ["qwen3"], "parameter_size": "751.63M", "quantization_level": "Q4_K_M"}}]}
2025-06-09 21:23:26,512 - __main__ - INFO - Sending request to Ollama: {"model": "qwen3:0.6b", "prompt": "请将以下债券交易文本解析为JSON格式，只返回JSON对象，不要包含其他文字说明：\n            250001.IB 25国债01 买入 *1000万 3.6% \n            \n            需要提取的字段：\n            - assetCode: 债券代码\n            - assetName: 债券名称\n            - trdSide: 交易方向（买入/卖出）\n            - amount: 交易金额（数字）\n            - rate: 利率（数字）\n            - amountReqFlag: 金额是否需请示（布尔值，当金额前有*号时为true）\n            - rateReqFlag: 利率是否需请示（布尔值，当利率前有*号时为true）\n            \n            ", "stream": false}
2025-06-09 21:23:40,085 - __main__ - INFO - Received response from Ollama: {"model": "qwen3:0.6b", "created_at": "2025-06-09T13:23:40.075724Z", "response": "<think>\n好的，我现在需要处理用户提供的债券交易文本，并将其解析为JSON格式。首先，我要仔细阅读用户提供的文本，确保理解每个字段的含义。\n\n用户给出的文本是：“250001.IB 25国债01 买入 *1000万 3.6%”。接下来，我需要提取出指定的字段。首先，assetCode应该是债券代码，这里看起来是“250001.IB 25国债01”，但用户可能希望去掉中间的空格，所以可能需要调整为“250001IB 25国债01”。不过用户提供的文本可能已经有这个，所以直接提取即可，可能不需要调整，但需要确认是否有其他信息。\n\n然后，assetName是债券名称，这里应该是“25国债01”。接下来是trdSide，用户提到是“买入”，所以填“买入”。amount是1000万，需要转换为数字，但用户可能希望保留原始数字，所以直接写“1000万”或者用数字形式，但根据用户要求，可能需要用数字格式，所以应该是“10000000”。\n\nrate是3.6%，所以填“3.6%”。amountReqFlag是布尔值，因为金额前有*号，所以是true。rateReqFlag是布尔值，因为利率前有%号，所以也是true。需要确保所有字段都正确对应，并且没有多余的信息。\n\n检查一遍，确认每个字段是否都正确提取。资产代码可能需要去掉逗号，但用户可能已经包含，所以直接提取。没有其他字段需要处理，所以最终的JSON对象应该包含所有必要字段，并且符合用户的要求。\n</think>\n\n{\n  \"assetCode\": \"250001IB 25国债01\",\n  \"assetName\": \"25国债01\",\n  \"trdSide\": \"买入\",\n  \"amount\": 10000000,\n  \"rate\": 3.6,\n  \"amountReqFlag\": true,\n  \"rateReqFlag\": true\n}", "done": true, "done_reason": "stop", "context": [151644, 872, 198, 14880, 44063, 87752, 104976, 99886, 108704, 106637, 17714, 5370, 68805, 3837, 91680, 31526, 5370, 64429, 3837, 100148, 102298, 92894, 87335, 66394, 28311, 310, 220, 17, 20, 15, 15, 15, 16, 2447, 33, 220, 17, 20, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 220, 18, 13, 21, 4, 83913, 310, 18137, 250, 222, 30534, 107439, 9370, 44931, 28311, 310, 481, 9329, 2078, 25, 4891, 222, 118, 100054, 46100, 198, 310, 481, 9329, 675, 25, 4891, 222, 118, 100054, 29991, 198, 310, 481, 489, 67, 16384, 25, 220, 99886, 100696, 9909, 108532, 14, 109430, 23083, 310, 481, 3311, 25, 220, 99886, 80094, 9909, 82587, 23083, 310, 481, 4379, 25, 19468, 102, 95355, 9909, 82587, 23083, 310, 481, 3311, 27234, 12135, 25, 220, 80094, 64471, 58362, 14880, 19793, 9909, 117661, 25511, 3837, 39165, 80094, 24562, 18830, 9, 17992, 13343, 17714, 1866, 23083, 310, 481, 4379, 27234, 12135, 25, 19468, 102, 95355, 64471, 58362, 14880, 19793, 9909, 117661, 25511, 3837, 39165, 102299, 24562, 18830, 9, 17992, 13343, 17714, 1866, 23083, 3374, 1797, 151645, 198, 151644, 77091, 198, 151667, 198, 99692, 3837, 107520, 85106, 54542, 20002, 103008, 104976, 99886, 108704, 90395, 105278, 106637, 17714, 5370, 68805, 1773, 101140, 3837, 104515, 104857, 101113, 20002, 103008, 108704, 3837, 103944, 101128, 103991, 44931, 9370, 109091, 3407, 20002, 107485, 9370, 108704, 20412, 36987, 17, 20, 15, 15, 15, 16, 2447, 33, 220, 17, 20, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 220, 18, 13, 21, 4, 55807, 104326, 3837, 35946, 85106, 107439, 20221, 105146, 9370, 44931, 1773, 101140, 3837, 9852, 2078, 104583, 104976, 46100, 3837, 99817, 104544, 20412, 2073, 17, 20, 15, 15, 15, 16, 2447, 33, 220, 17, 20, 114418, 15, 16, 33590, 77288, 20002, 87267, 99880, 115600, 104399, 9370, 34794, 33983, 3837, 99999, 87267, 85106, 101921, 17714, 2073, 17, 20, 15, 15, 15, 16, 3256, 220, 17, 20, 114418, 15, 16, 55807, 100632, 20002, 103008, 108704, 87267, 108489, 99487, 3837, 99999, 101041, 107439, 104180, 3837, 87267, 104689, 101921, 3837, 77288, 85106, 81167, 107189, 92894, 27369, 3407, 101889, 3837, 9852, 675, 20412, 104976, 29991, 3837, 99817, 104583, 2073, 17, 20, 114418, 15, 16, 55807, 104326, 20412, 376, 67, 16384, 3837, 20002, 104496, 20412, 2073, 108532, 33590, 99999, 68756, 2073, 108532, 55807, 6045, 20412, 16, 15, 15, 15, 31207, 3837, 85106, 105359, 17714, 82587, 3837, 77288, 20002, 87267, 99880, 104465, 105966, 82587, 3837, 99999, 101041, 61443, 2073, 16, 15, 15, 15, 31207, 854, 100631, 11622, 82587, 100414, 3837, 77288, 100345, 20002, 101882, 3837, 87267, 118976, 82587, 68805, 3837, 99999, 104583, 2073, 16, 15, 15, 15, 15, 15, 15, 15, 96332, 7698, 20412, 18, 13, 21, 69982, 99999, 68756, 2073, 18, 13, 21, 4, 55807, 6045, 27234, 12135, 20412, 117661, 25511, 3837, 99519, 80094, 24562, 18830, 9, 17992, 3837, 99999, 20412, 1866, 1773, 7698, 27234, 12135, 20412, 117661, 25511, 3837, 99519, 102299, 24562, 18830, 4, 17992, 3837, 99999, 100000, 1866, 1773, 85106, 103944, 55338, 44931, 71268, 88991, 103124, 90395, 100136, 80443, 115916, 105427, 3407, 101071, 107060, 3837, 81167, 103991, 44931, 64471, 71268, 88991, 107439, 1773, 99814, 46100, 87267, 85106, 115600, 107463, 17992, 3837, 77288, 20002, 87267, 99461, 102298, 3837, 99999, 101041, 107439, 1773, 80443, 92894, 44931, 85106, 54542, 3837, 99999, 103941, 9370, 5370, 64429, 99730, 102298, 55338, 100270, 44931, 90395, 100136, 101137, 20002, 104272, 8997, 151668, 271, 515, 220, 330, 9852, 2078, 788, 330, 17, 20, 15, 15, 15, 16, 3256, 220, 17, 20, 114418, 15, 16, 756, 220, 330, 9852, 675, 788, 330, 17, 20, 114418, 15, 16, 756, 220, 330, 376, 67, 16384, 788, 330, 108532, 756, 220, 330, 6045, 788, 220, 16, 15, 15, 15, 15, 15, 15, 15, 345, 220, 330, 7698, 788, 220, 18, 13, 21, 345, 220, 330, 6045, 27234, 12135, 788, 830, 345, 220, 330, 7698, 27234, 12135, 788, 830, 198, 92], "total_duration": 13556185286, "load_duration": 26030287, "prompt_eval_count": 180, "prompt_eval_duration": 28253490, "eval_count": 451, "eval_duration": 13501060505}
2025-06-09 21:23:40,086 - __main__ - INFO - Validating Ollama response: {"model": "qwen3:0.6b", "created_at": "2025-06-09T13:23:40.075724Z", "response": "<think>\n好的，我现在需要处理用户提供的债券交易文本，并将其解析为JSON格式。首先，我要仔细阅读用户提供的文本，确保理解每个字段的含义。\n\n用户给出的文本是：“250001.IB 25国债01 买入 *1000万 3.6%”。接下来，我需要提取出指定的字段。首先，assetCode应该是债券代码，这里看起来是“250001.IB 25国债01”，但用户可能希望去掉中间的空格，所以可能需要调整为“250001IB 25国债01”。不过用户提供的文本可能已经有这个，所以直接提取即可，可能不需要调整，但需要确认是否有其他信息。\n\n然后，assetName是债券名称，这里应该是“25国债01”。接下来是trdSide，用户提到是“买入”，所以填“买入”。amount是1000万，需要转换为数字，但用户可能希望保留原始数字，所以直接写“1000万”或者用数字形式，但根据用户要求，可能需要用数字格式，所以应该是“10000000”。\n\nrate是3.6%，所以填“3.6%”。amountReqFlag是布尔值，因为金额前有*号，所以是true。rateReqFlag是布尔值，因为利率前有%号，所以也是true。需要确保所有字段都正确对应，并且没有多余的信息。\n\n检查一遍，确认每个字段是否都正确提取。资产代码可能需要去掉逗号，但用户可能已经包含，所以直接提取。没有其他字段需要处理，所以最终的JSON对象应该包含所有必要字段，并且符合用户的要求。\n</think>\n\n{\n  \"assetCode\": \"250001IB 25国债01\",\n  \"assetName\": \"25国债01\",\n  \"trdSide\": \"买入\",\n  \"amount\": 10000000,\n  \"rate\": 3.6,\n  \"amountReqFlag\": true,\n  \"rateReqFlag\": true\n}", "done": true, "done_reason": "stop", "context": [151644, 872, 198, 14880, 44063, 87752, 104976, 99886, 108704, 106637, 17714, 5370, 68805, 3837, 91680, 31526, 5370, 64429, 3837, 100148, 102298, 92894, 87335, 66394, 28311, 310, 220, 17, 20, 15, 15, 15, 16, 2447, 33, 220, 17, 20, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 220, 18, 13, 21, 4, 83913, 310, 18137, 250, 222, 30534, 107439, 9370, 44931, 28311, 310, 481, 9329, 2078, 25, 4891, 222, 118, 100054, 46100, 198, 310, 481, 9329, 675, 25, 4891, 222, 118, 100054, 29991, 198, 310, 481, 489, 67, 16384, 25, 220, 99886, 100696, 9909, 108532, 14, 109430, 23083, 310, 481, 3311, 25, 220, 99886, 80094, 9909, 82587, 23083, 310, 481, 4379, 25, 19468, 102, 95355, 9909, 82587, 23083, 310, 481, 3311, 27234, 12135, 25, 220, 80094, 64471, 58362, 14880, 19793, 9909, 117661, 25511, 3837, 39165, 80094, 24562, 18830, 9, 17992, 13343, 17714, 1866, 23083, 310, 481, 4379, 27234, 12135, 25, 19468, 102, 95355, 64471, 58362, 14880, 19793, 9909, 117661, 25511, 3837, 39165, 102299, 24562, 18830, 9, 17992, 13343, 17714, 1866, 23083, 3374, 1797, 151645, 198, 151644, 77091, 198, 151667, 198, 99692, 3837, 107520, 85106, 54542, 20002, 103008, 104976, 99886, 108704, 90395, 105278, 106637, 17714, 5370, 68805, 1773, 101140, 3837, 104515, 104857, 101113, 20002, 103008, 108704, 3837, 103944, 101128, 103991, 44931, 9370, 109091, 3407, 20002, 107485, 9370, 108704, 20412, 36987, 17, 20, 15, 15, 15, 16, 2447, 33, 220, 17, 20, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 220, 18, 13, 21, 4, 55807, 104326, 3837, 35946, 85106, 107439, 20221, 105146, 9370, 44931, 1773, 101140, 3837, 9852, 2078, 104583, 104976, 46100, 3837, 99817, 104544, 20412, 2073, 17, 20, 15, 15, 15, 16, 2447, 33, 220, 17, 20, 114418, 15, 16, 33590, 77288, 20002, 87267, 99880, 115600, 104399, 9370, 34794, 33983, 3837, 99999, 87267, 85106, 101921, 17714, 2073, 17, 20, 15, 15, 15, 16, 3256, 220, 17, 20, 114418, 15, 16, 55807, 100632, 20002, 103008, 108704, 87267, 108489, 99487, 3837, 99999, 101041, 107439, 104180, 3837, 87267, 104689, 101921, 3837, 77288, 85106, 81167, 107189, 92894, 27369, 3407, 101889, 3837, 9852, 675, 20412, 104976, 29991, 3837, 99817, 104583, 2073, 17, 20, 114418, 15, 16, 55807, 104326, 20412, 376, 67, 16384, 3837, 20002, 104496, 20412, 2073, 108532, 33590, 99999, 68756, 2073, 108532, 55807, 6045, 20412, 16, 15, 15, 15, 31207, 3837, 85106, 105359, 17714, 82587, 3837, 77288, 20002, 87267, 99880, 104465, 105966, 82587, 3837, 99999, 101041, 61443, 2073, 16, 15, 15, 15, 31207, 854, 100631, 11622, 82587, 100414, 3837, 77288, 100345, 20002, 101882, 3837, 87267, 118976, 82587, 68805, 3837, 99999, 104583, 2073, 16, 15, 15, 15, 15, 15, 15, 15, 96332, 7698, 20412, 18, 13, 21, 69982, 99999, 68756, 2073, 18, 13, 21, 4, 55807, 6045, 27234, 12135, 20412, 117661, 25511, 3837, 99519, 80094, 24562, 18830, 9, 17992, 3837, 99999, 20412, 1866, 1773, 7698, 27234, 12135, 20412, 117661, 25511, 3837, 99519, 102299, 24562, 18830, 4, 17992, 3837, 99999, 100000, 1866, 1773, 85106, 103944, 55338, 44931, 71268, 88991, 103124, 90395, 100136, 80443, 115916, 105427, 3407, 101071, 107060, 3837, 81167, 103991, 44931, 64471, 71268, 88991, 107439, 1773, 99814, 46100, 87267, 85106, 115600, 107463, 17992, 3837, 77288, 20002, 87267, 99461, 102298, 3837, 99999, 101041, 107439, 1773, 80443, 92894, 44931, 85106, 54542, 3837, 99999, 103941, 9370, 5370, 64429, 99730, 102298, 55338, 100270, 44931, 90395, 100136, 101137, 20002, 104272, 8997, 151668, 271, 515, 220, 330, 9852, 2078, 788, 330, 17, 20, 15, 15, 15, 16, 3256, 220, 17, 20, 114418, 15, 16, 756, 220, 330, 9852, 675, 788, 330, 17, 20, 114418, 15, 16, 756, 220, 330, 376, 67, 16384, 788, 330, 108532, 756, 220, 330, 6045, 788, 220, 16, 15, 15, 15, 15, 15, 15, 15, 345, 220, 330, 7698, 788, 220, 18, 13, 21, 345, 220, 330, 6045, 27234, 12135, 788, 830, 345, 220, 330, 7698, 27234, 12135, 788, 830, 198, 92], "total_duration": 13556185286, "load_duration": 26030287, "prompt_eval_count": 180, "prompt_eval_duration": 28253490, "eval_count": 451, "eval_duration": 13501060505}
2025-06-09 21:23:40,087 - __main__ - INFO - Raw model response: <think>
好的，我现在需要处理用户提供的债券交易文本，并将其解析为JSON格式。首先，我要仔细阅读用户提供的文本，确保理解每个字段的含义。

用户给出的文本是：“250001.IB 25国债01 买入 *1000万 3.6%”。接下来，我需要提取出指定的字段。首先，assetCode应该是债券代码，这里看起来是“250001.IB 25国债01”，但用户可能希望去掉中间的空格，所以可能需要调整为“250001IB 25国债01”。不过用户提供的文本可能已经有这个，所以直接提取即可，可能不需要调整，但需要确认是否有其他信息。

然后，assetName是债券名称，这里应该是“25国债01”。接下来是trdSide，用户提到是“买入”，所以填“买入”。amount是1000万，需要转换为数字，但用户可能希望保留原始数字，所以直接写“1000万”或者用数字形式，但根据用户要求，可能需要用数字格式，所以应该是“10000000”。

rate是3.6%，所以填“3.6%”。amountReqFlag是布尔值，因为金额前有*号，所以是true。rateReqFlag是布尔值，因为利率前有%号，所以也是true。需要确保所有字段都正确对应，并且没有多余的信息。

检查一遍，确认每个字段是否都正确提取。资产代码可能需要去掉逗号，但用户可能已经包含，所以直接提取。没有其他字段需要处理，所以最终的JSON对象应该包含所有必要字段，并且符合用户的要求。
</think>

{
  "assetCode": "250001IB 25国债01",
  "assetName": "25国债01",
  "trdSide": "买入",
  "amount": 10000000,
  "rate": 3.6,
  "amountReqFlag": true,
  "rateReqFlag": true
}
2025-06-09 21:23:40,087 - __main__ - ERROR - JSON decode error: Expecting value: line 1 column 1 (char 0)
2025-06-09 21:23:40,087 - __main__ - INFO - Extracted JSON string: {
  "assetCode": "250001IB 25国债01",
  "assetName": "25国债01",
  "trdSide": "买入",
  "amount": 10000000,
  "rate": 3.6,
  "amountReqFlag": true,
  "rateReqFlag": true
}
2025-06-09 21:23:40,088 - __main__ - INFO - Successfully parsed bond data: {'assetCode': '250001IB 25国债01', 'assetName': '25国债01', 'trdSide': '买入', 'amount': 10000000, 'rate': 3.6, 'amountReqFlag': True, 'rateReqFlag': True}
2025-06-09 21:23:40,089 - __main__ - INFO - Successfully validated and returned parsed data: assetCode='250001IB 25国债01' assetName='25国债01' trdSide='买入' amount=10000000.0 rate=3.6 amountReqFlag=True rateReqFlag=True
2025-06-09 21:23:42,920 - __main__ - INFO - Received request to parse bond text: 250001.IB 25国债01 买入 *1000万 3.6% 
2025-06-09 21:23:42,938 - __main__ - INFO - Calling Ollama model with text: 250001.IB 25国债01 买入 *1000万 3.6% 
2025-06-09 21:23:42,948 - __main__ - INFO - Ollama service is available
2025-06-09 21:23:42,958 - __main__ - INFO - Available models: {"models": [{"name": "qwen3:0.6b", "model": "qwen3:0.6b", "modified_at": "2025-05-08T01:27:52.753829715+08:00", "size": 522653526, "digest": "3bae9c93586b27bedaa979979733c2b0edd1d0defc745e9638f2161192a0ccf0", "details": {"parent_model": "", "format": "gguf", "family": "qwen3", "families": ["qwen3"], "parameter_size": "751.63M", "quantization_level": "Q4_K_M"}}]}
2025-06-09 21:23:42,970 - __main__ - INFO - Sending request to Ollama: {"model": "qwen3:0.6b", "prompt": "请将以下债券交易文本解析为JSON格式，只返回JSON对象，不要包含其他文字说明：\n            250001.IB 25国债01 买入 *1000万 3.6% \n            \n            需要提取的字段：\n            - assetCode: 债券代码\n            - assetName: 债券名称\n            - trdSide: 交易方向（买入/卖出）\n            - amount: 交易金额（数字）\n            - rate: 利率（数字）\n            - amountReqFlag: 金额是否需请示（布尔值，当金额前有*号时为true）\n            - rateReqFlag: 利率是否需请示（布尔值，当利率前有*号时为true）\n            \n            ", "stream": false}
2025-06-09 21:23:56,600 - __main__ - INFO - Received response from Ollama: {"model": "qwen3:0.6b", "created_at": "2025-06-09T13:23:56.59485Z", "response": "<think>\n好的，我现在需要处理用户提供的债券交易文本，并将其解析为JSON格式。首先，我需要仔细阅读用户提供的文本，理解其中的信息，然后提取出指定的字段。\n\n用户提供的文本是：“250001.IB 25国债01 买入 *1000万 3.6%”。看起来这是一个债券交易的描述，包含多个字段。首先，我需要确定每个字段的值是什么。\n\n首先，assetCode应该是债券代码，这里用户给出的是“250001.IB 25国债01”，可能需要分开处理，但根据要求，只返回JSON对象，所以可能需要保留整个字符串作为assetCode吗？或者根据用户的要求，只提取具体字段，而不管整个文本？不过用户明确说只返回JSON对象，不要包含其他文字说明，所以可能需要将文本中的每个字段提取出来，但可能需要检查是否有其他字段需要包含。\n\n接下来，trdSide是买入，用户提到的交易方向是买入，所以直接提取即可。amount是1000万，这里用户提到的金额是*1000万，所以金额ReqFlag应该是true，因为金额前有*号。rate是3.6%，但需要检查是否有利率前有*，这里利率是3.6%，没有，所以rateReqFlag应该是false？\n\n然后，检查是否有其他字段需要提取。比如，amountReqFlag和rateReqFlag，根据用户的要求，这两个字段需要布尔值，当金额前有*时为true，利率前有*时为true。这里金额前有*，所以amountReqFlag是true，而利率前没有，所以rateReqFlag是false。这样，所有字段都正确提取了。\n\n现在，把这些信息组合成JSON对象，确保没有多余的内容。例如，键是assetCode、assetName、trdSide、amount、rate、amountReqFlag、rateReqFlag，对应的值分别对应各字段的内容。然后输出JSON，不包含任何其他说明文字。\n</think>\n\n{\"assetCode\":\"250001.IB 25国债01\",\"assetName\":\"25国债01\",\"trdSide\":\"买入\",\"amount\":\"10000000\",\"rate\":\"3.6\",\"amountReqFlag\":true,\"rateReqFlag\":false}", "done": true, "done_reason": "stop", "context": [151644, 872, 198, 14880, 44063, 87752, 104976, 99886, 108704, 106637, 17714, 5370, 68805, 3837, 91680, 31526, 5370, 64429, 3837, 100148, 102298, 92894, 87335, 66394, 28311, 310, 220, 17, 20, 15, 15, 15, 16, 2447, 33, 220, 17, 20, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 220, 18, 13, 21, 4, 83913, 310, 18137, 250, 222, 30534, 107439, 9370, 44931, 28311, 310, 481, 9329, 2078, 25, 4891, 222, 118, 100054, 46100, 198, 310, 481, 9329, 675, 25, 4891, 222, 118, 100054, 29991, 198, 310, 481, 489, 67, 16384, 25, 220, 99886, 100696, 9909, 108532, 14, 109430, 23083, 310, 481, 3311, 25, 220, 99886, 80094, 9909, 82587, 23083, 310, 481, 4379, 25, 19468, 102, 95355, 9909, 82587, 23083, 310, 481, 3311, 27234, 12135, 25, 220, 80094, 64471, 58362, 14880, 19793, 9909, 117661, 25511, 3837, 39165, 80094, 24562, 18830, 9, 17992, 13343, 17714, 1866, 23083, 310, 481, 4379, 27234, 12135, 25, 19468, 102, 95355, 64471, 58362, 14880, 19793, 9909, 117661, 25511, 3837, 39165, 102299, 24562, 18830, 9, 17992, 13343, 17714, 1866, 23083, 3374, 1797, 151645, 198, 151644, 77091, 198, 151667, 198, 99692, 3837, 107520, 85106, 54542, 20002, 103008, 104976, 99886, 108704, 90395, 105278, 106637, 17714, 5370, 68805, 1773, 101140, 3837, 35946, 85106, 104857, 101113, 20002, 103008, 108704, 3837, 101128, 90919, 105427, 3837, 101889, 107439, 20221, 105146, 9370, 44931, 3407, 20002, 103008, 108704, 20412, 36987, 17, 20, 15, 15, 15, 16, 2447, 33, 220, 17, 20, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 220, 18, 13, 21, 4, 55807, 104544, 105464, 104976, 99886, 9370, 53481, 3837, 102298, 101213, 44931, 1773, 101140, 3837, 35946, 85106, 60610, 103991, 44931, 9370, 25511, 102021, 3407, 101140, 3837, 9852, 2078, 104583, 104976, 46100, 3837, 99817, 20002, 107485, 100146, 2073, 17, 20, 15, 15, 15, 16, 2447, 33, 220, 17, 20, 114418, 15, 16, 33590, 87267, 85106, 107878, 54542, 3837, 77288, 100345, 101882, 3837, 91680, 31526, 5370, 64429, 3837, 99999, 87267, 85106, 104465, 101908, 66558, 100622, 9852, 2078, 101037, 11319, 100631, 100345, 20002, 104272, 3837, 91680, 107439, 100398, 44931, 3837, 68536, 101260, 101908, 108704, 11319, 100632, 20002, 100692, 36587, 91680, 31526, 5370, 64429, 3837, 100148, 102298, 92894, 87335, 66394, 3837, 99999, 87267, 85106, 44063, 108704, 101047, 103991, 44931, 107439, 99898, 3837, 77288, 87267, 85106, 101071, 107189, 92894, 44931, 85106, 102298, 3407, 104326, 3837, 376, 67, 16384, 20412, 108532, 3837, 20002, 104496, 9370, 99886, 100696, 20412, 108532, 3837, 99999, 101041, 107439, 104180, 1773, 6045, 20412, 16, 15, 15, 15, 31207, 3837, 99817, 20002, 104496, 9370, 80094, 20412, 9, 16, 15, 15, 15, 31207, 3837, 99999, 80094, 27234, 12135, 104583, 1866, 3837, 99519, 80094, 24562, 18830, 9, 17992, 1773, 7698, 20412, 18, 13, 21, 69982, 77288, 85106, 101071, 107189, 102299, 24562, 18830, 9, 3837, 99817, 102299, 20412, 18, 13, 21, 69982, 80443, 3837, 99999, 7698, 27234, 12135, 104583, 3849, 26850, 101889, 3837, 101071, 107189, 92894, 44931, 85106, 107439, 1773, 101912, 3837, 6045, 27234, 12135, 33108, 7698, 27234, 12135, 3837, 100345, 20002, 104272, 3837, 105932, 44931, 85106, 117661, 25511, 3837, 39165, 80094, 24562, 18830, 9, 13343, 17714, 1866, 3837, 102299, 24562, 18830, 9, 13343, 17714, 1866, 1773, 99817, 80094, 24562, 18830, 9, 3837, 99999, 6045, 27234, 12135, 20412, 1866, 3837, 68536, 102299, 24562, 80443, 3837, 99999, 7698, 27234, 12135, 20412, 3849, 1773, 99654, 3837, 55338, 44931, 71268, 88991, 107439, 34187, 3407, 99601, 3837, 113841, 27369, 101220, 12857, 5370, 64429, 3837, 103944, 80443, 115916, 104597, 1773, 77557, 3837, 60949, 20412, 9852, 2078, 5373, 9852, 675, 5373, 376, 67, 16384, 5373, 6045, 5373, 7698, 5373, 6045, 27234, 12135, 5373, 7698, 27234, 12135, 3837, 110019, 25511, 101127, 103124, 99200, 44931, 104597, 1773, 101889, 66017, 5370, 3837, 16530, 102298, 99885, 92894, 66394, 87335, 8997, 151668, 271, 4913, 9852, 2078, 3252, 17, 20, 15, 15, 15, 16, 2447, 33, 220, 17, 20, 114418, 15, 16, 2198, 9852, 675, 3252, 17, 20, 114418, 15, 16, 2198, 376, 67, 16384, 3252, 108532, 2198, 6045, 3252, 16, 15, 15, 15, 15, 15, 15, 15, 2198, 7698, 3252, 18, 13, 21, 2198, 6045, 27234, 12135, 788, 1866, 1335, 7698, 27234, 12135, 788, 3849, 92], "total_duration": 13615890999, "load_duration": 37263291, "prompt_eval_count": 180, "prompt_eval_duration": 29677680, "eval_count": 491, "eval_duration": 13547756730}
2025-06-09 21:23:56,601 - __main__ - INFO - Validating Ollama response: {"model": "qwen3:0.6b", "created_at": "2025-06-09T13:23:56.59485Z", "response": "<think>\n好的，我现在需要处理用户提供的债券交易文本，并将其解析为JSON格式。首先，我需要仔细阅读用户提供的文本，理解其中的信息，然后提取出指定的字段。\n\n用户提供的文本是：“250001.IB 25国债01 买入 *1000万 3.6%”。看起来这是一个债券交易的描述，包含多个字段。首先，我需要确定每个字段的值是什么。\n\n首先，assetCode应该是债券代码，这里用户给出的是“250001.IB 25国债01”，可能需要分开处理，但根据要求，只返回JSON对象，所以可能需要保留整个字符串作为assetCode吗？或者根据用户的要求，只提取具体字段，而不管整个文本？不过用户明确说只返回JSON对象，不要包含其他文字说明，所以可能需要将文本中的每个字段提取出来，但可能需要检查是否有其他字段需要包含。\n\n接下来，trdSide是买入，用户提到的交易方向是买入，所以直接提取即可。amount是1000万，这里用户提到的金额是*1000万，所以金额ReqFlag应该是true，因为金额前有*号。rate是3.6%，但需要检查是否有利率前有*，这里利率是3.6%，没有，所以rateReqFlag应该是false？\n\n然后，检查是否有其他字段需要提取。比如，amountReqFlag和rateReqFlag，根据用户的要求，这两个字段需要布尔值，当金额前有*时为true，利率前有*时为true。这里金额前有*，所以amountReqFlag是true，而利率前没有，所以rateReqFlag是false。这样，所有字段都正确提取了。\n\n现在，把这些信息组合成JSON对象，确保没有多余的内容。例如，键是assetCode、assetName、trdSide、amount、rate、amountReqFlag、rateReqFlag，对应的值分别对应各字段的内容。然后输出JSON，不包含任何其他说明文字。\n</think>\n\n{\"assetCode\":\"250001.IB 25国债01\",\"assetName\":\"25国债01\",\"trdSide\":\"买入\",\"amount\":\"10000000\",\"rate\":\"3.6\",\"amountReqFlag\":true,\"rateReqFlag\":false}", "done": true, "done_reason": "stop", "context": [151644, 872, 198, 14880, 44063, 87752, 104976, 99886, 108704, 106637, 17714, 5370, 68805, 3837, 91680, 31526, 5370, 64429, 3837, 100148, 102298, 92894, 87335, 66394, 28311, 310, 220, 17, 20, 15, 15, 15, 16, 2447, 33, 220, 17, 20, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 220, 18, 13, 21, 4, 83913, 310, 18137, 250, 222, 30534, 107439, 9370, 44931, 28311, 310, 481, 9329, 2078, 25, 4891, 222, 118, 100054, 46100, 198, 310, 481, 9329, 675, 25, 4891, 222, 118, 100054, 29991, 198, 310, 481, 489, 67, 16384, 25, 220, 99886, 100696, 9909, 108532, 14, 109430, 23083, 310, 481, 3311, 25, 220, 99886, 80094, 9909, 82587, 23083, 310, 481, 4379, 25, 19468, 102, 95355, 9909, 82587, 23083, 310, 481, 3311, 27234, 12135, 25, 220, 80094, 64471, 58362, 14880, 19793, 9909, 117661, 25511, 3837, 39165, 80094, 24562, 18830, 9, 17992, 13343, 17714, 1866, 23083, 310, 481, 4379, 27234, 12135, 25, 19468, 102, 95355, 64471, 58362, 14880, 19793, 9909, 117661, 25511, 3837, 39165, 102299, 24562, 18830, 9, 17992, 13343, 17714, 1866, 23083, 3374, 1797, 151645, 198, 151644, 77091, 198, 151667, 198, 99692, 3837, 107520, 85106, 54542, 20002, 103008, 104976, 99886, 108704, 90395, 105278, 106637, 17714, 5370, 68805, 1773, 101140, 3837, 35946, 85106, 104857, 101113, 20002, 103008, 108704, 3837, 101128, 90919, 105427, 3837, 101889, 107439, 20221, 105146, 9370, 44931, 3407, 20002, 103008, 108704, 20412, 36987, 17, 20, 15, 15, 15, 16, 2447, 33, 220, 17, 20, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 220, 18, 13, 21, 4, 55807, 104544, 105464, 104976, 99886, 9370, 53481, 3837, 102298, 101213, 44931, 1773, 101140, 3837, 35946, 85106, 60610, 103991, 44931, 9370, 25511, 102021, 3407, 101140, 3837, 9852, 2078, 104583, 104976, 46100, 3837, 99817, 20002, 107485, 100146, 2073, 17, 20, 15, 15, 15, 16, 2447, 33, 220, 17, 20, 114418, 15, 16, 33590, 87267, 85106, 107878, 54542, 3837, 77288, 100345, 101882, 3837, 91680, 31526, 5370, 64429, 3837, 99999, 87267, 85106, 104465, 101908, 66558, 100622, 9852, 2078, 101037, 11319, 100631, 100345, 20002, 104272, 3837, 91680, 107439, 100398, 44931, 3837, 68536, 101260, 101908, 108704, 11319, 100632, 20002, 100692, 36587, 91680, 31526, 5370, 64429, 3837, 100148, 102298, 92894, 87335, 66394, 3837, 99999, 87267, 85106, 44063, 108704, 101047, 103991, 44931, 107439, 99898, 3837, 77288, 87267, 85106, 101071, 107189, 92894, 44931, 85106, 102298, 3407, 104326, 3837, 376, 67, 16384, 20412, 108532, 3837, 20002, 104496, 9370, 99886, 100696, 20412, 108532, 3837, 99999, 101041, 107439, 104180, 1773, 6045, 20412, 16, 15, 15, 15, 31207, 3837, 99817, 20002, 104496, 9370, 80094, 20412, 9, 16, 15, 15, 15, 31207, 3837, 99999, 80094, 27234, 12135, 104583, 1866, 3837, 99519, 80094, 24562, 18830, 9, 17992, 1773, 7698, 20412, 18, 13, 21, 69982, 77288, 85106, 101071, 107189, 102299, 24562, 18830, 9, 3837, 99817, 102299, 20412, 18, 13, 21, 69982, 80443, 3837, 99999, 7698, 27234, 12135, 104583, 3849, 26850, 101889, 3837, 101071, 107189, 92894, 44931, 85106, 107439, 1773, 101912, 3837, 6045, 27234, 12135, 33108, 7698, 27234, 12135, 3837, 100345, 20002, 104272, 3837, 105932, 44931, 85106, 117661, 25511, 3837, 39165, 80094, 24562, 18830, 9, 13343, 17714, 1866, 3837, 102299, 24562, 18830, 9, 13343, 17714, 1866, 1773, 99817, 80094, 24562, 18830, 9, 3837, 99999, 6045, 27234, 12135, 20412, 1866, 3837, 68536, 102299, 24562, 80443, 3837, 99999, 7698, 27234, 12135, 20412, 3849, 1773, 99654, 3837, 55338, 44931, 71268, 88991, 107439, 34187, 3407, 99601, 3837, 113841, 27369, 101220, 12857, 5370, 64429, 3837, 103944, 80443, 115916, 104597, 1773, 77557, 3837, 60949, 20412, 9852, 2078, 5373, 9852, 675, 5373, 376, 67, 16384, 5373, 6045, 5373, 7698, 5373, 6045, 27234, 12135, 5373, 7698, 27234, 12135, 3837, 110019, 25511, 101127, 103124, 99200, 44931, 104597, 1773, 101889, 66017, 5370, 3837, 16530, 102298, 99885, 92894, 66394, 87335, 8997, 151668, 271, 4913, 9852, 2078, 3252, 17, 20, 15, 15, 15, 16, 2447, 33, 220, 17, 20, 114418, 15, 16, 2198, 9852, 675, 3252, 17, 20, 114418, 15, 16, 2198, 376, 67, 16384, 3252, 108532, 2198, 6045, 3252, 16, 15, 15, 15, 15, 15, 15, 15, 2198, 7698, 3252, 18, 13, 21, 2198, 6045, 27234, 12135, 788, 1866, 1335, 7698, 27234, 12135, 788, 3849, 92], "total_duration": 13615890999, "load_duration": 37263291, "prompt_eval_count": 180, "prompt_eval_duration": 29677680, "eval_count": 491, "eval_duration": 13547756730}
2025-06-09 21:23:56,601 - __main__ - INFO - Raw model response: <think>
好的，我现在需要处理用户提供的债券交易文本，并将其解析为JSON格式。首先，我需要仔细阅读用户提供的文本，理解其中的信息，然后提取出指定的字段。

用户提供的文本是：“250001.IB 25国债01 买入 *1000万 3.6%”。看起来这是一个债券交易的描述，包含多个字段。首先，我需要确定每个字段的值是什么。

首先，assetCode应该是债券代码，这里用户给出的是“250001.IB 25国债01”，可能需要分开处理，但根据要求，只返回JSON对象，所以可能需要保留整个字符串作为assetCode吗？或者根据用户的要求，只提取具体字段，而不管整个文本？不过用户明确说只返回JSON对象，不要包含其他文字说明，所以可能需要将文本中的每个字段提取出来，但可能需要检查是否有其他字段需要包含。

接下来，trdSide是买入，用户提到的交易方向是买入，所以直接提取即可。amount是1000万，这里用户提到的金额是*1000万，所以金额ReqFlag应该是true，因为金额前有*号。rate是3.6%，但需要检查是否有利率前有*，这里利率是3.6%，没有，所以rateReqFlag应该是false？

然后，检查是否有其他字段需要提取。比如，amountReqFlag和rateReqFlag，根据用户的要求，这两个字段需要布尔值，当金额前有*时为true，利率前有*时为true。这里金额前有*，所以amountReqFlag是true，而利率前没有，所以rateReqFlag是false。这样，所有字段都正确提取了。

现在，把这些信息组合成JSON对象，确保没有多余的内容。例如，键是assetCode、assetName、trdSide、amount、rate、amountReqFlag、rateReqFlag，对应的值分别对应各字段的内容。然后输出JSON，不包含任何其他说明文字。
</think>

{"assetCode":"250001.IB 25国债01","assetName":"25国债01","trdSide":"买入","amount":"10000000","rate":"3.6","amountReqFlag":true,"rateReqFlag":false}
2025-06-09 21:23:56,601 - __main__ - ERROR - JSON decode error: Expecting value: line 1 column 1 (char 0)
2025-06-09 21:23:56,601 - __main__ - INFO - Extracted JSON string: {"assetCode":"250001.IB 25国债01","assetName":"25国债01","trdSide":"买入","amount":"10000000","rate":"3.6","amountReqFlag":true,"rateReqFlag":false}
2025-06-09 21:23:56,601 - __main__ - INFO - Successfully parsed bond data: {'assetCode': '250001.IB 25国债01', 'assetName': '25国债01', 'trdSide': '买入', 'amount': '10000000', 'rate': '3.6', 'amountReqFlag': True, 'rateReqFlag': False}
2025-06-09 21:23:56,604 - __main__ - INFO - Successfully validated and returned parsed data: assetCode='250001.IB 25国债01' assetName='25国债01' trdSide='买入' amount=10000000.0 rate=3.6 amountReqFlag=True rateReqFlag=False
2025-06-09 21:25:28,479 - __main__ - INFO - Starting bond text parsing service...
2025-06-09 21:25:51,732 - __main__ - INFO - Received request to parse bond text: 250001.IB 25国债01 买入 *1000万 3.6% 
2025-06-09 21:25:51,741 - __main__ - INFO - Calling Ollama model with text: 250001.IB 25国债01 买入 *1000万 3.6% 
2025-06-09 21:25:51,775 - __main__ - INFO - Ollama service is available
2025-06-09 21:25:51,801 - __main__ - INFO - Available models: {"models": [{"name": "qwen3:0.6b", "model": "qwen3:0.6b", "modified_at": "2025-05-08T01:27:52.753829715+08:00", "size": 522653526, "digest": "3bae9c93586b27bedaa979979733c2b0edd1d0defc745e9638f2161192a0ccf0", "details": {"parent_model": "", "format": "gguf", "family": "qwen3", "families": ["qwen3"], "parameter_size": "751.63M", "quantization_level": "Q4_K_M"}}]}
2025-06-09 21:25:51,802 - __main__ - INFO - Sending request to Ollama: {"model": "qwen3:0.6b", "prompt": "请将以下债券交易文本解析为JSON格式，只返回JSON对象，不要包含其他文字说明：\n            250001.IB 25国债01 买入 *1000万 3.6% \n            \n            需要提取的字段：\n            - assetCode: 债券代码为含有 4 位数字及以上纯数字不包括（小数点，加号等任意特殊字符）且不能被100整除或者含有任一关键字 (.IB,.SH,.SZ等，该关键字支持配置)；\n            - assetName: 债券名称\n            - trdSide: 交易方向（买入/卖出）\n            - amount: 交易金额（数字）\n            - rate: 利率（数字）\n            - amountReqFlag: 金额是否需请示（布尔值，当金额前有*号时为true）\n            - rateReqFlag: 利率是否需请示（布尔值，当利率前有*号时为true）\n            \n            ", "stream": false}
2025-06-09 21:26:11,027 - __main__ - INFO - Received response from Ollama: {"model": "qwen3:0.6b", "created_at": "2025-06-09T13:26:11.018982Z", "response": "<think>\n好的，我现在需要处理用户提供的债券交易文本，并将其解析为JSON格式。首先，我得仔细阅读用户提供的文本，理解其中的内容，然后提取出指定的字段。\n\n用户提供的文本是：“250001.IB 25国债01 买入 *1000万 3.6%”。需要提取的字段包括assetCode、assetName、trdSide、amount、rate、amountReqFlag、rateReqFlag。我需要逐一检查这些字段是否符合要求，特别是注意资产代码的格式，以及金额和利率是否正确。\n\n首先，assetCode的要求是包含4位及以上纯数字，且不能被100整除，同时不能有特殊字符或小数点。原文本中的“250001”看起来是4位数字，但检查一下是否满足不能被100整除。250001除以100是2500.01，显然不是整数，所以这个符合条件。接下来是assetName，是“25国债01”，看起来是正确的，没有问题。\n\ntrdSide是买入，所以填入“买入”即可。\n\namount是*1000万，这里金额前有*，所以amountReqFlag是true。而amount的数值是1000万，所以amount应该是10000000，但用户可能希望用数字类型，所以直接写成1000万即可，但需要确认是否允许数字前有*，不过这里直接写10000000的话，是否正确？不过用户可能希望保留*符号，所以可能需要检查是否应该保留*，但根据要求，amount字段是数字，所以可能直接写1000万，但用户可能希望保留*，所以可能需要确认。不过根据用户提供的示例，可能直接写1000万，但需要看是否允许。但用户要求金额为数字，所以可能直接写1000万，但可能需要转换为整数，所以可能需要确认。不过用户可能希望保留*，所以可能写成10000000。\n\nrate是3.6%，所以rateReqFlag是true，因为利率前有*号。不过用户给的利率是3.6%，所以rate字段是3.6，所以rateReqFlag是true。\n\n现在把这些字段填入JSON对象，确保没有多余的文字说明。检查所有字段是否正确，特别是amountReqFlag和rateReqFlag是否正确设置。确认无误后，生成最终的JSON。\n</think>\n\n{\n  \"assetCode\": \"250001\",\n  \"assetName\": \"25国债01\",\n  \"trdSide\": \"买入\",\n  \"amount\": \"10000000\",\n  \"rate\": 3.6,\n  \"amountReqFlag\": true,\n  \"rateReqFlag\": true\n}", "done": true, "done_reason": "stop", "context": [151644, 872, 198, 14880, 44063, 87752, 104976, 99886, 108704, 106637, 17714, 5370, 68805, 3837, 91680, 31526, 5370, 64429, 3837, 100148, 102298, 92894, 87335, 66394, 28311, 310, 220, 17, 20, 15, 15, 15, 16, 2447, 33, 220, 17, 20, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 220, 18, 13, 21, 4, 83913, 310, 18137, 250, 222, 30534, 107439, 9370, 44931, 28311, 310, 481, 9329, 2078, 25, 4891, 222, 118, 100054, 46100, 17714, 102704, 220, 19, 220, 24156, 82587, 109887, 100073, 82587, 16530, 100630, 9909, 30709, 8863, 27442, 3837, 20929, 17992, 49567, 108112, 101167, 48391, 7552, 100136, 53153, 99250, 16, 15, 15, 63431, 20755, 100631, 102704, 48888, 14777, 118294, 29465, 3256, 17515, 8590, 17515, 61228, 49567, 3837, 75882, 118294, 100143, 85767, 8, 59217, 310, 481, 9329, 675, 25, 4891, 222, 118, 100054, 29991, 198, 310, 481, 489, 67, 16384, 25, 220, 99886, 100696, 9909, 108532, 14, 109430, 23083, 310, 481, 3311, 25, 220, 99886, 80094, 9909, 82587, 23083, 310, 481, 4379, 25, 19468, 102, 95355, 9909, 82587, 23083, 310, 481, 3311, 27234, 12135, 25, 220, 80094, 64471, 58362, 14880, 19793, 9909, 117661, 25511, 3837, 39165, 80094, 24562, 18830, 9, 17992, 13343, 17714, 1866, 23083, 310, 481, 4379, 27234, 12135, 25, 19468, 102, 95355, 64471, 58362, 14880, 19793, 9909, 117661, 25511, 3837, 39165, 102299, 24562, 18830, 9, 17992, 13343, 17714, 1866, 23083, 3374, 1797, 151645, 198, 151644, 77091, 198, 151667, 198, 99692, 3837, 107520, 85106, 54542, 20002, 103008, 104976, 99886, 108704, 90395, 105278, 106637, 17714, 5370, 68805, 1773, 101140, 3837, 35946, 49828, 104857, 101113, 20002, 103008, 108704, 3837, 101128, 90919, 104597, 3837, 101889, 107439, 20221, 105146, 9370, 44931, 3407, 20002, 103008, 108704, 20412, 36987, 17, 20, 15, 15, 15, 16, 2447, 33, 220, 17, 20, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 220, 18, 13, 21, 4, 55807, 85106, 107439, 9370, 44931, 100630, 9852, 2078, 5373, 9852, 675, 5373, 376, 67, 16384, 5373, 6045, 5373, 7698, 5373, 6045, 27234, 12135, 5373, 7698, 27234, 12135, 1773, 35946, 85106, 112707, 101071, 100001, 44931, 64471, 101137, 101882, 3837, 104050, 60533, 99814, 46100, 9370, 68805, 3837, 101034, 80094, 33108, 102299, 64471, 88991, 3407, 101140, 3837, 9852, 2078, 104272, 20412, 102298, 19, 24156, 109887, 100073, 82587, 3837, 100136, 53153, 99250, 16, 15, 15, 63431, 20755, 3837, 91572, 53153, 18830, 101167, 48391, 57191, 30709, 8863, 27442, 1773, 103283, 21894, 101047, 2073, 17, 20, 15, 15, 15, 16, 854, 104544, 20412, 19, 24156, 82587, 3837, 77288, 101071, 100158, 64471, 101929, 53153, 99250, 16, 15, 15, 63431, 20755, 1773, 17, 20, 15, 15, 15, 16, 20755, 23031, 16, 15, 15, 20412, 17, 20, 15, 15, 13, 15, 16, 3837, 105092, 99520, 63431, 8863, 3837, 99999, 99487, 113954, 1773, 104326, 20412, 9852, 675, 3837, 20412, 2073, 17, 20, 114418, 15, 16, 33590, 104544, 20412, 105045, 3837, 80443, 86119, 3407, 376, 67, 16384, 20412, 108532, 3837, 99999, 68756, 17254, 2073, 108532, 854, 104180, 3407, 6045, 20412, 9, 16, 15, 15, 15, 31207, 3837, 99817, 80094, 24562, 18830, 9, 3837, 99999, 6045, 27234, 12135, 20412, 1866, 1773, 68536, 6045, 9370, 111944, 20412, 16, 15, 15, 15, 31207, 3837, 99999, 6045, 104583, 16, 15, 15, 15, 15, 15, 15, 15, 3837, 77288, 20002, 87267, 99880, 11622, 82587, 31905, 3837, 99999, 101041, 61443, 12857, 16, 15, 15, 15, 31207, 104180, 3837, 77288, 85106, 81167, 64471, 102496, 82587, 24562, 18830, 9, 3837, 100632, 99817, 101041, 61443, 16, 15, 15, 15, 15, 15, 15, 15, 100363, 3837, 64471, 88991, 11319, 100632, 20002, 87267, 99880, 104465, 9, 108872, 3837, 99999, 87267, 85106, 101071, 64471, 99730, 104465, 9, 3837, 77288, 100345, 101882, 3837, 6045, 44931, 20412, 82587, 3837, 99999, 87267, 101041, 61443, 16, 15, 15, 15, 31207, 3837, 77288, 20002, 87267, 99880, 104465, 9, 3837, 99999, 87267, 85106, 81167, 1773, 100632, 100345, 20002, 103008, 19793, 26355, 3837, 87267, 101041, 61443, 16, 15, 15, 15, 31207, 3837, 77288, 85106, 50930, 64471, 102496, 1773, 77288, 20002, 101882, 80094, 17714, 82587, 3837, 99999, 87267, 101041, 61443, 16, 15, 15, 15, 31207, 3837, 77288, 87267, 85106, 105359, 17714, 63431, 8863, 3837, 99999, 87267, 85106, 81167, 1773, 100632, 20002, 87267, 99880, 104465, 9, 3837, 99999, 87267, 61443, 12857, 16, 15, 15, 15, 15, 15, 15, 15, 3407, 7698, 20412, 18, 13, 21, 69982, 99999, 7698, 27234, 12135, 20412, 1866, 3837, 99519, 102299, 24562, 18830, 9, 17992, 1773, 100632, 20002, 89012, 9370, 102299, 20412, 18, 13, 21, 69982, 99999, 7698, 44931, 20412, 18, 13, 21, 3837, 99999, 7698, 27234, 12135, 20412, 1866, 3407, 99601, 113841, 44931, 68756, 17254, 5370, 64429, 3837, 103944, 80443, 115916, 109502, 66394, 1773, 101071, 55338, 44931, 64471, 88991, 3837, 104050, 6045, 27234, 12135, 33108, 7698, 27234, 12135, 64471, 88991, 43918, 1773, 81167, 42192, 29056, 33447, 3837, 43959, 103941, 9370, 5370, 8997, 151668, 271, 515, 220, 330, 9852, 2078, 788, 330, 17, 20, 15, 15, 15, 16, 756, 220, 330, 9852, 675, 788, 330, 17, 20, 114418, 15, 16, 756, 220, 330, 376, 67, 16384, 788, 330, 108532, 756, 220, 330, 6045, 788, 330, 16, 15, 15, 15, 15, 15, 15, 15, 756, 220, 330, 7698, 788, 220, 18, 13, 21, 345, 220, 330, 6045, 27234, 12135, 788, 830, 345, 220, 330, 7698, 27234, 12135, 788, 830, 198, 92], "total_duration": 19209479560, "load_duration": 33638808, "prompt_eval_count": 230, "prompt_eval_duration": 1699912911, "eval_count": 625, "eval_duration": 17475136332}
2025-06-09 21:26:11,029 - __main__ - INFO - Validating Ollama response: {"model": "qwen3:0.6b", "created_at": "2025-06-09T13:26:11.018982Z", "response": "<think>\n好的，我现在需要处理用户提供的债券交易文本，并将其解析为JSON格式。首先，我得仔细阅读用户提供的文本，理解其中的内容，然后提取出指定的字段。\n\n用户提供的文本是：“250001.IB 25国债01 买入 *1000万 3.6%”。需要提取的字段包括assetCode、assetName、trdSide、amount、rate、amountReqFlag、rateReqFlag。我需要逐一检查这些字段是否符合要求，特别是注意资产代码的格式，以及金额和利率是否正确。\n\n首先，assetCode的要求是包含4位及以上纯数字，且不能被100整除，同时不能有特殊字符或小数点。原文本中的“250001”看起来是4位数字，但检查一下是否满足不能被100整除。250001除以100是2500.01，显然不是整数，所以这个符合条件。接下来是assetName，是“25国债01”，看起来是正确的，没有问题。\n\ntrdSide是买入，所以填入“买入”即可。\n\namount是*1000万，这里金额前有*，所以amountReqFlag是true。而amount的数值是1000万，所以amount应该是10000000，但用户可能希望用数字类型，所以直接写成1000万即可，但需要确认是否允许数字前有*，不过这里直接写10000000的话，是否正确？不过用户可能希望保留*符号，所以可能需要检查是否应该保留*，但根据要求，amount字段是数字，所以可能直接写1000万，但用户可能希望保留*，所以可能需要确认。不过根据用户提供的示例，可能直接写1000万，但需要看是否允许。但用户要求金额为数字，所以可能直接写1000万，但可能需要转换为整数，所以可能需要确认。不过用户可能希望保留*，所以可能写成10000000。\n\nrate是3.6%，所以rateReqFlag是true，因为利率前有*号。不过用户给的利率是3.6%，所以rate字段是3.6，所以rateReqFlag是true。\n\n现在把这些字段填入JSON对象，确保没有多余的文字说明。检查所有字段是否正确，特别是amountReqFlag和rateReqFlag是否正确设置。确认无误后，生成最终的JSON。\n</think>\n\n{\n  \"assetCode\": \"250001\",\n  \"assetName\": \"25国债01\",\n  \"trdSide\": \"买入\",\n  \"amount\": \"10000000\",\n  \"rate\": 3.6,\n  \"amountReqFlag\": true,\n  \"rateReqFlag\": true\n}", "done": true, "done_reason": "stop", "context": [151644, 872, 198, 14880, 44063, 87752, 104976, 99886, 108704, 106637, 17714, 5370, 68805, 3837, 91680, 31526, 5370, 64429, 3837, 100148, 102298, 92894, 87335, 66394, 28311, 310, 220, 17, 20, 15, 15, 15, 16, 2447, 33, 220, 17, 20, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 220, 18, 13, 21, 4, 83913, 310, 18137, 250, 222, 30534, 107439, 9370, 44931, 28311, 310, 481, 9329, 2078, 25, 4891, 222, 118, 100054, 46100, 17714, 102704, 220, 19, 220, 24156, 82587, 109887, 100073, 82587, 16530, 100630, 9909, 30709, 8863, 27442, 3837, 20929, 17992, 49567, 108112, 101167, 48391, 7552, 100136, 53153, 99250, 16, 15, 15, 63431, 20755, 100631, 102704, 48888, 14777, 118294, 29465, 3256, 17515, 8590, 17515, 61228, 49567, 3837, 75882, 118294, 100143, 85767, 8, 59217, 310, 481, 9329, 675, 25, 4891, 222, 118, 100054, 29991, 198, 310, 481, 489, 67, 16384, 25, 220, 99886, 100696, 9909, 108532, 14, 109430, 23083, 310, 481, 3311, 25, 220, 99886, 80094, 9909, 82587, 23083, 310, 481, 4379, 25, 19468, 102, 95355, 9909, 82587, 23083, 310, 481, 3311, 27234, 12135, 25, 220, 80094, 64471, 58362, 14880, 19793, 9909, 117661, 25511, 3837, 39165, 80094, 24562, 18830, 9, 17992, 13343, 17714, 1866, 23083, 310, 481, 4379, 27234, 12135, 25, 19468, 102, 95355, 64471, 58362, 14880, 19793, 9909, 117661, 25511, 3837, 39165, 102299, 24562, 18830, 9, 17992, 13343, 17714, 1866, 23083, 3374, 1797, 151645, 198, 151644, 77091, 198, 151667, 198, 99692, 3837, 107520, 85106, 54542, 20002, 103008, 104976, 99886, 108704, 90395, 105278, 106637, 17714, 5370, 68805, 1773, 101140, 3837, 35946, 49828, 104857, 101113, 20002, 103008, 108704, 3837, 101128, 90919, 104597, 3837, 101889, 107439, 20221, 105146, 9370, 44931, 3407, 20002, 103008, 108704, 20412, 36987, 17, 20, 15, 15, 15, 16, 2447, 33, 220, 17, 20, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 220, 18, 13, 21, 4, 55807, 85106, 107439, 9370, 44931, 100630, 9852, 2078, 5373, 9852, 675, 5373, 376, 67, 16384, 5373, 6045, 5373, 7698, 5373, 6045, 27234, 12135, 5373, 7698, 27234, 12135, 1773, 35946, 85106, 112707, 101071, 100001, 44931, 64471, 101137, 101882, 3837, 104050, 60533, 99814, 46100, 9370, 68805, 3837, 101034, 80094, 33108, 102299, 64471, 88991, 3407, 101140, 3837, 9852, 2078, 104272, 20412, 102298, 19, 24156, 109887, 100073, 82587, 3837, 100136, 53153, 99250, 16, 15, 15, 63431, 20755, 3837, 91572, 53153, 18830, 101167, 48391, 57191, 30709, 8863, 27442, 1773, 103283, 21894, 101047, 2073, 17, 20, 15, 15, 15, 16, 854, 104544, 20412, 19, 24156, 82587, 3837, 77288, 101071, 100158, 64471, 101929, 53153, 99250, 16, 15, 15, 63431, 20755, 1773, 17, 20, 15, 15, 15, 16, 20755, 23031, 16, 15, 15, 20412, 17, 20, 15, 15, 13, 15, 16, 3837, 105092, 99520, 63431, 8863, 3837, 99999, 99487, 113954, 1773, 104326, 20412, 9852, 675, 3837, 20412, 2073, 17, 20, 114418, 15, 16, 33590, 104544, 20412, 105045, 3837, 80443, 86119, 3407, 376, 67, 16384, 20412, 108532, 3837, 99999, 68756, 17254, 2073, 108532, 854, 104180, 3407, 6045, 20412, 9, 16, 15, 15, 15, 31207, 3837, 99817, 80094, 24562, 18830, 9, 3837, 99999, 6045, 27234, 12135, 20412, 1866, 1773, 68536, 6045, 9370, 111944, 20412, 16, 15, 15, 15, 31207, 3837, 99999, 6045, 104583, 16, 15, 15, 15, 15, 15, 15, 15, 3837, 77288, 20002, 87267, 99880, 11622, 82587, 31905, 3837, 99999, 101041, 61443, 12857, 16, 15, 15, 15, 31207, 104180, 3837, 77288, 85106, 81167, 64471, 102496, 82587, 24562, 18830, 9, 3837, 100632, 99817, 101041, 61443, 16, 15, 15, 15, 15, 15, 15, 15, 100363, 3837, 64471, 88991, 11319, 100632, 20002, 87267, 99880, 104465, 9, 108872, 3837, 99999, 87267, 85106, 101071, 64471, 99730, 104465, 9, 3837, 77288, 100345, 101882, 3837, 6045, 44931, 20412, 82587, 3837, 99999, 87267, 101041, 61443, 16, 15, 15, 15, 31207, 3837, 77288, 20002, 87267, 99880, 104465, 9, 3837, 99999, 87267, 85106, 81167, 1773, 100632, 100345, 20002, 103008, 19793, 26355, 3837, 87267, 101041, 61443, 16, 15, 15, 15, 31207, 3837, 77288, 85106, 50930, 64471, 102496, 1773, 77288, 20002, 101882, 80094, 17714, 82587, 3837, 99999, 87267, 101041, 61443, 16, 15, 15, 15, 31207, 3837, 77288, 87267, 85106, 105359, 17714, 63431, 8863, 3837, 99999, 87267, 85106, 81167, 1773, 100632, 20002, 87267, 99880, 104465, 9, 3837, 99999, 87267, 61443, 12857, 16, 15, 15, 15, 15, 15, 15, 15, 3407, 7698, 20412, 18, 13, 21, 69982, 99999, 7698, 27234, 12135, 20412, 1866, 3837, 99519, 102299, 24562, 18830, 9, 17992, 1773, 100632, 20002, 89012, 9370, 102299, 20412, 18, 13, 21, 69982, 99999, 7698, 44931, 20412, 18, 13, 21, 3837, 99999, 7698, 27234, 12135, 20412, 1866, 3407, 99601, 113841, 44931, 68756, 17254, 5370, 64429, 3837, 103944, 80443, 115916, 109502, 66394, 1773, 101071, 55338, 44931, 64471, 88991, 3837, 104050, 6045, 27234, 12135, 33108, 7698, 27234, 12135, 64471, 88991, 43918, 1773, 81167, 42192, 29056, 33447, 3837, 43959, 103941, 9370, 5370, 8997, 151668, 271, 515, 220, 330, 9852, 2078, 788, 330, 17, 20, 15, 15, 15, 16, 756, 220, 330, 9852, 675, 788, 330, 17, 20, 114418, 15, 16, 756, 220, 330, 376, 67, 16384, 788, 330, 108532, 756, 220, 330, 6045, 788, 330, 16, 15, 15, 15, 15, 15, 15, 15, 756, 220, 330, 7698, 788, 220, 18, 13, 21, 345, 220, 330, 6045, 27234, 12135, 788, 830, 345, 220, 330, 7698, 27234, 12135, 788, 830, 198, 92], "total_duration": 19209479560, "load_duration": 33638808, "prompt_eval_count": 230, "prompt_eval_duration": 1699912911, "eval_count": 625, "eval_duration": 17475136332}
2025-06-09 21:26:11,029 - __main__ - INFO - Raw model response: <think>
好的，我现在需要处理用户提供的债券交易文本，并将其解析为JSON格式。首先，我得仔细阅读用户提供的文本，理解其中的内容，然后提取出指定的字段。

用户提供的文本是：“250001.IB 25国债01 买入 *1000万 3.6%”。需要提取的字段包括assetCode、assetName、trdSide、amount、rate、amountReqFlag、rateReqFlag。我需要逐一检查这些字段是否符合要求，特别是注意资产代码的格式，以及金额和利率是否正确。

首先，assetCode的要求是包含4位及以上纯数字，且不能被100整除，同时不能有特殊字符或小数点。原文本中的“250001”看起来是4位数字，但检查一下是否满足不能被100整除。250001除以100是2500.01，显然不是整数，所以这个符合条件。接下来是assetName，是“25国债01”，看起来是正确的，没有问题。

trdSide是买入，所以填入“买入”即可。

amount是*1000万，这里金额前有*，所以amountReqFlag是true。而amount的数值是1000万，所以amount应该是10000000，但用户可能希望用数字类型，所以直接写成1000万即可，但需要确认是否允许数字前有*，不过这里直接写10000000的话，是否正确？不过用户可能希望保留*符号，所以可能需要检查是否应该保留*，但根据要求，amount字段是数字，所以可能直接写1000万，但用户可能希望保留*，所以可能需要确认。不过根据用户提供的示例，可能直接写1000万，但需要看是否允许。但用户要求金额为数字，所以可能直接写1000万，但可能需要转换为整数，所以可能需要确认。不过用户可能希望保留*，所以可能写成10000000。

rate是3.6%，所以rateReqFlag是true，因为利率前有*号。不过用户给的利率是3.6%，所以rate字段是3.6，所以rateReqFlag是true。

现在把这些字段填入JSON对象，确保没有多余的文字说明。检查所有字段是否正确，特别是amountReqFlag和rateReqFlag是否正确设置。确认无误后，生成最终的JSON。
</think>

{
  "assetCode": "250001",
  "assetName": "25国债01",
  "trdSide": "买入",
  "amount": "10000000",
  "rate": 3.6,
  "amountReqFlag": true,
  "rateReqFlag": true
}
2025-06-09 21:26:11,029 - __main__ - ERROR - JSON decode error: Expecting value: line 1 column 1 (char 0)
2025-06-09 21:26:11,030 - __main__ - INFO - Extracted JSON string: {
  "assetCode": "250001",
  "assetName": "25国债01",
  "trdSide": "买入",
  "amount": "10000000",
  "rate": 3.6,
  "amountReqFlag": true,
  "rateReqFlag": true
}
2025-06-09 21:26:11,030 - __main__ - INFO - Successfully parsed bond data: {'assetCode': '250001', 'assetName': '25国债01', 'trdSide': '买入', 'amount': '10000000', 'rate': 3.6, 'amountReqFlag': True, 'rateReqFlag': True}
2025-06-09 21:26:11,032 - __main__ - INFO - Successfully validated and returned parsed data: assetCode='250001' assetName='25国债01' trdSide='买入' amount=10000000.0 rate=3.6 amountReqFlag=True rateReqFlag=True
2025-06-09 21:26:34,086 - __main__ - INFO - Received request to parse bond text: 250001.IB 25国债01 买入 *1000万 3.6% 
2025-06-09 21:26:34,099 - __main__ - INFO - Calling Ollama model with text: 250001.IB 25国债01 买入 *1000万 3.6% 
2025-06-09 21:26:34,109 - __main__ - INFO - Ollama service is available
2025-06-09 21:26:34,133 - __main__ - INFO - Available models: {"models": [{"name": "qwen3:0.6b", "model": "qwen3:0.6b", "modified_at": "2025-05-08T01:27:52.753829715+08:00", "size": 522653526, "digest": "3bae9c93586b27bedaa979979733c2b0edd1d0defc745e9638f2161192a0ccf0", "details": {"parent_model": "", "format": "gguf", "family": "qwen3", "families": ["qwen3"], "parameter_size": "751.63M", "quantization_level": "Q4_K_M"}}]}
2025-06-09 21:26:34,148 - __main__ - INFO - Sending request to Ollama: {"model": "qwen3:0.6b", "prompt": "请将以下债券交易文本解析为JSON格式，只返回JSON对象，不要包含其他文字说明：\n            250001.IB 25国债01 买入 *1000万 3.6% \n            \n            需要提取的字段：\n            - assetCode: 债券代码为含有 4 位数字及以上纯数字不包括（小数点，加号等任意特殊字符）且不能被100整除或者含有任一关键字 (.IB,.SH,.SZ等，该关键字支持配置)；\n            - assetName: 债券名称\n            - trdSide: 交易方向（买入/卖出）\n            - amount: 交易金额（数字）\n            - rate: 利率（数字）\n            - amountReqFlag: 金额是否需请示（布尔值，当金额前有*号时为true）\n            - rateReqFlag: 利率是否需请示（布尔值，当利率前有*号时为true）\n            \n            ", "stream": false}
2025-06-09 21:26:48,492 - __main__ - INFO - Received response from Ollama: {"model": "qwen3:0.6b", "created_at": "2025-06-09T13:26:48.485801Z", "response": "<think>\n好的，我现在需要处理用户提供的债券交易文本，并将其解析为JSON格式。首先，我得仔细阅读用户的要求，确保我完全理解他们的需求。\n\n用户提供的文本是：“250001.IB 25国债01 买入 *1000万 3.6%”。他们希望提取六个字段：assetCode、assetName、trdSide、amount、rate、amountReqFlag和rateReqFlag。同时，必须只返回JSON对象，不能有其他文字说明。\n\n首先，我需要分解文本中的各个部分。首先，资产代码部分是“250001.IB”，看起来像是一个债券代码，但需要检查是否符合特定的格式。这里有四个数字，且没有小数点或特殊字符，所以assetCode应该满足条件。接下来是资产名称“25国债01”，看起来是正确的，没有关键字如(.IB等，不过用户提到需要配置关键字，但这里可能不需要，因为可能已经正确配置了。需要确认是否允许关键字的存在，但根据用户说明，只要不包含这些关键字即可，所以这里可能没问题。\n\n接下来是交易方向“买入”，直接提取。金额是*1000万，金额前有*号，所以amountReqFlag应该是true。利率是3.6%，但需要检查是否有*号，这里没有，所以rateReqFlag可能需要确认。不过用户提到如果利率前有*号则为true，这里没有，所以可能默认false。不过需要确认用户是否要求必须有rateReqFlag为true的情况，但根据问题，用户可能只需要提取这些字段，所以暂时保留原样。\n\n然后，检查每个字段是否符合要求。assetCode符合要求，assetName正确，trdSide正确，amount是数字，rate是数字，amountReqFlag是true，rateReqFlag可能需要进一步确认，但用户可能希望保留原样，所以可能直接返回。\n\n现在，把这些信息整理成JSON对象，确保没有多余的文字说明，并且正确格式化。最后检查一遍，确保所有字段都正确提取，没有遗漏或错误。\n</think>\n\n{\n  \"assetCode\": \"250001.IB\",\n  \"assetName\": \"25国债01\",\n  \"trdSide\": \"买入\",\n  \"amount\": \"10000000\",\n  \"rate\": 3.6,\n  \"amountReqFlag\": true,\n  \"rateReqFlag\": false\n}", "done": true, "done_reason": "stop", "context": [151644, 872, 198, 14880, 44063, 87752, 104976, 99886, 108704, 106637, 17714, 5370, 68805, 3837, 91680, 31526, 5370, 64429, 3837, 100148, 102298, 92894, 87335, 66394, 28311, 310, 220, 17, 20, 15, 15, 15, 16, 2447, 33, 220, 17, 20, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 220, 18, 13, 21, 4, 83913, 310, 18137, 250, 222, 30534, 107439, 9370, 44931, 28311, 310, 481, 9329, 2078, 25, 4891, 222, 118, 100054, 46100, 17714, 102704, 220, 19, 220, 24156, 82587, 109887, 100073, 82587, 16530, 100630, 9909, 30709, 8863, 27442, 3837, 20929, 17992, 49567, 108112, 101167, 48391, 7552, 100136, 53153, 99250, 16, 15, 15, 63431, 20755, 100631, 102704, 48888, 14777, 118294, 29465, 3256, 17515, 8590, 17515, 61228, 49567, 3837, 75882, 118294, 100143, 85767, 8, 59217, 310, 481, 9329, 675, 25, 4891, 222, 118, 100054, 29991, 198, 310, 481, 489, 67, 16384, 25, 220, 99886, 100696, 9909, 108532, 14, 109430, 23083, 310, 481, 3311, 25, 220, 99886, 80094, 9909, 82587, 23083, 310, 481, 4379, 25, 19468, 102, 95355, 9909, 82587, 23083, 310, 481, 3311, 27234, 12135, 25, 220, 80094, 64471, 58362, 14880, 19793, 9909, 117661, 25511, 3837, 39165, 80094, 24562, 18830, 9, 17992, 13343, 17714, 1866, 23083, 310, 481, 4379, 27234, 12135, 25, 19468, 102, 95355, 64471, 58362, 14880, 19793, 9909, 117661, 25511, 3837, 39165, 102299, 24562, 18830, 9, 17992, 13343, 17714, 1866, 23083, 3374, 1797, 151645, 198, 151644, 77091, 198, 151667, 198, 99692, 3837, 107520, 85106, 54542, 20002, 103008, 104976, 99886, 108704, 90395, 105278, 106637, 17714, 5370, 68805, 1773, 101140, 3837, 35946, 49828, 104857, 101113, 20002, 104272, 3837, 103944, 35946, 100372, 101128, 104056, 100354, 3407, 20002, 103008, 108704, 20412, 36987, 17, 20, 15, 15, 15, 16, 2447, 33, 220, 17, 20, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 220, 18, 13, 21, 4, 55807, 99650, 99880, 107439, 108709, 44931, 5122, 9852, 2078, 5373, 9852, 675, 5373, 376, 67, 16384, 5373, 6045, 5373, 7698, 5373, 6045, 27234, 12135, 33108, 7698, 27234, 12135, 1773, 91572, 3837, 100645, 91680, 31526, 5370, 64429, 3837, 53153, 18830, 92894, 87335, 66394, 3407, 101140, 3837, 35946, 85106, 107799, 108704, 101047, 101284, 99659, 1773, 101140, 3837, 99814, 46100, 99659, 20412, 2073, 17, 20, 15, 15, 15, 16, 2447, 33, 33590, 104544, 100902, 46944, 104976, 46100, 3837, 77288, 85106, 101071, 64471, 101137, 105149, 9370, 68805, 1773, 113138, 100802, 82587, 3837, 100136, 80443, 30709, 8863, 27442, 57191, 101167, 48391, 3837, 99999, 9852, 2078, 99730, 101929, 76095, 1773, 104326, 20412, 99814, 29991, 2073, 17, 20, 114418, 15, 16, 33590, 104544, 20412, 105045, 3837, 80443, 118294, 29524, 14618, 3256, 49567, 3837, 100632, 20002, 104496, 85106, 85767, 118294, 3837, 77288, 99817, 87267, 104689, 3837, 99519, 87267, 99461, 88991, 85767, 34187, 1773, 85106, 81167, 64471, 102496, 118294, 106233, 3837, 77288, 100345, 20002, 66394, 3837, 100671, 16530, 102298, 100001, 118294, 104180, 3837, 99999, 99817, 87267, 114815, 3407, 104326, 20412, 99886, 100696, 2073, 108532, 33590, 101041, 107439, 1773, 80094, 20412, 9, 16, 15, 15, 15, 31207, 3837, 80094, 24562, 18830, 9, 17992, 3837, 99999, 6045, 27234, 12135, 104583, 1866, 1773, 102299, 20412, 18, 13, 21, 69982, 77288, 85106, 101071, 107189, 9, 17992, 3837, 99817, 80443, 3837, 99999, 7698, 27234, 12135, 87267, 85106, 81167, 1773, 100632, 20002, 104496, 62244, 102299, 24562, 18830, 9, 17992, 46448, 17714, 1866, 3837, 99817, 80443, 3837, 99999, 87267, 47363, 3849, 1773, 100632, 85106, 81167, 20002, 64471, 101882, 100645, 18830, 7698, 27234, 12135, 17714, 1866, 102072, 3837, 77288, 100345, 86119, 3837, 20002, 87267, 107525, 107439, 100001, 44931, 3837, 99999, 105253, 104465, 52129, 90885, 3407, 101889, 3837, 101071, 103991, 44931, 64471, 101137, 101882, 1773, 9852, 2078, 101137, 101882, 3837, 9852, 675, 88991, 3837, 376, 67, 16384, 88991, 3837, 6045, 20412, 82587, 3837, 7698, 20412, 82587, 3837, 6045, 27234, 12135, 20412, 1866, 3837, 7698, 27234, 12135, 87267, 85106, 100642, 81167, 3837, 77288, 20002, 87267, 99880, 104465, 52129, 90885, 3837, 99999, 87267, 101041, 31526, 3407, 99601, 3837, 113841, 27369, 104387, 12857, 5370, 64429, 3837, 103944, 80443, 115916, 109502, 66394, 90395, 100136, 88991, 68805, 32108, 1773, 100161, 101071, 107060, 3837, 103944, 55338, 44931, 71268, 88991, 107439, 3837, 80443, 114078, 57191, 32100, 8997, 151668, 271, 515, 220, 330, 9852, 2078, 788, 330, 17, 20, 15, 15, 15, 16, 2447, 33, 756, 220, 330, 9852, 675, 788, 330, 17, 20, 114418, 15, 16, 756, 220, 330, 376, 67, 16384, 788, 330, 108532, 756, 220, 330, 6045, 788, 330, 16, 15, 15, 15, 15, 15, 15, 15, 756, 220, 330, 7698, 788, 220, 18, 13, 21, 345, 220, 330, 6045, 27234, 12135, 788, 830, 345, 220, 330, 7698, 27234, 12135, 788, 895, 198, 92], "total_duration": 14332374810, "load_duration": 29495025, "prompt_eval_count": 230, "prompt_eval_duration": 22856690, "eval_count": 520, "eval_duration": 14279256924}
2025-06-09 21:26:48,493 - __main__ - INFO - Validating Ollama response: {"model": "qwen3:0.6b", "created_at": "2025-06-09T13:26:48.485801Z", "response": "<think>\n好的，我现在需要处理用户提供的债券交易文本，并将其解析为JSON格式。首先，我得仔细阅读用户的要求，确保我完全理解他们的需求。\n\n用户提供的文本是：“250001.IB 25国债01 买入 *1000万 3.6%”。他们希望提取六个字段：assetCode、assetName、trdSide、amount、rate、amountReqFlag和rateReqFlag。同时，必须只返回JSON对象，不能有其他文字说明。\n\n首先，我需要分解文本中的各个部分。首先，资产代码部分是“250001.IB”，看起来像是一个债券代码，但需要检查是否符合特定的格式。这里有四个数字，且没有小数点或特殊字符，所以assetCode应该满足条件。接下来是资产名称“25国债01”，看起来是正确的，没有关键字如(.IB等，不过用户提到需要配置关键字，但这里可能不需要，因为可能已经正确配置了。需要确认是否允许关键字的存在，但根据用户说明，只要不包含这些关键字即可，所以这里可能没问题。\n\n接下来是交易方向“买入”，直接提取。金额是*1000万，金额前有*号，所以amountReqFlag应该是true。利率是3.6%，但需要检查是否有*号，这里没有，所以rateReqFlag可能需要确认。不过用户提到如果利率前有*号则为true，这里没有，所以可能默认false。不过需要确认用户是否要求必须有rateReqFlag为true的情况，但根据问题，用户可能只需要提取这些字段，所以暂时保留原样。\n\n然后，检查每个字段是否符合要求。assetCode符合要求，assetName正确，trdSide正确，amount是数字，rate是数字，amountReqFlag是true，rateReqFlag可能需要进一步确认，但用户可能希望保留原样，所以可能直接返回。\n\n现在，把这些信息整理成JSON对象，确保没有多余的文字说明，并且正确格式化。最后检查一遍，确保所有字段都正确提取，没有遗漏或错误。\n</think>\n\n{\n  \"assetCode\": \"250001.IB\",\n  \"assetName\": \"25国债01\",\n  \"trdSide\": \"买入\",\n  \"amount\": \"10000000\",\n  \"rate\": 3.6,\n  \"amountReqFlag\": true,\n  \"rateReqFlag\": false\n}", "done": true, "done_reason": "stop", "context": [151644, 872, 198, 14880, 44063, 87752, 104976, 99886, 108704, 106637, 17714, 5370, 68805, 3837, 91680, 31526, 5370, 64429, 3837, 100148, 102298, 92894, 87335, 66394, 28311, 310, 220, 17, 20, 15, 15, 15, 16, 2447, 33, 220, 17, 20, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 220, 18, 13, 21, 4, 83913, 310, 18137, 250, 222, 30534, 107439, 9370, 44931, 28311, 310, 481, 9329, 2078, 25, 4891, 222, 118, 100054, 46100, 17714, 102704, 220, 19, 220, 24156, 82587, 109887, 100073, 82587, 16530, 100630, 9909, 30709, 8863, 27442, 3837, 20929, 17992, 49567, 108112, 101167, 48391, 7552, 100136, 53153, 99250, 16, 15, 15, 63431, 20755, 100631, 102704, 48888, 14777, 118294, 29465, 3256, 17515, 8590, 17515, 61228, 49567, 3837, 75882, 118294, 100143, 85767, 8, 59217, 310, 481, 9329, 675, 25, 4891, 222, 118, 100054, 29991, 198, 310, 481, 489, 67, 16384, 25, 220, 99886, 100696, 9909, 108532, 14, 109430, 23083, 310, 481, 3311, 25, 220, 99886, 80094, 9909, 82587, 23083, 310, 481, 4379, 25, 19468, 102, 95355, 9909, 82587, 23083, 310, 481, 3311, 27234, 12135, 25, 220, 80094, 64471, 58362, 14880, 19793, 9909, 117661, 25511, 3837, 39165, 80094, 24562, 18830, 9, 17992, 13343, 17714, 1866, 23083, 310, 481, 4379, 27234, 12135, 25, 19468, 102, 95355, 64471, 58362, 14880, 19793, 9909, 117661, 25511, 3837, 39165, 102299, 24562, 18830, 9, 17992, 13343, 17714, 1866, 23083, 3374, 1797, 151645, 198, 151644, 77091, 198, 151667, 198, 99692, 3837, 107520, 85106, 54542, 20002, 103008, 104976, 99886, 108704, 90395, 105278, 106637, 17714, 5370, 68805, 1773, 101140, 3837, 35946, 49828, 104857, 101113, 20002, 104272, 3837, 103944, 35946, 100372, 101128, 104056, 100354, 3407, 20002, 103008, 108704, 20412, 36987, 17, 20, 15, 15, 15, 16, 2447, 33, 220, 17, 20, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 220, 18, 13, 21, 4, 55807, 99650, 99880, 107439, 108709, 44931, 5122, 9852, 2078, 5373, 9852, 675, 5373, 376, 67, 16384, 5373, 6045, 5373, 7698, 5373, 6045, 27234, 12135, 33108, 7698, 27234, 12135, 1773, 91572, 3837, 100645, 91680, 31526, 5370, 64429, 3837, 53153, 18830, 92894, 87335, 66394, 3407, 101140, 3837, 35946, 85106, 107799, 108704, 101047, 101284, 99659, 1773, 101140, 3837, 99814, 46100, 99659, 20412, 2073, 17, 20, 15, 15, 15, 16, 2447, 33, 33590, 104544, 100902, 46944, 104976, 46100, 3837, 77288, 85106, 101071, 64471, 101137, 105149, 9370, 68805, 1773, 113138, 100802, 82587, 3837, 100136, 80443, 30709, 8863, 27442, 57191, 101167, 48391, 3837, 99999, 9852, 2078, 99730, 101929, 76095, 1773, 104326, 20412, 99814, 29991, 2073, 17, 20, 114418, 15, 16, 33590, 104544, 20412, 105045, 3837, 80443, 118294, 29524, 14618, 3256, 49567, 3837, 100632, 20002, 104496, 85106, 85767, 118294, 3837, 77288, 99817, 87267, 104689, 3837, 99519, 87267, 99461, 88991, 85767, 34187, 1773, 85106, 81167, 64471, 102496, 118294, 106233, 3837, 77288, 100345, 20002, 66394, 3837, 100671, 16530, 102298, 100001, 118294, 104180, 3837, 99999, 99817, 87267, 114815, 3407, 104326, 20412, 99886, 100696, 2073, 108532, 33590, 101041, 107439, 1773, 80094, 20412, 9, 16, 15, 15, 15, 31207, 3837, 80094, 24562, 18830, 9, 17992, 3837, 99999, 6045, 27234, 12135, 104583, 1866, 1773, 102299, 20412, 18, 13, 21, 69982, 77288, 85106, 101071, 107189, 9, 17992, 3837, 99817, 80443, 3837, 99999, 7698, 27234, 12135, 87267, 85106, 81167, 1773, 100632, 20002, 104496, 62244, 102299, 24562, 18830, 9, 17992, 46448, 17714, 1866, 3837, 99817, 80443, 3837, 99999, 87267, 47363, 3849, 1773, 100632, 85106, 81167, 20002, 64471, 101882, 100645, 18830, 7698, 27234, 12135, 17714, 1866, 102072, 3837, 77288, 100345, 86119, 3837, 20002, 87267, 107525, 107439, 100001, 44931, 3837, 99999, 105253, 104465, 52129, 90885, 3407, 101889, 3837, 101071, 103991, 44931, 64471, 101137, 101882, 1773, 9852, 2078, 101137, 101882, 3837, 9852, 675, 88991, 3837, 376, 67, 16384, 88991, 3837, 6045, 20412, 82587, 3837, 7698, 20412, 82587, 3837, 6045, 27234, 12135, 20412, 1866, 3837, 7698, 27234, 12135, 87267, 85106, 100642, 81167, 3837, 77288, 20002, 87267, 99880, 104465, 52129, 90885, 3837, 99999, 87267, 101041, 31526, 3407, 99601, 3837, 113841, 27369, 104387, 12857, 5370, 64429, 3837, 103944, 80443, 115916, 109502, 66394, 90395, 100136, 88991, 68805, 32108, 1773, 100161, 101071, 107060, 3837, 103944, 55338, 44931, 71268, 88991, 107439, 3837, 80443, 114078, 57191, 32100, 8997, 151668, 271, 515, 220, 330, 9852, 2078, 788, 330, 17, 20, 15, 15, 15, 16, 2447, 33, 756, 220, 330, 9852, 675, 788, 330, 17, 20, 114418, 15, 16, 756, 220, 330, 376, 67, 16384, 788, 330, 108532, 756, 220, 330, 6045, 788, 330, 16, 15, 15, 15, 15, 15, 15, 15, 756, 220, 330, 7698, 788, 220, 18, 13, 21, 345, 220, 330, 6045, 27234, 12135, 788, 830, 345, 220, 330, 7698, 27234, 12135, 788, 895, 198, 92], "total_duration": 14332374810, "load_duration": 29495025, "prompt_eval_count": 230, "prompt_eval_duration": 22856690, "eval_count": 520, "eval_duration": 14279256924}
2025-06-09 21:26:48,493 - __main__ - INFO - Raw model response: <think>
好的，我现在需要处理用户提供的债券交易文本，并将其解析为JSON格式。首先，我得仔细阅读用户的要求，确保我完全理解他们的需求。

用户提供的文本是：“250001.IB 25国债01 买入 *1000万 3.6%”。他们希望提取六个字段：assetCode、assetName、trdSide、amount、rate、amountReqFlag和rateReqFlag。同时，必须只返回JSON对象，不能有其他文字说明。

首先，我需要分解文本中的各个部分。首先，资产代码部分是“250001.IB”，看起来像是一个债券代码，但需要检查是否符合特定的格式。这里有四个数字，且没有小数点或特殊字符，所以assetCode应该满足条件。接下来是资产名称“25国债01”，看起来是正确的，没有关键字如(.IB等，不过用户提到需要配置关键字，但这里可能不需要，因为可能已经正确配置了。需要确认是否允许关键字的存在，但根据用户说明，只要不包含这些关键字即可，所以这里可能没问题。

接下来是交易方向“买入”，直接提取。金额是*1000万，金额前有*号，所以amountReqFlag应该是true。利率是3.6%，但需要检查是否有*号，这里没有，所以rateReqFlag可能需要确认。不过用户提到如果利率前有*号则为true，这里没有，所以可能默认false。不过需要确认用户是否要求必须有rateReqFlag为true的情况，但根据问题，用户可能只需要提取这些字段，所以暂时保留原样。

然后，检查每个字段是否符合要求。assetCode符合要求，assetName正确，trdSide正确，amount是数字，rate是数字，amountReqFlag是true，rateReqFlag可能需要进一步确认，但用户可能希望保留原样，所以可能直接返回。

现在，把这些信息整理成JSON对象，确保没有多余的文字说明，并且正确格式化。最后检查一遍，确保所有字段都正确提取，没有遗漏或错误。
</think>

{
  "assetCode": "250001.IB",
  "assetName": "25国债01",
  "trdSide": "买入",
  "amount": "10000000",
  "rate": 3.6,
  "amountReqFlag": true,
  "rateReqFlag": false
}
2025-06-09 21:26:48,494 - __main__ - ERROR - JSON decode error: Expecting value: line 1 column 1 (char 0)
2025-06-09 21:26:48,494 - __main__ - INFO - Extracted JSON string: {
  "assetCode": "250001.IB",
  "assetName": "25国债01",
  "trdSide": "买入",
  "amount": "10000000",
  "rate": 3.6,
  "amountReqFlag": true,
  "rateReqFlag": false
}
2025-06-09 21:26:48,494 - __main__ - INFO - Successfully parsed bond data: {'assetCode': '250001.IB', 'assetName': '25国债01', 'trdSide': '买入', 'amount': '10000000', 'rate': 3.6, 'amountReqFlag': True, 'rateReqFlag': False}
2025-06-09 21:26:48,495 - __main__ - INFO - Successfully validated and returned parsed data: assetCode='250001.IB' assetName='25国债01' trdSide='买入' amount=10000000.0 rate=3.6 amountReqFlag=True rateReqFlag=False
2025-06-10 01:26:10,193 - __main__ - INFO - Starting bond text parsing service...
2025-06-10 01:35:41,039 - __main__ - INFO - Received request to parse bond text: 250001.IB 25国债01 买入 *1000万 3.6%  景益货币 景顺货币, prompt_type: 多产品指令语料解析
2025-06-10 01:35:41,040 - __main__ - INFO - Calling Ollama model with text: 250001.IB 25国债01 买入 *1000万 3.6%  景益货币 景顺货币, prompt_type: 多产品指令语料解析
2025-06-10 01:35:41,144 - __main__ - INFO - Ollama service is available
2025-06-10 01:35:41,153 - __main__ - INFO - Available models: {"models": [{"name": "qwen3:0.6b", "model": "qwen3:0.6b", "modified_at": "2025-05-08T01:27:52.753829715+08:00", "size": 522653526, "digest": "3bae9c93586b27bedaa979979733c2b0edd1d0defc745e9638f2161192a0ccf0", "details": {"parent_model": "", "format": "gguf", "family": "qwen3", "families": ["qwen3"], "parameter_size": "751.63M", "quantization_level": "Q4_K_M"}}]}
2025-06-10 01:35:41,153 - __main__ - INFO - Sending request to Ollama: {"model": "qwen3:0.6b", "prompt": "请将以下包含多个债券产品的交易文本解析为JSON数组格式，每个产品对应一个JSON对象，只返回JSON数组，不要包含其他文字说明：\n250001.IB 25国债01 买入 *1000万 3.6%  景益货币 景顺货币\n\n每个产品需要提取的字段：\n- assetCode: 债券代码为含有 4 位数字及以上纯数字不包括（小数点，加号等任意特殊字符）且不能被100整除或者含有任一关键字 (.IB,.SH,.SZ等，该关键字支持配置)；\n- assetName: 债券名称\n- trdSide: 交易方向（买入/卖出）\n- amount: 交易金额（数字）\n- rate: 利率（数字）\n- amountReqFlag: 金额是否需请示（布尔值，当金额前有*号时为true）\n- rateReqFlag: 利率是否需请示（布尔值，当利率前有*号时为true）\n- fundName: 基金名称,这是个list,需要提取出基金名称,可能包含多个基金名称\n\n", "stream": false}
2025-06-10 01:36:07,410 - __main__ - INFO - Received response from Ollama: {"model": "qwen3:0.6b", "created_at": "2025-06-09T17:36:07.38297Z", "response": "<think>\n好的，我现在需要处理用户提供的交易文本，并将其解析为JSON数组，每个产品对应一个对象，最后返回数组，不包含其他文字说明。首先，我得仔细阅读用户的要求，确保每个产品字段都被正确提取。\n\n首先，用户给出的文本是：“250001.IB 25国债01 买入 *1000万 3.6% 景益货币 景顺货币”。我需要先识别每个产品的结构。这里每个产品的结构看起来是资产代码、名称、交易方向、金额、利率、金额是否需请示、利率是否需请示以及基金名称列表。\n\n首先，资产代码。用户指出资产代码需要是包含4位及以上纯数字，且不能被100整除，同时不能包含指定的关键词（如IB、SH、SZ）。在给定的文本中，资产代码是“250001”，这符合4位数字，并且不能被100整除。不过需要检查是否包含指定的关键词。这里关键词是IB，而资产代码是250001，没有包含IB之类的关键词，所以没问题。所以资产代码正确。\n\n接下来是资产名称，这里用户给出的是“25国债01”，所以直接提取即可。\n\n交易方向是“买入”，所以trdSide是true。\n\n金额是*1000万，这里金额是否需请示是true，因为有*号。金额是1000万，所以amount是10000000？但用户可能希望金额是数字，所以可能需要转换为整数。不过用户可能接受数字形式，所以直接写1000万即可，或者用10000000？需要确认单位，但用户可能接受1000万，所以这里可能直接写10000000？不过有时候金额可能用英文，但用户要求数字，所以可能需要转换。但用户提供的文本是“*1000万”，所以金额是1000万，所以amount是10000000？或者可能直接写1000万？\n\n然后利率是3.6%，所以rate是360。金额是否需请示是true，rate是否需请示是false，因为利率是3.6%没有*号，所以rateReqFlag是false？\n\n基金名称是景益货币和景顺货币，需要提取到list中。所以fundName应该是一个数组，包含这两个名称。\n\n现在检查每个字段是否正确：\n\n- assetCode: 250001，正确。\n- assetName: 25国债01，正确。\n- trdSide: 买入，正确。\n- amount: 1000万，金额是否需请示true，正确。\n- rate: 3.6%（数字），正确。\n- amountReqFlag: true，正确。\n- rateReqFlag: false，正确。\n- fundName: 景益货币和景顺货币，作为数组存在。\n\n现在需要确保所有字段正确，没有遗漏或错误。用户要求只返回JSON数组，不需要其他说明，所以最终的JSON应该是包含所有这些字段的数组，每个产品对应一个对象。检查是否有拼写错误或字段遗漏，比如是否有trdSide的布尔值正确，或者金额是否正确格式化。\n\n确认无误后，将结果整理成JSON数组格式返回。\n</think>\n\n[\n  {\n    \"assetCode\": \"250001\",\n    \"assetName\": \"25国债01\",\n    \"trdSide\": true,\n    \"amount\": \"10000000\",\n    \"rate\": 360,\n    \"amountReqFlag\": true,\n    \"rateReqFlag\": false,\n    \"fundName\": [\"景益货币\", \"景顺货币\"]\n  }\n]", "done": true, "done_reason": "stop", "context": [151644, 872, 198, 14880, 44063, 87752, 102298, 101213, 104976, 104703, 99886, 108704, 106637, 17714, 5370, 69824, 68805, 3837, 103991, 82700, 103124, 46944, 5370, 64429, 3837, 91680, 31526, 5370, 69824, 3837, 100148, 102298, 92894, 87335, 66394, 28311, 17, 20, 15, 15, 15, 16, 2447, 33, 220, 17, 20, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 220, 18, 13, 21, 4, 220, 6567, 247, 107, 99419, 101406, 6567, 247, 107, 99683, 101406, 271, 103991, 82700, 85106, 107439, 9370, 44931, 28311, 12, 9329, 2078, 25, 4891, 222, 118, 100054, 46100, 17714, 102704, 220, 19, 220, 24156, 82587, 109887, 100073, 82587, 16530, 100630, 9909, 30709, 8863, 27442, 3837, 20929, 17992, 49567, 108112, 101167, 48391, 7552, 100136, 53153, 99250, 16, 15, 15, 63431, 20755, 100631, 102704, 48888, 14777, 118294, 29465, 3256, 17515, 8590, 17515, 61228, 49567, 3837, 75882, 118294, 100143, 85767, 8, 59217, 12, 9329, 675, 25, 4891, 222, 118, 100054, 29991, 198, 12, 489, 67, 16384, 25, 220, 99886, 100696, 9909, 108532, 14, 109430, 23083, 12, 3311, 25, 220, 99886, 80094, 9909, 82587, 23083, 12, 4379, 25, 19468, 102, 95355, 9909, 82587, 23083, 12, 3311, 27234, 12135, 25, 220, 80094, 64471, 58362, 14880, 19793, 9909, 117661, 25511, 3837, 39165, 80094, 24562, 18830, 9, 17992, 13343, 17714, 1866, 23083, 12, 4379, 27234, 12135, 25, 19468, 102, 95355, 64471, 58362, 14880, 19793, 9909, 117661, 25511, 3837, 39165, 102299, 24562, 18830, 9, 17992, 13343, 17714, 1866, 23083, 12, 3802, 675, 25, 4891, 253, 118, 34230, 29991, 11, 100346, 18947, 1607, 11, 85106, 107439, 20221, 100025, 29991, 11, 87267, 102298, 101213, 100025, 29991, 271, 151645, 198, 151644, 77091, 198, 151667, 198, 99692, 3837, 107520, 85106, 54542, 20002, 103008, 99886, 108704, 90395, 105278, 106637, 17714, 5370, 69824, 3837, 103991, 82700, 103124, 46944, 64429, 3837, 100161, 31526, 69824, 3837, 16530, 102298, 92894, 87335, 66394, 1773, 101140, 3837, 35946, 49828, 104857, 101113, 20002, 104272, 3837, 103944, 103991, 82700, 44931, 106358, 88991, 107439, 3407, 101140, 3837, 20002, 107485, 9370, 108704, 20412, 36987, 17, 20, 15, 15, 15, 16, 2447, 33, 220, 17, 20, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 220, 18, 13, 21, 4, 6567, 247, 107, 99419, 101406, 6567, 247, 107, 99683, 101406, 55807, 35946, 85106, 60726, 102450, 103991, 104703, 100166, 1773, 99817, 103991, 104703, 100166, 104544, 20412, 99814, 46100, 5373, 29991, 5373, 99886, 100696, 5373, 80094, 5373, 102299, 5373, 80094, 64471, 58362, 14880, 19793, 5373, 102299, 64471, 58362, 14880, 19793, 101034, 100025, 29991, 44177, 3407, 101140, 3837, 99814, 46100, 1773, 20002, 103988, 99814, 46100, 85106, 20412, 102298, 19, 24156, 109887, 100073, 82587, 3837, 100136, 53153, 99250, 16, 15, 15, 63431, 20755, 3837, 91572, 53153, 102298, 105146, 9370, 105291, 9909, 29524, 3256, 5373, 8590, 5373, 61228, 74276, 18493, 89012, 22382, 9370, 108704, 15946, 3837, 99814, 46100, 20412, 2073, 17, 20, 15, 15, 15, 16, 33590, 43288, 101137, 19, 24156, 82587, 90395, 100136, 53153, 99250, 16, 15, 15, 63431, 20755, 1773, 100632, 85106, 101071, 64471, 102298, 105146, 9370, 105291, 1773, 99817, 105291, 20412, 3256, 3837, 68536, 99814, 46100, 20412, 17, 20, 15, 15, 15, 16, 3837, 80443, 102298, 3256, 106896, 105291, 3837, 99999, 114815, 1773, 99999, 99814, 46100, 88991, 3407, 104326, 20412, 99814, 29991, 3837, 99817, 20002, 107485, 100146, 2073, 17, 20, 114418, 15, 16, 33590, 99999, 101041, 107439, 104180, 3407, 99886, 100696, 20412, 2073, 108532, 33590, 99999, 376, 67, 16384, 20412, 1866, 3407, 80094, 20412, 9, 16, 15, 15, 15, 31207, 3837, 99817, 80094, 64471, 58362, 14880, 19793, 20412, 1866, 3837, 99519, 18830, 9, 17992, 1773, 80094, 20412, 16, 15, 15, 15, 31207, 3837, 99999, 6045, 20412, 16, 15, 15, 15, 15, 15, 15, 15, 11319, 77288, 20002, 87267, 99880, 80094, 20412, 82587, 3837, 99999, 87267, 85106, 105359, 17714, 63431, 8863, 1773, 100632, 20002, 87267, 100669, 82587, 100414, 3837, 99999, 101041, 61443, 16, 15, 15, 15, 31207, 104180, 3837, 100631, 11622, 16, 15, 15, 15, 15, 15, 15, 15, 11319, 85106, 81167, 75317, 3837, 77288, 20002, 87267, 100669, 16, 15, 15, 15, 31207, 3837, 99999, 99817, 87267, 101041, 61443, 16, 15, 15, 15, 15, 15, 15, 15, 11319, 100632, 104854, 80094, 87267, 11622, 105205, 3837, 77288, 20002, 30534, 21280, 27260, 18600, 3837, 99999, 87267, 85106, 105359, 1773, 77288, 20002, 103008, 108704, 20412, 2073, 9, 16, 15, 15, 15, 31207, 33590, 99999, 80094, 20412, 16, 15, 15, 15, 31207, 3837, 99999, 6045, 20412, 16, 15, 15, 15, 15, 15, 15, 15, 11319, 100631, 87267, 101041, 61443, 16, 15, 15, 15, 31207, 26850, 101889, 102299, 20412, 18, 13, 21, 69982, 99999, 7698, 20412, 18, 21, 15, 1773, 80094, 64471, 58362, 14880, 19793, 20412, 1866, 3837, 7698, 64471, 58362, 14880, 19793, 20412, 3849, 3837, 99519, 102299, 20412, 18, 13, 21, 4, 80443, 9, 17992, 3837, 99999, 7698, 27234, 12135, 20412, 3849, 26850, 100025, 29991, 20412, 85254, 99419, 101406, 33108, 85254, 99683, 101406, 3837, 85106, 107439, 26939, 1607, 15946, 1773, 99999, 57603, 675, 99730, 101909, 69824, 3837, 102298, 105932, 29991, 3407, 99601, 101071, 103991, 44931, 64471, 88991, 48443, 12, 9329, 2078, 25, 220, 17, 20, 15, 15, 15, 16, 3837, 88991, 8997, 12, 9329, 675, 25, 220, 17, 20, 114418, 15, 16, 3837, 88991, 8997, 12, 489, 67, 16384, 25, 220, 108532, 3837, 88991, 8997, 12, 3311, 25, 220, 16, 15, 15, 15, 31207, 3837, 80094, 64471, 58362, 14880, 19793, 1866, 3837, 88991, 8997, 12, 4379, 25, 220, 18, 13, 21, 4, 9909, 82587, 48272, 88991, 8997, 12, 3311, 27234, 12135, 25, 830, 3837, 88991, 8997, 12, 4379, 27234, 12135, 25, 895, 3837, 88991, 8997, 12, 3802, 675, 25, 6567, 247, 107, 99419, 101406, 33108, 85254, 99683, 101406, 3837, 100622, 69824, 47606, 3407, 99601, 85106, 103944, 55338, 44931, 88991, 3837, 80443, 114078, 57191, 32100, 1773, 20002, 101882, 91680, 31526, 5370, 69824, 3837, 104689, 92894, 66394, 3837, 99999, 103941, 9370, 5370, 104583, 102298, 55338, 100001, 44931, 9370, 69824, 3837, 103991, 82700, 103124, 46944, 64429, 1773, 101071, 107189, 100278, 61443, 32100, 57191, 44931, 114078, 3837, 101912, 107189, 376, 67, 16384, 9370, 117661, 25511, 88991, 3837, 100631, 80094, 64471, 88991, 68805, 32108, 3407, 81167, 42192, 29056, 33447, 3837, 44063, 59151, 104387, 12857, 5370, 69824, 68805, 31526, 8997, 151668, 271, 9640, 220, 341, 262, 330, 9852, 2078, 788, 330, 17, 20, 15, 15, 15, 16, 756, 262, 330, 9852, 675, 788, 330, 17, 20, 114418, 15, 16, 756, 262, 330, 376, 67, 16384, 788, 830, 345, 262, 330, 6045, 788, 330, 16, 15, 15, 15, 15, 15, 15, 15, 756, 262, 330, 7698, 788, 220, 18, 21, 15, 345, 262, 330, 6045, 27234, 12135, 788, 830, 345, 262, 330, 7698, 27234, 12135, 788, 895, 345, 262, 330, 57603, 675, 788, 4383, 85254, 99419, 101406, 497, 330, 85254, 99683, 101406, 7026, 220, 456, 60], "total_duration": 26223295362, "load_duration": 3349643411, "prompt_eval_count": 265, "prompt_eval_duration": 3210435309, "eval_count": 827, "eval_duration": 19655360192}
2025-06-10 01:36:07,411 - __main__ - INFO - Validating Ollama response: {"model": "qwen3:0.6b", "created_at": "2025-06-09T17:36:07.38297Z", "response": "<think>\n好的，我现在需要处理用户提供的交易文本，并将其解析为JSON数组，每个产品对应一个对象，最后返回数组，不包含其他文字说明。首先，我得仔细阅读用户的要求，确保每个产品字段都被正确提取。\n\n首先，用户给出的文本是：“250001.IB 25国债01 买入 *1000万 3.6% 景益货币 景顺货币”。我需要先识别每个产品的结构。这里每个产品的结构看起来是资产代码、名称、交易方向、金额、利率、金额是否需请示、利率是否需请示以及基金名称列表。\n\n首先，资产代码。用户指出资产代码需要是包含4位及以上纯数字，且不能被100整除，同时不能包含指定的关键词（如IB、SH、SZ）。在给定的文本中，资产代码是“250001”，这符合4位数字，并且不能被100整除。不过需要检查是否包含指定的关键词。这里关键词是IB，而资产代码是250001，没有包含IB之类的关键词，所以没问题。所以资产代码正确。\n\n接下来是资产名称，这里用户给出的是“25国债01”，所以直接提取即可。\n\n交易方向是“买入”，所以trdSide是true。\n\n金额是*1000万，这里金额是否需请示是true，因为有*号。金额是1000万，所以amount是10000000？但用户可能希望金额是数字，所以可能需要转换为整数。不过用户可能接受数字形式，所以直接写1000万即可，或者用10000000？需要确认单位，但用户可能接受1000万，所以这里可能直接写10000000？不过有时候金额可能用英文，但用户要求数字，所以可能需要转换。但用户提供的文本是“*1000万”，所以金额是1000万，所以amount是10000000？或者可能直接写1000万？\n\n然后利率是3.6%，所以rate是360。金额是否需请示是true，rate是否需请示是false，因为利率是3.6%没有*号，所以rateReqFlag是false？\n\n基金名称是景益货币和景顺货币，需要提取到list中。所以fundName应该是一个数组，包含这两个名称。\n\n现在检查每个字段是否正确：\n\n- assetCode: 250001，正确。\n- assetName: 25国债01，正确。\n- trdSide: 买入，正确。\n- amount: 1000万，金额是否需请示true，正确。\n- rate: 3.6%（数字），正确。\n- amountReqFlag: true，正确。\n- rateReqFlag: false，正确。\n- fundName: 景益货币和景顺货币，作为数组存在。\n\n现在需要确保所有字段正确，没有遗漏或错误。用户要求只返回JSON数组，不需要其他说明，所以最终的JSON应该是包含所有这些字段的数组，每个产品对应一个对象。检查是否有拼写错误或字段遗漏，比如是否有trdSide的布尔值正确，或者金额是否正确格式化。\n\n确认无误后，将结果整理成JSON数组格式返回。\n</think>\n\n[\n  {\n    \"assetCode\": \"250001\",\n    \"assetName\": \"25国债01\",\n    \"trdSide\": true,\n    \"amount\": \"10000000\",\n    \"rate\": 360,\n    \"amountReqFlag\": true,\n    \"rateReqFlag\": false,\n    \"fundName\": [\"景益货币\", \"景顺货币\"]\n  }\n]", "done": true, "done_reason": "stop", "context": [151644, 872, 198, 14880, 44063, 87752, 102298, 101213, 104976, 104703, 99886, 108704, 106637, 17714, 5370, 69824, 68805, 3837, 103991, 82700, 103124, 46944, 5370, 64429, 3837, 91680, 31526, 5370, 69824, 3837, 100148, 102298, 92894, 87335, 66394, 28311, 17, 20, 15, 15, 15, 16, 2447, 33, 220, 17, 20, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 220, 18, 13, 21, 4, 220, 6567, 247, 107, 99419, 101406, 6567, 247, 107, 99683, 101406, 271, 103991, 82700, 85106, 107439, 9370, 44931, 28311, 12, 9329, 2078, 25, 4891, 222, 118, 100054, 46100, 17714, 102704, 220, 19, 220, 24156, 82587, 109887, 100073, 82587, 16530, 100630, 9909, 30709, 8863, 27442, 3837, 20929, 17992, 49567, 108112, 101167, 48391, 7552, 100136, 53153, 99250, 16, 15, 15, 63431, 20755, 100631, 102704, 48888, 14777, 118294, 29465, 3256, 17515, 8590, 17515, 61228, 49567, 3837, 75882, 118294, 100143, 85767, 8, 59217, 12, 9329, 675, 25, 4891, 222, 118, 100054, 29991, 198, 12, 489, 67, 16384, 25, 220, 99886, 100696, 9909, 108532, 14, 109430, 23083, 12, 3311, 25, 220, 99886, 80094, 9909, 82587, 23083, 12, 4379, 25, 19468, 102, 95355, 9909, 82587, 23083, 12, 3311, 27234, 12135, 25, 220, 80094, 64471, 58362, 14880, 19793, 9909, 117661, 25511, 3837, 39165, 80094, 24562, 18830, 9, 17992, 13343, 17714, 1866, 23083, 12, 4379, 27234, 12135, 25, 19468, 102, 95355, 64471, 58362, 14880, 19793, 9909, 117661, 25511, 3837, 39165, 102299, 24562, 18830, 9, 17992, 13343, 17714, 1866, 23083, 12, 3802, 675, 25, 4891, 253, 118, 34230, 29991, 11, 100346, 18947, 1607, 11, 85106, 107439, 20221, 100025, 29991, 11, 87267, 102298, 101213, 100025, 29991, 271, 151645, 198, 151644, 77091, 198, 151667, 198, 99692, 3837, 107520, 85106, 54542, 20002, 103008, 99886, 108704, 90395, 105278, 106637, 17714, 5370, 69824, 3837, 103991, 82700, 103124, 46944, 64429, 3837, 100161, 31526, 69824, 3837, 16530, 102298, 92894, 87335, 66394, 1773, 101140, 3837, 35946, 49828, 104857, 101113, 20002, 104272, 3837, 103944, 103991, 82700, 44931, 106358, 88991, 107439, 3407, 101140, 3837, 20002, 107485, 9370, 108704, 20412, 36987, 17, 20, 15, 15, 15, 16, 2447, 33, 220, 17, 20, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 220, 18, 13, 21, 4, 6567, 247, 107, 99419, 101406, 6567, 247, 107, 99683, 101406, 55807, 35946, 85106, 60726, 102450, 103991, 104703, 100166, 1773, 99817, 103991, 104703, 100166, 104544, 20412, 99814, 46100, 5373, 29991, 5373, 99886, 100696, 5373, 80094, 5373, 102299, 5373, 80094, 64471, 58362, 14880, 19793, 5373, 102299, 64471, 58362, 14880, 19793, 101034, 100025, 29991, 44177, 3407, 101140, 3837, 99814, 46100, 1773, 20002, 103988, 99814, 46100, 85106, 20412, 102298, 19, 24156, 109887, 100073, 82587, 3837, 100136, 53153, 99250, 16, 15, 15, 63431, 20755, 3837, 91572, 53153, 102298, 105146, 9370, 105291, 9909, 29524, 3256, 5373, 8590, 5373, 61228, 74276, 18493, 89012, 22382, 9370, 108704, 15946, 3837, 99814, 46100, 20412, 2073, 17, 20, 15, 15, 15, 16, 33590, 43288, 101137, 19, 24156, 82587, 90395, 100136, 53153, 99250, 16, 15, 15, 63431, 20755, 1773, 100632, 85106, 101071, 64471, 102298, 105146, 9370, 105291, 1773, 99817, 105291, 20412, 3256, 3837, 68536, 99814, 46100, 20412, 17, 20, 15, 15, 15, 16, 3837, 80443, 102298, 3256, 106896, 105291, 3837, 99999, 114815, 1773, 99999, 99814, 46100, 88991, 3407, 104326, 20412, 99814, 29991, 3837, 99817, 20002, 107485, 100146, 2073, 17, 20, 114418, 15, 16, 33590, 99999, 101041, 107439, 104180, 3407, 99886, 100696, 20412, 2073, 108532, 33590, 99999, 376, 67, 16384, 20412, 1866, 3407, 80094, 20412, 9, 16, 15, 15, 15, 31207, 3837, 99817, 80094, 64471, 58362, 14880, 19793, 20412, 1866, 3837, 99519, 18830, 9, 17992, 1773, 80094, 20412, 16, 15, 15, 15, 31207, 3837, 99999, 6045, 20412, 16, 15, 15, 15, 15, 15, 15, 15, 11319, 77288, 20002, 87267, 99880, 80094, 20412, 82587, 3837, 99999, 87267, 85106, 105359, 17714, 63431, 8863, 1773, 100632, 20002, 87267, 100669, 82587, 100414, 3837, 99999, 101041, 61443, 16, 15, 15, 15, 31207, 104180, 3837, 100631, 11622, 16, 15, 15, 15, 15, 15, 15, 15, 11319, 85106, 81167, 75317, 3837, 77288, 20002, 87267, 100669, 16, 15, 15, 15, 31207, 3837, 99999, 99817, 87267, 101041, 61443, 16, 15, 15, 15, 15, 15, 15, 15, 11319, 100632, 104854, 80094, 87267, 11622, 105205, 3837, 77288, 20002, 30534, 21280, 27260, 18600, 3837, 99999, 87267, 85106, 105359, 1773, 77288, 20002, 103008, 108704, 20412, 2073, 9, 16, 15, 15, 15, 31207, 33590, 99999, 80094, 20412, 16, 15, 15, 15, 31207, 3837, 99999, 6045, 20412, 16, 15, 15, 15, 15, 15, 15, 15, 11319, 100631, 87267, 101041, 61443, 16, 15, 15, 15, 31207, 26850, 101889, 102299, 20412, 18, 13, 21, 69982, 99999, 7698, 20412, 18, 21, 15, 1773, 80094, 64471, 58362, 14880, 19793, 20412, 1866, 3837, 7698, 64471, 58362, 14880, 19793, 20412, 3849, 3837, 99519, 102299, 20412, 18, 13, 21, 4, 80443, 9, 17992, 3837, 99999, 7698, 27234, 12135, 20412, 3849, 26850, 100025, 29991, 20412, 85254, 99419, 101406, 33108, 85254, 99683, 101406, 3837, 85106, 107439, 26939, 1607, 15946, 1773, 99999, 57603, 675, 99730, 101909, 69824, 3837, 102298, 105932, 29991, 3407, 99601, 101071, 103991, 44931, 64471, 88991, 48443, 12, 9329, 2078, 25, 220, 17, 20, 15, 15, 15, 16, 3837, 88991, 8997, 12, 9329, 675, 25, 220, 17, 20, 114418, 15, 16, 3837, 88991, 8997, 12, 489, 67, 16384, 25, 220, 108532, 3837, 88991, 8997, 12, 3311, 25, 220, 16, 15, 15, 15, 31207, 3837, 80094, 64471, 58362, 14880, 19793, 1866, 3837, 88991, 8997, 12, 4379, 25, 220, 18, 13, 21, 4, 9909, 82587, 48272, 88991, 8997, 12, 3311, 27234, 12135, 25, 830, 3837, 88991, 8997, 12, 4379, 27234, 12135, 25, 895, 3837, 88991, 8997, 12, 3802, 675, 25, 6567, 247, 107, 99419, 101406, 33108, 85254, 99683, 101406, 3837, 100622, 69824, 47606, 3407, 99601, 85106, 103944, 55338, 44931, 88991, 3837, 80443, 114078, 57191, 32100, 1773, 20002, 101882, 91680, 31526, 5370, 69824, 3837, 104689, 92894, 66394, 3837, 99999, 103941, 9370, 5370, 104583, 102298, 55338, 100001, 44931, 9370, 69824, 3837, 103991, 82700, 103124, 46944, 64429, 1773, 101071, 107189, 100278, 61443, 32100, 57191, 44931, 114078, 3837, 101912, 107189, 376, 67, 16384, 9370, 117661, 25511, 88991, 3837, 100631, 80094, 64471, 88991, 68805, 32108, 3407, 81167, 42192, 29056, 33447, 3837, 44063, 59151, 104387, 12857, 5370, 69824, 68805, 31526, 8997, 151668, 271, 9640, 220, 341, 262, 330, 9852, 2078, 788, 330, 17, 20, 15, 15, 15, 16, 756, 262, 330, 9852, 675, 788, 330, 17, 20, 114418, 15, 16, 756, 262, 330, 376, 67, 16384, 788, 830, 345, 262, 330, 6045, 788, 330, 16, 15, 15, 15, 15, 15, 15, 15, 756, 262, 330, 7698, 788, 220, 18, 21, 15, 345, 262, 330, 6045, 27234, 12135, 788, 830, 345, 262, 330, 7698, 27234, 12135, 788, 895, 345, 262, 330, 57603, 675, 788, 4383, 85254, 99419, 101406, 497, 330, 85254, 99683, 101406, 7026, 220, 456, 60], "total_duration": 26223295362, "load_duration": 3349643411, "prompt_eval_count": 265, "prompt_eval_duration": 3210435309, "eval_count": 827, "eval_duration": 19655360192}
2025-06-10 01:36:07,411 - __main__ - INFO - Raw model response: <think>
好的，我现在需要处理用户提供的交易文本，并将其解析为JSON数组，每个产品对应一个对象，最后返回数组，不包含其他文字说明。首先，我得仔细阅读用户的要求，确保每个产品字段都被正确提取。

首先，用户给出的文本是：“250001.IB 25国债01 买入 *1000万 3.6% 景益货币 景顺货币”。我需要先识别每个产品的结构。这里每个产品的结构看起来是资产代码、名称、交易方向、金额、利率、金额是否需请示、利率是否需请示以及基金名称列表。

首先，资产代码。用户指出资产代码需要是包含4位及以上纯数字，且不能被100整除，同时不能包含指定的关键词（如IB、SH、SZ）。在给定的文本中，资产代码是“250001”，这符合4位数字，并且不能被100整除。不过需要检查是否包含指定的关键词。这里关键词是IB，而资产代码是250001，没有包含IB之类的关键词，所以没问题。所以资产代码正确。

接下来是资产名称，这里用户给出的是“25国债01”，所以直接提取即可。

交易方向是“买入”，所以trdSide是true。

金额是*1000万，这里金额是否需请示是true，因为有*号。金额是1000万，所以amount是10000000？但用户可能希望金额是数字，所以可能需要转换为整数。不过用户可能接受数字形式，所以直接写1000万即可，或者用10000000？需要确认单位，但用户可能接受1000万，所以这里可能直接写10000000？不过有时候金额可能用英文，但用户要求数字，所以可能需要转换。但用户提供的文本是“*1000万”，所以金额是1000万，所以amount是10000000？或者可能直接写1000万？

然后利率是3.6%，所以rate是360。金额是否需请示是true，rate是否需请示是false，因为利率是3.6%没有*号，所以rateReqFlag是false？

基金名称是景益货币和景顺货币，需要提取到list中。所以fundName应该是一个数组，包含这两个名称。

现在检查每个字段是否正确：

- assetCode: 250001，正确。
- assetName: 25国债01，正确。
- trdSide: 买入，正确。
- amount: 1000万，金额是否需请示true，正确。
- rate: 3.6%（数字），正确。
- amountReqFlag: true，正确。
- rateReqFlag: false，正确。
- fundName: 景益货币和景顺货币，作为数组存在。

现在需要确保所有字段正确，没有遗漏或错误。用户要求只返回JSON数组，不需要其他说明，所以最终的JSON应该是包含所有这些字段的数组，每个产品对应一个对象。检查是否有拼写错误或字段遗漏，比如是否有trdSide的布尔值正确，或者金额是否正确格式化。

确认无误后，将结果整理成JSON数组格式返回。
</think>

[
  {
    "assetCode": "250001",
    "assetName": "25国债01",
    "trdSide": true,
    "amount": "10000000",
    "rate": 360,
    "amountReqFlag": true,
    "rateReqFlag": false,
    "fundName": ["景益货币", "景顺货币"]
  }
]
2025-06-10 01:36:07,412 - __main__ - ERROR - JSON decode error: Expecting value: line 1 column 1 (char 0)
2025-06-10 01:36:07,412 - __main__ - INFO - Extracted JSON string: {
    "assetCode": "250001",
    "assetName": "25国债01",
    "trdSide": true,
    "amount": "10000000",
    "rate": 360,
    "amountReqFlag": true,
    "rateReqFlag": false,
    "fundName": ["景益货币", "景顺货币"]
  }
2025-06-10 01:36:07,413 - __main__ - INFO - Successfully parsed bond data: {'assetCode': '250001', 'assetName': '25国债01', 'trdSide': True, 'amount': '10000000', 'rate': 360, 'amountReqFlag': True, 'rateReqFlag': False, 'fundName': ['景益货币', '景顺货币']}
2025-06-10 01:36:07,420 - __main__ - ERROR - Error validating parsed data: 1 validation error for BondParsedOutput
trdSide
  Input should be a valid string [type=string_type, input_value=True, input_type=bool]
    For further information visit https://errors.pydantic.dev/2.11/v/string_type
Traceback (most recent call last):
  File "/Users/liuyi/CursorProject/pythonProject1/main.py", line 300, in parse_bond_text
    result = BondParsedOutput(**parsed_data)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/liuyi/CursorProject/McpDemo3Py/weather/.venv/lib/python3.11/site-packages/pydantic/main.py", line 253, in __init__
    validated_self = self.__pydantic_validator__.validate_python(data, self_instance=self)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
pydantic_core._pydantic_core.ValidationError: 1 validation error for BondParsedOutput
trdSide
  Input should be a valid string [type=string_type, input_value=True, input_type=bool]
    For further information visit https://errors.pydantic.dev/2.11/v/string_type
2025-06-10 01:40:03,592 - __main__ - INFO - Starting bond text parsing service...
2025-06-10 01:40:11,450 - __main__ - INFO - Received request to parse bond text: 250001.IB 25国债01 买入 *1000万 3.6%  景益货币 景顺货币, prompt_type: 多产品指令语料解析
2025-06-10 01:40:11,463 - __main__ - INFO - Calling Ollama model with text: 250001.IB 25国债01 买入 *1000万 3.6%  景益货币 景顺货币, prompt_type: 多产品指令语料解析
2025-06-10 01:40:11,504 - __main__ - INFO - Ollama service is available
2025-06-10 01:40:11,534 - __main__ - INFO - Available models: {"models": [{"name": "qwen3:0.6b", "model": "qwen3:0.6b", "modified_at": "2025-05-08T01:27:52.753829715+08:00", "size": 522653526, "digest": "3bae9c93586b27bedaa979979733c2b0edd1d0defc745e9638f2161192a0ccf0", "details": {"parent_model": "", "format": "gguf", "family": "qwen3", "families": ["qwen3"], "parameter_size": "751.63M", "quantization_level": "Q4_K_M"}}]}
2025-06-10 01:40:11,549 - __main__ - INFO - Sending request to Ollama: {"model": "qwen3:0.6b", "prompt": "请将以下包含多个债券产品的交易文本解析为JSON数组格式，每个产品对应一个JSON对象，只返回JSON数组，不要包含其他文字说明：\n250001.IB 25国债01 买入 *1000万 3.6%  景益货币 景顺货币\n\n每个产品需要提取的字段：\n- assetCode: 债券代码为含有 4 位数字及以上纯数字不包括（小数点，加号等任意特殊字符）且不能被100整除或者含有任一关键字 (.IB,.SH,.SZ等，该关键字支持配置)；\n- assetName: 债券名称\n- trdSide: 交易方向（买入/卖出）\n- amount: 交易金额（数字）\n- rate: 利率（数字）\n- amountReqFlag: 金额是否需请示（布尔值，当金额前有*号时为true）\n- rateReqFlag: 利率是否需请示（布尔值，当利率前有*号时为true）\n- fundName: 基金名称,这是个list,需要提取出基金名称,可能包含多个基金名称\n\n", "stream": false}
2025-06-10 01:40:33,920 - __main__ - INFO - Received response from Ollama: {"model": "qwen3:0.6b", "created_at": "2025-06-09T17:40:33.909078Z", "response": "<think>\n好的，我需要处理用户提供的交易文本，解析为JSON数组，每个产品对应一个对象。首先，我得仔细阅读用户提供的文本，理解每个产品的结构和需要提取的字段。\n\n用户给出的文本是：“250001.IB 25国债01 买入 *1000万 3.6% 景益货币 景顺货币”。看起来这是一个债券产品的买入交易，涉及两个基金名称“景益货币”和“景顺货币”。我需要确定每个产品对应的字段，确保不包含任何多余的信息。\n\n首先，assetCode需要满足四个数字及以上纯数字，且不能被100整除。这里的250001看起来符合条件，因为它有8位数字，且没有小数点或特殊字符，但需要检查是否被100整除。250001除以100是2500.01，所以显然不是整数，所以满足条件。所以assetCode是正确的。\n\n接下来是assetName，这里应该是“25国债01”，因为债券名称是25国债01。\n\ntrdSide是买入，所以填入“买入”。\n\namount是*1000万，所以金额是1000万，但用户需要数字，可能需要转换为10000000？不过用户可能希望保留原样，所以这里可能需要检查是否正确，但根据用户要求，金额是数字，所以直接填1000万。不过需要确认是否应该转换为10000000，但用户可能希望保持原样，所以可能直接写10000000？不过原文本是*1000万，所以金额是1000万，所以正确。\n\nrate是3.6%，所以数值是0.036。\n\namountReqFlag是布尔值，金额前有*号，所以true。\n\nrateReqFlag是布尔值，利率前有*号，所以true。\n\nfundName是景益货币和景顺货币，但用户需要提取出基金名称，可能作为数组。这里可能需要检查是否每个基金名称都是单独的项，但用户可能希望每个基金名称单独列出，所以这里应该有两个基金名称，作为数组中的元素。\n\n现在检查每个字段是否符合要求：\n\n- assetCode: 250001，正确。\n- assetName: 25国债01，正确。\n- trdSide: 买入，正确。\n- amount: 1000万，正确。\n- rate: 3.6%，正确。\n- amountReqFlag: true，正确。\n- rateReqFlag: true，正确。\n- fundName: 两个基金名称，作为数组。\n\n确认所有字段都正确后，整理成JSON数组，确保没有多余的信息，只返回正确的结构。\n</think>\n\n[\n  {\n    \"assetCode\": \"250001\",\n    \"assetName\": \"25国债01\",\n    \"trdSide\": \"买入\",\n    \"amount\": 10000000,\n    \"rate\": 0.036,\n    \"amountReqFlag\": true,\n    \"rateReqFlag\": true,\n    \"fundName\": [\"景益货币\", \"景顺货币\"]\n  }\n]", "done": true, "done_reason": "stop", "context": [151644, 872, 198, 14880, 44063, 87752, 102298, 101213, 104976, 104703, 99886, 108704, 106637, 17714, 5370, 69824, 68805, 3837, 103991, 82700, 103124, 46944, 5370, 64429, 3837, 91680, 31526, 5370, 69824, 3837, 100148, 102298, 92894, 87335, 66394, 28311, 17, 20, 15, 15, 15, 16, 2447, 33, 220, 17, 20, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 220, 18, 13, 21, 4, 220, 6567, 247, 107, 99419, 101406, 6567, 247, 107, 99683, 101406, 271, 103991, 82700, 85106, 107439, 9370, 44931, 28311, 12, 9329, 2078, 25, 4891, 222, 118, 100054, 46100, 17714, 102704, 220, 19, 220, 24156, 82587, 109887, 100073, 82587, 16530, 100630, 9909, 30709, 8863, 27442, 3837, 20929, 17992, 49567, 108112, 101167, 48391, 7552, 100136, 53153, 99250, 16, 15, 15, 63431, 20755, 100631, 102704, 48888, 14777, 118294, 29465, 3256, 17515, 8590, 17515, 61228, 49567, 3837, 75882, 118294, 100143, 85767, 8, 59217, 12, 9329, 675, 25, 4891, 222, 118, 100054, 29991, 198, 12, 489, 67, 16384, 25, 220, 99886, 100696, 9909, 108532, 14, 109430, 23083, 12, 3311, 25, 220, 99886, 80094, 9909, 82587, 23083, 12, 4379, 25, 19468, 102, 95355, 9909, 82587, 23083, 12, 3311, 27234, 12135, 25, 220, 80094, 64471, 58362, 14880, 19793, 9909, 117661, 25511, 3837, 39165, 80094, 24562, 18830, 9, 17992, 13343, 17714, 1866, 23083, 12, 4379, 27234, 12135, 25, 19468, 102, 95355, 64471, 58362, 14880, 19793, 9909, 117661, 25511, 3837, 39165, 102299, 24562, 18830, 9, 17992, 13343, 17714, 1866, 23083, 12, 3802, 675, 25, 4891, 253, 118, 34230, 29991, 11, 100346, 18947, 1607, 11, 85106, 107439, 20221, 100025, 29991, 11, 87267, 102298, 101213, 100025, 29991, 271, 151645, 198, 151644, 77091, 198, 151667, 198, 99692, 3837, 35946, 85106, 54542, 20002, 103008, 99886, 108704, 3837, 106637, 17714, 5370, 69824, 3837, 103991, 82700, 103124, 46944, 64429, 1773, 101140, 3837, 35946, 49828, 104857, 101113, 20002, 103008, 108704, 3837, 101128, 103991, 104703, 100166, 33108, 85106, 107439, 9370, 44931, 3407, 20002, 107485, 9370, 108704, 20412, 36987, 17, 20, 15, 15, 15, 16, 2447, 33, 220, 17, 20, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 220, 18, 13, 21, 4, 6567, 247, 107, 99419, 101406, 6567, 247, 107, 99683, 101406, 55807, 104544, 105464, 104976, 104703, 108532, 99886, 3837, 102031, 100369, 100025, 29991, 2073, 85254, 99419, 101406, 854, 33108, 2073, 85254, 99683, 101406, 55807, 35946, 85106, 60610, 103991, 82700, 110019, 44931, 3837, 103944, 16530, 102298, 99885, 115916, 105427, 3407, 101140, 3837, 9852, 2078, 85106, 101929, 100802, 82587, 109887, 100073, 82587, 3837, 100136, 53153, 99250, 16, 15, 15, 63431, 20755, 1773, 106370, 17, 20, 15, 15, 15, 16, 104544, 113954, 3837, 108884, 18830, 23, 24156, 82587, 3837, 100136, 80443, 30709, 8863, 27442, 57191, 101167, 48391, 3837, 77288, 85106, 101071, 64471, 99250, 16, 15, 15, 63431, 20755, 1773, 17, 20, 15, 15, 15, 16, 20755, 23031, 16, 15, 15, 20412, 17, 20, 15, 15, 13, 15, 16, 3837, 99999, 105092, 99520, 63431, 8863, 3837, 99999, 101929, 76095, 1773, 99999, 9852, 2078, 20412, 105045, 3407, 104326, 20412, 9852, 675, 3837, 99817, 104583, 2073, 17, 20, 114418, 15, 16, 33590, 99519, 104976, 29991, 20412, 17, 20, 114418, 15, 16, 3407, 376, 67, 16384, 20412, 108532, 3837, 99999, 68756, 17254, 2073, 108532, 96332, 6045, 20412, 9, 16, 15, 15, 15, 31207, 3837, 99999, 80094, 20412, 16, 15, 15, 15, 31207, 3837, 77288, 20002, 85106, 82587, 3837, 87267, 85106, 105359, 17714, 16, 15, 15, 15, 15, 15, 15, 15, 11319, 100632, 20002, 87267, 99880, 104465, 52129, 90885, 3837, 99999, 99817, 87267, 85106, 101071, 64471, 88991, 3837, 77288, 100345, 20002, 101882, 3837, 80094, 20412, 82587, 3837, 99999, 101041, 68756, 16, 15, 15, 15, 31207, 1773, 100632, 85106, 81167, 64471, 99730, 105359, 17714, 16, 15, 15, 15, 15, 15, 15, 15, 3837, 77288, 20002, 87267, 99880, 100662, 52129, 90885, 3837, 99999, 87267, 101041, 61443, 16, 15, 15, 15, 15, 15, 15, 15, 11319, 100632, 103283, 21894, 20412, 9, 16, 15, 15, 15, 31207, 3837, 99999, 80094, 20412, 16, 15, 15, 15, 31207, 3837, 99999, 88991, 3407, 7698, 20412, 18, 13, 21, 69982, 99999, 111944, 20412, 15, 13, 15, 18, 21, 3407, 6045, 27234, 12135, 20412, 117661, 25511, 3837, 80094, 24562, 18830, 9, 17992, 3837, 99999, 1866, 3407, 7698, 27234, 12135, 20412, 117661, 25511, 3837, 102299, 24562, 18830, 9, 17992, 3837, 99999, 1866, 3407, 57603, 675, 20412, 85254, 99419, 101406, 33108, 85254, 99683, 101406, 3837, 77288, 20002, 85106, 107439, 20221, 100025, 29991, 3837, 87267, 100622, 69824, 1773, 99817, 87267, 85106, 101071, 64471, 103991, 100025, 29991, 100132, 105818, 9370, 47882, 3837, 77288, 20002, 87267, 99880, 103991, 100025, 29991, 105818, 114116, 3837, 99999, 99817, 99730, 108534, 100025, 29991, 3837, 100622, 69824, 101047, 102268, 3407, 99601, 101071, 103991, 44931, 64471, 101137, 101882, 48443, 12, 9329, 2078, 25, 220, 17, 20, 15, 15, 15, 16, 3837, 88991, 8997, 12, 9329, 675, 25, 220, 17, 20, 114418, 15, 16, 3837, 88991, 8997, 12, 489, 67, 16384, 25, 220, 108532, 3837, 88991, 8997, 12, 3311, 25, 220, 16, 15, 15, 15, 31207, 3837, 88991, 8997, 12, 4379, 25, 220, 18, 13, 21, 69982, 88991, 8997, 12, 3311, 27234, 12135, 25, 830, 3837, 88991, 8997, 12, 4379, 27234, 12135, 25, 830, 3837, 88991, 8997, 12, 3802, 675, 25, 220, 100369, 100025, 29991, 3837, 100622, 69824, 3407, 81167, 55338, 44931, 71268, 88991, 33447, 3837, 104387, 12857, 5370, 69824, 3837, 103944, 80443, 115916, 105427, 3837, 91680, 31526, 105045, 100166, 8997, 151668, 271, 9640, 220, 341, 262, 330, 9852, 2078, 788, 330, 17, 20, 15, 15, 15, 16, 756, 262, 330, 9852, 675, 788, 330, 17, 20, 114418, 15, 16, 756, 262, 330, 376, 67, 16384, 788, 330, 108532, 756, 262, 330, 6045, 788, 220, 16, 15, 15, 15, 15, 15, 15, 15, 345, 262, 330, 7698, 788, 220, 15, 13, 15, 18, 21, 345, 262, 330, 6045, 27234, 12135, 788, 830, 345, 262, 330, 7698, 27234, 12135, 788, 830, 345, 262, 330, 57603, 675, 788, 4383, 85254, 99419, 101406, 497, 330, 85254, 99683, 101406, 7026, 220, 456, 60], "total_duration": 22354119183, "load_duration": 37835189, "prompt_eval_count": 265, "prompt_eval_duration": 28912536, "eval_count": 707, "eval_duration": 22284471715}
2025-06-10 01:40:33,920 - __main__ - INFO - Validating Ollama response: {"model": "qwen3:0.6b", "created_at": "2025-06-09T17:40:33.909078Z", "response": "<think>\n好的，我需要处理用户提供的交易文本，解析为JSON数组，每个产品对应一个对象。首先，我得仔细阅读用户提供的文本，理解每个产品的结构和需要提取的字段。\n\n用户给出的文本是：“250001.IB 25国债01 买入 *1000万 3.6% 景益货币 景顺货币”。看起来这是一个债券产品的买入交易，涉及两个基金名称“景益货币”和“景顺货币”。我需要确定每个产品对应的字段，确保不包含任何多余的信息。\n\n首先，assetCode需要满足四个数字及以上纯数字，且不能被100整除。这里的250001看起来符合条件，因为它有8位数字，且没有小数点或特殊字符，但需要检查是否被100整除。250001除以100是2500.01，所以显然不是整数，所以满足条件。所以assetCode是正确的。\n\n接下来是assetName，这里应该是“25国债01”，因为债券名称是25国债01。\n\ntrdSide是买入，所以填入“买入”。\n\namount是*1000万，所以金额是1000万，但用户需要数字，可能需要转换为10000000？不过用户可能希望保留原样，所以这里可能需要检查是否正确，但根据用户要求，金额是数字，所以直接填1000万。不过需要确认是否应该转换为10000000，但用户可能希望保持原样，所以可能直接写10000000？不过原文本是*1000万，所以金额是1000万，所以正确。\n\nrate是3.6%，所以数值是0.036。\n\namountReqFlag是布尔值，金额前有*号，所以true。\n\nrateReqFlag是布尔值，利率前有*号，所以true。\n\nfundName是景益货币和景顺货币，但用户需要提取出基金名称，可能作为数组。这里可能需要检查是否每个基金名称都是单独的项，但用户可能希望每个基金名称单独列出，所以这里应该有两个基金名称，作为数组中的元素。\n\n现在检查每个字段是否符合要求：\n\n- assetCode: 250001，正确。\n- assetName: 25国债01，正确。\n- trdSide: 买入，正确。\n- amount: 1000万，正确。\n- rate: 3.6%，正确。\n- amountReqFlag: true，正确。\n- rateReqFlag: true，正确。\n- fundName: 两个基金名称，作为数组。\n\n确认所有字段都正确后，整理成JSON数组，确保没有多余的信息，只返回正确的结构。\n</think>\n\n[\n  {\n    \"assetCode\": \"250001\",\n    \"assetName\": \"25国债01\",\n    \"trdSide\": \"买入\",\n    \"amount\": 10000000,\n    \"rate\": 0.036,\n    \"amountReqFlag\": true,\n    \"rateReqFlag\": true,\n    \"fundName\": [\"景益货币\", \"景顺货币\"]\n  }\n]", "done": true, "done_reason": "stop", "context": [151644, 872, 198, 14880, 44063, 87752, 102298, 101213, 104976, 104703, 99886, 108704, 106637, 17714, 5370, 69824, 68805, 3837, 103991, 82700, 103124, 46944, 5370, 64429, 3837, 91680, 31526, 5370, 69824, 3837, 100148, 102298, 92894, 87335, 66394, 28311, 17, 20, 15, 15, 15, 16, 2447, 33, 220, 17, 20, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 220, 18, 13, 21, 4, 220, 6567, 247, 107, 99419, 101406, 6567, 247, 107, 99683, 101406, 271, 103991, 82700, 85106, 107439, 9370, 44931, 28311, 12, 9329, 2078, 25, 4891, 222, 118, 100054, 46100, 17714, 102704, 220, 19, 220, 24156, 82587, 109887, 100073, 82587, 16530, 100630, 9909, 30709, 8863, 27442, 3837, 20929, 17992, 49567, 108112, 101167, 48391, 7552, 100136, 53153, 99250, 16, 15, 15, 63431, 20755, 100631, 102704, 48888, 14777, 118294, 29465, 3256, 17515, 8590, 17515, 61228, 49567, 3837, 75882, 118294, 100143, 85767, 8, 59217, 12, 9329, 675, 25, 4891, 222, 118, 100054, 29991, 198, 12, 489, 67, 16384, 25, 220, 99886, 100696, 9909, 108532, 14, 109430, 23083, 12, 3311, 25, 220, 99886, 80094, 9909, 82587, 23083, 12, 4379, 25, 19468, 102, 95355, 9909, 82587, 23083, 12, 3311, 27234, 12135, 25, 220, 80094, 64471, 58362, 14880, 19793, 9909, 117661, 25511, 3837, 39165, 80094, 24562, 18830, 9, 17992, 13343, 17714, 1866, 23083, 12, 4379, 27234, 12135, 25, 19468, 102, 95355, 64471, 58362, 14880, 19793, 9909, 117661, 25511, 3837, 39165, 102299, 24562, 18830, 9, 17992, 13343, 17714, 1866, 23083, 12, 3802, 675, 25, 4891, 253, 118, 34230, 29991, 11, 100346, 18947, 1607, 11, 85106, 107439, 20221, 100025, 29991, 11, 87267, 102298, 101213, 100025, 29991, 271, 151645, 198, 151644, 77091, 198, 151667, 198, 99692, 3837, 35946, 85106, 54542, 20002, 103008, 99886, 108704, 3837, 106637, 17714, 5370, 69824, 3837, 103991, 82700, 103124, 46944, 64429, 1773, 101140, 3837, 35946, 49828, 104857, 101113, 20002, 103008, 108704, 3837, 101128, 103991, 104703, 100166, 33108, 85106, 107439, 9370, 44931, 3407, 20002, 107485, 9370, 108704, 20412, 36987, 17, 20, 15, 15, 15, 16, 2447, 33, 220, 17, 20, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 220, 18, 13, 21, 4, 6567, 247, 107, 99419, 101406, 6567, 247, 107, 99683, 101406, 55807, 104544, 105464, 104976, 104703, 108532, 99886, 3837, 102031, 100369, 100025, 29991, 2073, 85254, 99419, 101406, 854, 33108, 2073, 85254, 99683, 101406, 55807, 35946, 85106, 60610, 103991, 82700, 110019, 44931, 3837, 103944, 16530, 102298, 99885, 115916, 105427, 3407, 101140, 3837, 9852, 2078, 85106, 101929, 100802, 82587, 109887, 100073, 82587, 3837, 100136, 53153, 99250, 16, 15, 15, 63431, 20755, 1773, 106370, 17, 20, 15, 15, 15, 16, 104544, 113954, 3837, 108884, 18830, 23, 24156, 82587, 3837, 100136, 80443, 30709, 8863, 27442, 57191, 101167, 48391, 3837, 77288, 85106, 101071, 64471, 99250, 16, 15, 15, 63431, 20755, 1773, 17, 20, 15, 15, 15, 16, 20755, 23031, 16, 15, 15, 20412, 17, 20, 15, 15, 13, 15, 16, 3837, 99999, 105092, 99520, 63431, 8863, 3837, 99999, 101929, 76095, 1773, 99999, 9852, 2078, 20412, 105045, 3407, 104326, 20412, 9852, 675, 3837, 99817, 104583, 2073, 17, 20, 114418, 15, 16, 33590, 99519, 104976, 29991, 20412, 17, 20, 114418, 15, 16, 3407, 376, 67, 16384, 20412, 108532, 3837, 99999, 68756, 17254, 2073, 108532, 96332, 6045, 20412, 9, 16, 15, 15, 15, 31207, 3837, 99999, 80094, 20412, 16, 15, 15, 15, 31207, 3837, 77288, 20002, 85106, 82587, 3837, 87267, 85106, 105359, 17714, 16, 15, 15, 15, 15, 15, 15, 15, 11319, 100632, 20002, 87267, 99880, 104465, 52129, 90885, 3837, 99999, 99817, 87267, 85106, 101071, 64471, 88991, 3837, 77288, 100345, 20002, 101882, 3837, 80094, 20412, 82587, 3837, 99999, 101041, 68756, 16, 15, 15, 15, 31207, 1773, 100632, 85106, 81167, 64471, 99730, 105359, 17714, 16, 15, 15, 15, 15, 15, 15, 15, 3837, 77288, 20002, 87267, 99880, 100662, 52129, 90885, 3837, 99999, 87267, 101041, 61443, 16, 15, 15, 15, 15, 15, 15, 15, 11319, 100632, 103283, 21894, 20412, 9, 16, 15, 15, 15, 31207, 3837, 99999, 80094, 20412, 16, 15, 15, 15, 31207, 3837, 99999, 88991, 3407, 7698, 20412, 18, 13, 21, 69982, 99999, 111944, 20412, 15, 13, 15, 18, 21, 3407, 6045, 27234, 12135, 20412, 117661, 25511, 3837, 80094, 24562, 18830, 9, 17992, 3837, 99999, 1866, 3407, 7698, 27234, 12135, 20412, 117661, 25511, 3837, 102299, 24562, 18830, 9, 17992, 3837, 99999, 1866, 3407, 57603, 675, 20412, 85254, 99419, 101406, 33108, 85254, 99683, 101406, 3837, 77288, 20002, 85106, 107439, 20221, 100025, 29991, 3837, 87267, 100622, 69824, 1773, 99817, 87267, 85106, 101071, 64471, 103991, 100025, 29991, 100132, 105818, 9370, 47882, 3837, 77288, 20002, 87267, 99880, 103991, 100025, 29991, 105818, 114116, 3837, 99999, 99817, 99730, 108534, 100025, 29991, 3837, 100622, 69824, 101047, 102268, 3407, 99601, 101071, 103991, 44931, 64471, 101137, 101882, 48443, 12, 9329, 2078, 25, 220, 17, 20, 15, 15, 15, 16, 3837, 88991, 8997, 12, 9329, 675, 25, 220, 17, 20, 114418, 15, 16, 3837, 88991, 8997, 12, 489, 67, 16384, 25, 220, 108532, 3837, 88991, 8997, 12, 3311, 25, 220, 16, 15, 15, 15, 31207, 3837, 88991, 8997, 12, 4379, 25, 220, 18, 13, 21, 69982, 88991, 8997, 12, 3311, 27234, 12135, 25, 830, 3837, 88991, 8997, 12, 4379, 27234, 12135, 25, 830, 3837, 88991, 8997, 12, 3802, 675, 25, 220, 100369, 100025, 29991, 3837, 100622, 69824, 3407, 81167, 55338, 44931, 71268, 88991, 33447, 3837, 104387, 12857, 5370, 69824, 3837, 103944, 80443, 115916, 105427, 3837, 91680, 31526, 105045, 100166, 8997, 151668, 271, 9640, 220, 341, 262, 330, 9852, 2078, 788, 330, 17, 20, 15, 15, 15, 16, 756, 262, 330, 9852, 675, 788, 330, 17, 20, 114418, 15, 16, 756, 262, 330, 376, 67, 16384, 788, 330, 108532, 756, 262, 330, 6045, 788, 220, 16, 15, 15, 15, 15, 15, 15, 15, 345, 262, 330, 7698, 788, 220, 15, 13, 15, 18, 21, 345, 262, 330, 6045, 27234, 12135, 788, 830, 345, 262, 330, 7698, 27234, 12135, 788, 830, 345, 262, 330, 57603, 675, 788, 4383, 85254, 99419, 101406, 497, 330, 85254, 99683, 101406, 7026, 220, 456, 60], "total_duration": 22354119183, "load_duration": 37835189, "prompt_eval_count": 265, "prompt_eval_duration": 28912536, "eval_count": 707, "eval_duration": 22284471715}
2025-06-10 01:40:33,920 - __main__ - INFO - Raw model response: <think>
好的，我需要处理用户提供的交易文本，解析为JSON数组，每个产品对应一个对象。首先，我得仔细阅读用户提供的文本，理解每个产品的结构和需要提取的字段。

用户给出的文本是：“250001.IB 25国债01 买入 *1000万 3.6% 景益货币 景顺货币”。看起来这是一个债券产品的买入交易，涉及两个基金名称“景益货币”和“景顺货币”。我需要确定每个产品对应的字段，确保不包含任何多余的信息。

首先，assetCode需要满足四个数字及以上纯数字，且不能被100整除。这里的250001看起来符合条件，因为它有8位数字，且没有小数点或特殊字符，但需要检查是否被100整除。250001除以100是2500.01，所以显然不是整数，所以满足条件。所以assetCode是正确的。

接下来是assetName，这里应该是“25国债01”，因为债券名称是25国债01。

trdSide是买入，所以填入“买入”。

amount是*1000万，所以金额是1000万，但用户需要数字，可能需要转换为10000000？不过用户可能希望保留原样，所以这里可能需要检查是否正确，但根据用户要求，金额是数字，所以直接填1000万。不过需要确认是否应该转换为10000000，但用户可能希望保持原样，所以可能直接写10000000？不过原文本是*1000万，所以金额是1000万，所以正确。

rate是3.6%，所以数值是0.036。

amountReqFlag是布尔值，金额前有*号，所以true。

rateReqFlag是布尔值，利率前有*号，所以true。

fundName是景益货币和景顺货币，但用户需要提取出基金名称，可能作为数组。这里可能需要检查是否每个基金名称都是单独的项，但用户可能希望每个基金名称单独列出，所以这里应该有两个基金名称，作为数组中的元素。

现在检查每个字段是否符合要求：

- assetCode: 250001，正确。
- assetName: 25国债01，正确。
- trdSide: 买入，正确。
- amount: 1000万，正确。
- rate: 3.6%，正确。
- amountReqFlag: true，正确。
- rateReqFlag: true，正确。
- fundName: 两个基金名称，作为数组。

确认所有字段都正确后，整理成JSON数组，确保没有多余的信息，只返回正确的结构。
</think>

[
  {
    "assetCode": "250001",
    "assetName": "25国债01",
    "trdSide": "买入",
    "amount": 10000000,
    "rate": 0.036,
    "amountReqFlag": true,
    "rateReqFlag": true,
    "fundName": ["景益货币", "景顺货币"]
  }
]
2025-06-10 01:40:33,920 - __main__ - ERROR - JSON decode error: Expecting value: line 1 column 1 (char 0)
2025-06-10 01:40:33,921 - __main__ - INFO - Extracted JSON string: {
    "assetCode": "250001",
    "assetName": "25国债01",
    "trdSide": "买入",
    "amount": 10000000,
    "rate": 0.036,
    "amountReqFlag": true,
    "rateReqFlag": true,
    "fundName": ["景益货币", "景顺货币"]
  }
2025-06-10 01:40:33,921 - __main__ - INFO - Normalizing parsed data: {'assetCode': '250001', 'assetName': '25国债01', 'trdSide': '买入', 'amount': 10000000, 'rate': 0.036, 'amountReqFlag': True, 'rateReqFlag': True, 'fundName': ['景益货币', '景顺货币']}
2025-06-10 01:40:33,921 - __main__ - INFO - Normalized data: {'assetCode': '250001', 'assetName': '25国债01', 'trdSide': '买入', 'amount': 10000000.0, 'rate': 0.036, 'amountReqFlag': True, 'rateReqFlag': True, 'fundName': ['景益货币', '景顺货币']}
2025-06-10 01:40:33,922 - __main__ - INFO - Successfully parsed bond data: {'assetCode': '250001', 'assetName': '25国债01', 'trdSide': '买入', 'amount': 10000000.0, 'rate': 0.036, 'amountReqFlag': True, 'rateReqFlag': True, 'fundName': ['景益货币', '景顺货币']}
2025-06-10 01:40:33,924 - __main__ - INFO - Successfully validated and returned parsed data: assetCode='250001' assetName='25国债01' trdSide='买入' amount=10000000.0 rate=0.036 amountReqFlag=True rateReqFlag=True fundName=['景益货币', '景顺货币']
2025-06-10 02:59:19,590 - __main__ - INFO - Starting bond text parsing service...
2025-06-10 02:59:37,956 - __main__ - INFO - Received smart parse request: 250001.IB 25国债01 买入 *1000万 3.6%  景益货币 景顺货币, context: 
2025-06-10 02:59:37,957 - __main__ - INFO - AI recommended prompt type: 带请示单一指令解析
2025-06-10 02:59:37,957 - __main__ - INFO - AI reasoning: 基于以下特征选择了'带请示单一指令解析'模板：包含*号=True, 多产品=False, 是问题=False, 产品数量=1
2025-06-10 02:59:37,957 - __main__ - INFO - Calling Ollama model with text: 250001.IB 25国债01 买入 *1000万 3.6%  景益货币 景顺货币, prompt_type: 带请示单一指令解析
2025-06-10 02:59:37,978 - __main__ - INFO - Ollama service is available
2025-06-10 02:59:37,983 - __main__ - INFO - Available models: {"models": [{"name": "qwen3:0.6b", "model": "qwen3:0.6b", "modified_at": "2025-05-08T01:27:52.753829715+08:00", "size": 522653526, "digest": "3bae9c93586b27bedaa979979733c2b0edd1d0defc745e9638f2161192a0ccf0", "details": {"parent_model": "", "format": "gguf", "family": "qwen3", "families": ["qwen3"], "parameter_size": "751.63M", "quantization_level": "Q4_K_M"}}]}
2025-06-10 02:59:37,998 - __main__ - INFO - Sending request to Ollama: {"model": "qwen3:0.6b", "prompt": "请将以下债券交易文本解析为JSON格式，特别注意标有*号的金额和利率需要请示，只返回JSON对象，不要包含其他文字说明：\n250001.IB 25国债01 买入 *1000万 3.6%  景益货币 景顺货币\n\n需要提取的字段：\n- assetCode: 债券代码为含有 4 位数字及以上纯数字不包括（小数点，加号等任意特殊字符）且不能被100整除或者含有任一关键字 (.IB,.SH,.SZ等，该关键字支持配置)；\n- assetName: 债券名称\n- trdSide: 交易方向（买入/卖出）\n- amount: 交易金额（数字）\n- rate: 利率（数字）\n- amountReqFlag: 金额是否需请示（布尔值，当金额前有*号或包含\"可议价\"、\"价格可议\"等关键词时为true）\n- rateReqFlag: 利率是否需请示（布尔值，当利率前有*号或包含\"可议价\"、\"价格可议\"等关键词时为true）\n\n", "stream": false}
2025-06-10 02:59:54,717 - __main__ - INFO - Received response from Ollama: {"model": "qwen3:0.6b", "created_at": "2025-06-09T18:59:54.703067Z", "response": "<think>\n好的，我需要处理用户提供的债券交易文本，并将其解析为JSON格式。首先，我需要仔细阅读用户的要求，确保不遗漏任何细节。\n\n用户提供的文本是：“250001.IB 25国债01 买入 *1000万 3.6% 景益货币 景顺货币”。目标字段包括assetCode、assetName、trdSide、amount、rate、amountReqFlag、rateReqFlag。\n\n首先，assetCode需要满足一定条件。用户提到不能包含小数点、加号等特殊字符，且四位数字及以上。原文本中的250001.IB看起来符合这个条件，因为是四位数字加上点，且没有特殊字符。所以assetCode应该是250001.IB。\n\n接下来，assetName是“25国债01”，没有问题，直接提取。\n\ntrdSide是“买入”，正确。\n\namount是*1000万，这里需要检查金额是否需请示。用户指出如果金额前有*号或包含“可议价”等关键词时为true。原文本中的*1000万符合这种情况，所以amountReqFlag设为true。\n\nrate是3.6%，但需要检查是否需请示。利率前有*号，所以rateReqFlag设为true。\n\n现在检查所有字段是否符合要求。确认没有遗漏，并且所有字段都正确提取。最后生成JSON对象，确保没有多余的文字说明。\n</think>\n\n{\n  \"assetCode\": \"250001.IB\",\n  \"assetName\": \"25国债01\",\n  \"trdSide\": \"买入\",\n  \"amount\": 1000000,\n  \"rate\": 3.6,\n  \"amountReqFlag\": true,\n  \"rateReqFlag\": true\n}", "done": true, "done_reason": "stop", "context": [151644, 872, 198, 14880, 44063, 87752, 104976, 99886, 108704, 106637, 17714, 5370, 68805, 3837, 100654, 60533, 30844, 18830, 9, 17992, 9370, 80094, 33108, 102299, 85106, 14880, 19793, 3837, 91680, 31526, 5370, 64429, 3837, 100148, 102298, 92894, 87335, 66394, 28311, 17, 20, 15, 15, 15, 16, 2447, 33, 220, 17, 20, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 220, 18, 13, 21, 4, 220, 6567, 247, 107, 99419, 101406, 6567, 247, 107, 99683, 101406, 271, 85106, 107439, 9370, 44931, 28311, 12, 9329, 2078, 25, 4891, 222, 118, 100054, 46100, 17714, 102704, 220, 19, 220, 24156, 82587, 109887, 100073, 82587, 16530, 100630, 9909, 30709, 8863, 27442, 3837, 20929, 17992, 49567, 108112, 101167, 48391, 7552, 100136, 53153, 99250, 16, 15, 15, 63431, 20755, 100631, 102704, 48888, 14777, 118294, 29465, 3256, 17515, 8590, 17515, 61228, 49567, 3837, 75882, 118294, 100143, 85767, 8, 59217, 12, 9329, 675, 25, 4891, 222, 118, 100054, 29991, 198, 12, 489, 67, 16384, 25, 220, 99886, 100696, 9909, 108532, 14, 109430, 23083, 12, 3311, 25, 220, 99886, 80094, 9909, 82587, 23083, 12, 4379, 25, 19468, 102, 95355, 9909, 82587, 23083, 12, 3311, 27234, 12135, 25, 220, 80094, 64471, 58362, 14880, 19793, 9909, 117661, 25511, 3837, 39165, 80094, 24562, 18830, 9, 17992, 57191, 102298, 1, 30440, 96422, 50292, 1, 5373, 1, 97480, 30440, 96422, 1, 49567, 105291, 13343, 17714, 1866, 23083, 12, 4379, 27234, 12135, 25, 19468, 102, 95355, 64471, 58362, 14880, 19793, 9909, 117661, 25511, 3837, 39165, 102299, 24562, 18830, 9, 17992, 57191, 102298, 1, 30440, 96422, 50292, 1, 5373, 1, 97480, 30440, 96422, 1, 49567, 105291, 13343, 17714, 1866, 27866, 151645, 198, 151644, 77091, 198, 151667, 198, 99692, 3837, 35946, 85106, 54542, 20002, 103008, 104976, 99886, 108704, 90395, 105278, 106637, 17714, 5370, 68805, 1773, 101140, 3837, 35946, 85106, 104857, 101113, 20002, 104272, 3837, 103944, 16530, 114078, 99885, 104449, 3407, 20002, 103008, 108704, 20412, 36987, 17, 20, 15, 15, 15, 16, 2447, 33, 220, 17, 20, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 220, 18, 13, 21, 4, 6567, 247, 107, 99419, 101406, 6567, 247, 107, 99683, 101406, 55807, 100160, 44931, 100630, 9852, 2078, 5373, 9852, 675, 5373, 376, 67, 16384, 5373, 6045, 5373, 7698, 5373, 6045, 27234, 12135, 5373, 7698, 27234, 12135, 3407, 101140, 3837, 9852, 2078, 85106, 101929, 99623, 76095, 1773, 20002, 104496, 53153, 102298, 30709, 8863, 27442, 5373, 20929, 17992, 49567, 101167, 48391, 3837, 100136, 115605, 82587, 109887, 1773, 103283, 21894, 101047, 17, 20, 15, 15, 15, 16, 2447, 33, 104544, 101137, 99487, 76095, 3837, 99519, 20412, 115605, 82587, 102189, 27442, 3837, 100136, 80443, 101167, 48391, 1773, 99999, 9852, 2078, 104583, 17, 20, 15, 15, 15, 16, 2447, 33, 3407, 104326, 3837, 9852, 675, 20412, 2073, 17, 20, 114418, 15, 16, 33590, 80443, 86119, 3837, 101041, 107439, 3407, 376, 67, 16384, 20412, 2073, 108532, 33590, 88991, 3407, 6045, 20412, 9, 16, 15, 15, 15, 31207, 3837, 99817, 85106, 101071, 80094, 64471, 58362, 14880, 19793, 1773, 20002, 103988, 62244, 80094, 24562, 18830, 9, 17992, 57191, 102298, 2073, 30440, 96422, 50292, 854, 49567, 105291, 13343, 17714, 1866, 1773, 103283, 21894, 101047, 9, 16, 15, 15, 15, 31207, 101137, 106334, 3837, 99999, 6045, 27234, 12135, 29635, 17714, 1866, 3407, 7698, 20412, 18, 13, 21, 69982, 77288, 85106, 101071, 64471, 58362, 14880, 19793, 1773, 102299, 24562, 18830, 9, 17992, 3837, 99999, 7698, 27234, 12135, 29635, 17714, 1866, 3407, 99601, 101071, 55338, 44931, 64471, 101137, 101882, 1773, 81167, 80443, 114078, 90395, 100136, 55338, 44931, 71268, 88991, 107439, 1773, 100161, 43959, 5370, 64429, 3837, 103944, 80443, 115916, 109502, 66394, 8997, 151668, 271, 515, 220, 330, 9852, 2078, 788, 330, 17, 20, 15, 15, 15, 16, 2447, 33, 756, 220, 330, 9852, 675, 788, 330, 17, 20, 114418, 15, 16, 756, 220, 330, 376, 67, 16384, 788, 330, 108532, 756, 220, 330, 6045, 788, 220, 16, 15, 15, 15, 15, 15, 15, 345, 220, 330, 7698, 788, 220, 18, 13, 21, 345, 220, 330, 6045, 27234, 12135, 788, 830, 345, 220, 330, 7698, 27234, 12135, 788, 830, 198, 92], "total_duration": 16700474669, "load_duration": 2772382055, "prompt_eval_count": 270, "prompt_eval_duration": 2596643666, "eval_count": 394, "eval_duration": 11328468639}
2025-06-10 02:59:54,717 - __main__ - INFO - Validating Ollama response: {"model": "qwen3:0.6b", "created_at": "2025-06-09T18:59:54.703067Z", "response": "<think>\n好的，我需要处理用户提供的债券交易文本，并将其解析为JSON格式。首先，我需要仔细阅读用户的要求，确保不遗漏任何细节。\n\n用户提供的文本是：“250001.IB 25国债01 买入 *1000万 3.6% 景益货币 景顺货币”。目标字段包括assetCode、assetName、trdSide、amount、rate、amountReqFlag、rateReqFlag。\n\n首先，assetCode需要满足一定条件。用户提到不能包含小数点、加号等特殊字符，且四位数字及以上。原文本中的250001.IB看起来符合这个条件，因为是四位数字加上点，且没有特殊字符。所以assetCode应该是250001.IB。\n\n接下来，assetName是“25国债01”，没有问题，直接提取。\n\ntrdSide是“买入”，正确。\n\namount是*1000万，这里需要检查金额是否需请示。用户指出如果金额前有*号或包含“可议价”等关键词时为true。原文本中的*1000万符合这种情况，所以amountReqFlag设为true。\n\nrate是3.6%，但需要检查是否需请示。利率前有*号，所以rateReqFlag设为true。\n\n现在检查所有字段是否符合要求。确认没有遗漏，并且所有字段都正确提取。最后生成JSON对象，确保没有多余的文字说明。\n</think>\n\n{\n  \"assetCode\": \"250001.IB\",\n  \"assetName\": \"25国债01\",\n  \"trdSide\": \"买入\",\n  \"amount\": 1000000,\n  \"rate\": 3.6,\n  \"amountReqFlag\": true,\n  \"rateReqFlag\": true\n}", "done": true, "done_reason": "stop", "context": [151644, 872, 198, 14880, 44063, 87752, 104976, 99886, 108704, 106637, 17714, 5370, 68805, 3837, 100654, 60533, 30844, 18830, 9, 17992, 9370, 80094, 33108, 102299, 85106, 14880, 19793, 3837, 91680, 31526, 5370, 64429, 3837, 100148, 102298, 92894, 87335, 66394, 28311, 17, 20, 15, 15, 15, 16, 2447, 33, 220, 17, 20, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 220, 18, 13, 21, 4, 220, 6567, 247, 107, 99419, 101406, 6567, 247, 107, 99683, 101406, 271, 85106, 107439, 9370, 44931, 28311, 12, 9329, 2078, 25, 4891, 222, 118, 100054, 46100, 17714, 102704, 220, 19, 220, 24156, 82587, 109887, 100073, 82587, 16530, 100630, 9909, 30709, 8863, 27442, 3837, 20929, 17992, 49567, 108112, 101167, 48391, 7552, 100136, 53153, 99250, 16, 15, 15, 63431, 20755, 100631, 102704, 48888, 14777, 118294, 29465, 3256, 17515, 8590, 17515, 61228, 49567, 3837, 75882, 118294, 100143, 85767, 8, 59217, 12, 9329, 675, 25, 4891, 222, 118, 100054, 29991, 198, 12, 489, 67, 16384, 25, 220, 99886, 100696, 9909, 108532, 14, 109430, 23083, 12, 3311, 25, 220, 99886, 80094, 9909, 82587, 23083, 12, 4379, 25, 19468, 102, 95355, 9909, 82587, 23083, 12, 3311, 27234, 12135, 25, 220, 80094, 64471, 58362, 14880, 19793, 9909, 117661, 25511, 3837, 39165, 80094, 24562, 18830, 9, 17992, 57191, 102298, 1, 30440, 96422, 50292, 1, 5373, 1, 97480, 30440, 96422, 1, 49567, 105291, 13343, 17714, 1866, 23083, 12, 4379, 27234, 12135, 25, 19468, 102, 95355, 64471, 58362, 14880, 19793, 9909, 117661, 25511, 3837, 39165, 102299, 24562, 18830, 9, 17992, 57191, 102298, 1, 30440, 96422, 50292, 1, 5373, 1, 97480, 30440, 96422, 1, 49567, 105291, 13343, 17714, 1866, 27866, 151645, 198, 151644, 77091, 198, 151667, 198, 99692, 3837, 35946, 85106, 54542, 20002, 103008, 104976, 99886, 108704, 90395, 105278, 106637, 17714, 5370, 68805, 1773, 101140, 3837, 35946, 85106, 104857, 101113, 20002, 104272, 3837, 103944, 16530, 114078, 99885, 104449, 3407, 20002, 103008, 108704, 20412, 36987, 17, 20, 15, 15, 15, 16, 2447, 33, 220, 17, 20, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 220, 18, 13, 21, 4, 6567, 247, 107, 99419, 101406, 6567, 247, 107, 99683, 101406, 55807, 100160, 44931, 100630, 9852, 2078, 5373, 9852, 675, 5373, 376, 67, 16384, 5373, 6045, 5373, 7698, 5373, 6045, 27234, 12135, 5373, 7698, 27234, 12135, 3407, 101140, 3837, 9852, 2078, 85106, 101929, 99623, 76095, 1773, 20002, 104496, 53153, 102298, 30709, 8863, 27442, 5373, 20929, 17992, 49567, 101167, 48391, 3837, 100136, 115605, 82587, 109887, 1773, 103283, 21894, 101047, 17, 20, 15, 15, 15, 16, 2447, 33, 104544, 101137, 99487, 76095, 3837, 99519, 20412, 115605, 82587, 102189, 27442, 3837, 100136, 80443, 101167, 48391, 1773, 99999, 9852, 2078, 104583, 17, 20, 15, 15, 15, 16, 2447, 33, 3407, 104326, 3837, 9852, 675, 20412, 2073, 17, 20, 114418, 15, 16, 33590, 80443, 86119, 3837, 101041, 107439, 3407, 376, 67, 16384, 20412, 2073, 108532, 33590, 88991, 3407, 6045, 20412, 9, 16, 15, 15, 15, 31207, 3837, 99817, 85106, 101071, 80094, 64471, 58362, 14880, 19793, 1773, 20002, 103988, 62244, 80094, 24562, 18830, 9, 17992, 57191, 102298, 2073, 30440, 96422, 50292, 854, 49567, 105291, 13343, 17714, 1866, 1773, 103283, 21894, 101047, 9, 16, 15, 15, 15, 31207, 101137, 106334, 3837, 99999, 6045, 27234, 12135, 29635, 17714, 1866, 3407, 7698, 20412, 18, 13, 21, 69982, 77288, 85106, 101071, 64471, 58362, 14880, 19793, 1773, 102299, 24562, 18830, 9, 17992, 3837, 99999, 7698, 27234, 12135, 29635, 17714, 1866, 3407, 99601, 101071, 55338, 44931, 64471, 101137, 101882, 1773, 81167, 80443, 114078, 90395, 100136, 55338, 44931, 71268, 88991, 107439, 1773, 100161, 43959, 5370, 64429, 3837, 103944, 80443, 115916, 109502, 66394, 8997, 151668, 271, 515, 220, 330, 9852, 2078, 788, 330, 17, 20, 15, 15, 15, 16, 2447, 33, 756, 220, 330, 9852, 675, 788, 330, 17, 20, 114418, 15, 16, 756, 220, 330, 376, 67, 16384, 788, 330, 108532, 756, 220, 330, 6045, 788, 220, 16, 15, 15, 15, 15, 15, 15, 345, 220, 330, 7698, 788, 220, 18, 13, 21, 345, 220, 330, 6045, 27234, 12135, 788, 830, 345, 220, 330, 7698, 27234, 12135, 788, 830, 198, 92], "total_duration": 16700474669, "load_duration": 2772382055, "prompt_eval_count": 270, "prompt_eval_duration": 2596643666, "eval_count": 394, "eval_duration": 11328468639}
2025-06-10 02:59:54,717 - __main__ - INFO - Raw model response: <think>
好的，我需要处理用户提供的债券交易文本，并将其解析为JSON格式。首先，我需要仔细阅读用户的要求，确保不遗漏任何细节。

用户提供的文本是：“250001.IB 25国债01 买入 *1000万 3.6% 景益货币 景顺货币”。目标字段包括assetCode、assetName、trdSide、amount、rate、amountReqFlag、rateReqFlag。

首先，assetCode需要满足一定条件。用户提到不能包含小数点、加号等特殊字符，且四位数字及以上。原文本中的250001.IB看起来符合这个条件，因为是四位数字加上点，且没有特殊字符。所以assetCode应该是250001.IB。

接下来，assetName是“25国债01”，没有问题，直接提取。

trdSide是“买入”，正确。

amount是*1000万，这里需要检查金额是否需请示。用户指出如果金额前有*号或包含“可议价”等关键词时为true。原文本中的*1000万符合这种情况，所以amountReqFlag设为true。

rate是3.6%，但需要检查是否需请示。利率前有*号，所以rateReqFlag设为true。

现在检查所有字段是否符合要求。确认没有遗漏，并且所有字段都正确提取。最后生成JSON对象，确保没有多余的文字说明。
</think>

{
  "assetCode": "250001.IB",
  "assetName": "25国债01",
  "trdSide": "买入",
  "amount": 1000000,
  "rate": 3.6,
  "amountReqFlag": true,
  "rateReqFlag": true
}
2025-06-10 02:59:54,718 - __main__ - ERROR - JSON decode error: Expecting value: line 1 column 1 (char 0)
2025-06-10 02:59:54,718 - __main__ - INFO - Extracted JSON string: {
  "assetCode": "250001.IB",
  "assetName": "25国债01",
  "trdSide": "买入",
  "amount": 1000000,
  "rate": 3.6,
  "amountReqFlag": true,
  "rateReqFlag": true
}
2025-06-10 02:59:54,718 - __main__ - INFO - Normalizing parsed data: {'assetCode': '250001.IB', 'assetName': '25国债01', 'trdSide': '买入', 'amount': 1000000, 'rate': 3.6, 'amountReqFlag': True, 'rateReqFlag': True}
2025-06-10 02:59:54,719 - __main__ - INFO - Normalized data: {'assetCode': '250001.IB', 'assetName': '25国债01', 'trdSide': '买入', 'amount': 1000000.0, 'rate': 3.6, 'amountReqFlag': True, 'rateReqFlag': True, 'fundName': []}
2025-06-10 02:59:54,719 - __main__ - INFO - Successfully parsed bond data: {'assetCode': '250001.IB', 'assetName': '25国债01', 'trdSide': '买入', 'amount': 1000000.0, 'rate': 3.6, 'amountReqFlag': True, 'rateReqFlag': True, 'fundName': []}
2025-06-10 02:59:54,723 - __main__ - INFO - Successfully completed smart parsing with AI analysis
2025-06-10 03:00:42,902 - __main__ - INFO - Received smart parse request: 250001.IB 25国债01 买入 *1000万 3.6%  景益货币 景顺货币, context: 
2025-06-10 03:00:42,919 - __main__ - INFO - AI recommended prompt type: 带请示单一指令解析
2025-06-10 03:00:42,919 - __main__ - INFO - AI reasoning: 基于以下特征选择了'带请示单一指令解析'模板：包含*号=True, 多产品=False, 是问题=False, 产品数量=1
2025-06-10 03:00:42,919 - __main__ - INFO - Calling Ollama model with text: 250001.IB 25国债01 买入 *1000万 3.6%  景益货币 景顺货币, prompt_type: 带请示单一指令解析
2025-06-10 03:00:42,925 - __main__ - INFO - Ollama service is available
2025-06-10 03:00:42,929 - __main__ - INFO - Available models: {"models": [{"name": "qwen3:0.6b", "model": "qwen3:0.6b", "modified_at": "2025-05-08T01:27:52.753829715+08:00", "size": 522653526, "digest": "3bae9c93586b27bedaa979979733c2b0edd1d0defc745e9638f2161192a0ccf0", "details": {"parent_model": "", "format": "gguf", "family": "qwen3", "families": ["qwen3"], "parameter_size": "751.63M", "quantization_level": "Q4_K_M"}}]}
2025-06-10 03:00:42,943 - __main__ - INFO - Sending request to Ollama: {"model": "qwen3:0.6b", "prompt": "请将以下债券交易文本解析为JSON格式，特别注意标有*号的金额和利率需要请示，只返回JSON对象，不要包含其他文字说明：\n250001.IB 25国债01 买入 *1000万 3.6%  景益货币 景顺货币\n\n需要提取的字段：\n- assetCode: 债券代码为含有 4 位数字及以上纯数字不包括（小数点，加号等任意特殊字符）且不能被100整除或者含有任一关键字 (.IB,.SH,.SZ等，该关键字支持配置)；\n- assetName: 债券名称\n- trdSide: 交易方向（买入/卖出）\n- amount: 交易金额（数字）\n- rate: 利率（数字）\n- amountReqFlag: 金额是否需请示（布尔值，当金额前有*号或包含\"可议价\"、\"价格可议\"等关键词时为true）\n- rateReqFlag: 利率是否需请示（布尔值，当利率前有*号或包含\"可议价\"、\"价格可议\"等关键词时为true）\n\n", "stream": false}
2025-06-10 03:00:55,694 - __main__ - INFO - Received response from Ollama: {"model": "qwen3:0.6b", "created_at": "2025-06-09T19:00:55.689218Z", "response": "<think>\n好的，我现在需要处理用户的请求，将债券交易文本解析为JSON格式，并特别注意标有*号的金额和利率，以及金额和利率是否需请示的字段。首先，用户提供的文本是：“250001.IB 25国债01 买入 *1000万 3.6% 景益货币 景顺货币”。我需要先理解每个字段的要求。\n\n首先，assetCode的要求是包含4位及以上纯数字，且不能被100整除，且不包含小数点或特殊字符。原文本中的250001符合这个条件，因为前四位是数字，且没有小数点。接下来，assetName是“25国债01”，没问题，因为没有关键字。\n\ntrdSide是买入，所以填入true。amount是*1000万，这里金额前有*号，所以amountReqFlag应该是true。而amount是1000万，用户要求金额前有*号或包含“可议价”等关键词时才需请示，这里金额前有*号，所以amountReqFlag是true。同样，rate是3.6%，但用户要求利率前有*号或包含关键词时才需请示，这里没有，所以rateReqFlag是false。需要检查是否还有其他字段，比如rateReqFlag是否正确，这里应该为false，因为利率没有标记。\n\n然后，金额是否需请示的字段，用户要求如果金额前有*号或包含关键词就为true，这里金额前有*号，所以amountReqFlag是true。同样，rateReqFlag是否正确，因为利率没有标记，所以应该是false。现在把这些字段填入JSON中，确保不包含其他文字说明，只返回JSON对象。检查一遍是否有遗漏，确认每个字段都正确，没有多余的字段。\n</think>\n\n{\n  \"assetCode\": \"250001.IB\",\n  \"assetName\": \"25国债01\",\n  \"trdSide\": \"买入\",\n  \"amount\": \"1000万\",\n  \"rate\": 3.6,\n  \"amountReqFlag\": true,\n  \"rateReqFlag\": false\n}", "done": true, "done_reason": "stop", "context": [151644, 872, 198, 14880, 44063, 87752, 104976, 99886, 108704, 106637, 17714, 5370, 68805, 3837, 100654, 60533, 30844, 18830, 9, 17992, 9370, 80094, 33108, 102299, 85106, 14880, 19793, 3837, 91680, 31526, 5370, 64429, 3837, 100148, 102298, 92894, 87335, 66394, 28311, 17, 20, 15, 15, 15, 16, 2447, 33, 220, 17, 20, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 220, 18, 13, 21, 4, 220, 6567, 247, 107, 99419, 101406, 6567, 247, 107, 99683, 101406, 271, 85106, 107439, 9370, 44931, 28311, 12, 9329, 2078, 25, 4891, 222, 118, 100054, 46100, 17714, 102704, 220, 19, 220, 24156, 82587, 109887, 100073, 82587, 16530, 100630, 9909, 30709, 8863, 27442, 3837, 20929, 17992, 49567, 108112, 101167, 48391, 7552, 100136, 53153, 99250, 16, 15, 15, 63431, 20755, 100631, 102704, 48888, 14777, 118294, 29465, 3256, 17515, 8590, 17515, 61228, 49567, 3837, 75882, 118294, 100143, 85767, 8, 59217, 12, 9329, 675, 25, 4891, 222, 118, 100054, 29991, 198, 12, 489, 67, 16384, 25, 220, 99886, 100696, 9909, 108532, 14, 109430, 23083, 12, 3311, 25, 220, 99886, 80094, 9909, 82587, 23083, 12, 4379, 25, 19468, 102, 95355, 9909, 82587, 23083, 12, 3311, 27234, 12135, 25, 220, 80094, 64471, 58362, 14880, 19793, 9909, 117661, 25511, 3837, 39165, 80094, 24562, 18830, 9, 17992, 57191, 102298, 1, 30440, 96422, 50292, 1, 5373, 1, 97480, 30440, 96422, 1, 49567, 105291, 13343, 17714, 1866, 23083, 12, 4379, 27234, 12135, 25, 19468, 102, 95355, 64471, 58362, 14880, 19793, 9909, 117661, 25511, 3837, 39165, 102299, 24562, 18830, 9, 17992, 57191, 102298, 1, 30440, 96422, 50292, 1, 5373, 1, 97480, 30440, 96422, 1, 49567, 105291, 13343, 17714, 1866, 27866, 151645, 198, 151644, 77091, 198, 151667, 198, 99692, 3837, 107520, 85106, 54542, 107494, 34859, 3837, 44063, 104976, 99886, 108704, 106637, 17714, 5370, 68805, 90395, 100654, 60533, 30844, 18830, 9, 17992, 9370, 80094, 33108, 102299, 3837, 101034, 80094, 33108, 102299, 64471, 58362, 14880, 19793, 9370, 44931, 1773, 101140, 3837, 20002, 103008, 108704, 20412, 36987, 17, 20, 15, 15, 15, 16, 2447, 33, 220, 17, 20, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 220, 18, 13, 21, 4, 6567, 247, 107, 99419, 101406, 6567, 247, 107, 99683, 101406, 55807, 35946, 85106, 60726, 101128, 103991, 44931, 104272, 3407, 101140, 3837, 9852, 2078, 104272, 20412, 102298, 19, 24156, 109887, 100073, 82587, 3837, 100136, 53153, 99250, 16, 15, 15, 63431, 20755, 3837, 100136, 16530, 102298, 30709, 8863, 27442, 57191, 101167, 48391, 1773, 103283, 21894, 101047, 17, 20, 15, 15, 15, 16, 101137, 99487, 76095, 3837, 99519, 24562, 115605, 20412, 82587, 3837, 100136, 80443, 30709, 8863, 27442, 1773, 104326, 3837, 9852, 675, 20412, 2073, 17, 20, 114418, 15, 16, 33590, 114815, 3837, 99519, 80443, 118294, 3407, 376, 67, 16384, 20412, 108532, 3837, 99999, 68756, 17254, 1866, 1773, 6045, 20412, 9, 16, 15, 15, 15, 31207, 3837, 99817, 80094, 24562, 18830, 9, 17992, 3837, 99999, 6045, 27234, 12135, 104583, 1866, 1773, 68536, 6045, 20412, 16, 15, 15, 15, 31207, 3837, 20002, 101882, 80094, 24562, 18830, 9, 17992, 57191, 102298, 2073, 30440, 96422, 50292, 854, 49567, 105291, 13343, 99306, 58362, 14880, 19793, 3837, 99817, 80094, 24562, 18830, 9, 17992, 3837, 99999, 6045, 27234, 12135, 20412, 1866, 1773, 101165, 3837, 7698, 20412, 18, 13, 21, 69982, 77288, 20002, 101882, 102299, 24562, 18830, 9, 17992, 57191, 102298, 105291, 13343, 99306, 58362, 14880, 19793, 3837, 99817, 80443, 3837, 99999, 7698, 27234, 12135, 20412, 3849, 1773, 85106, 101071, 64471, 100626, 92894, 44931, 3837, 101912, 7698, 27234, 12135, 64471, 88991, 3837, 99817, 99730, 17714, 3849, 3837, 99519, 102299, 80443, 113743, 3407, 101889, 3837, 80094, 64471, 58362, 14880, 19793, 9370, 44931, 3837, 20002, 101882, 62244, 80094, 24562, 18830, 9, 17992, 57191, 102298, 105291, 80158, 17714, 1866, 3837, 99817, 80094, 24562, 18830, 9, 17992, 3837, 99999, 6045, 27234, 12135, 20412, 1866, 1773, 101165, 3837, 7698, 27234, 12135, 64471, 88991, 3837, 99519, 102299, 80443, 113743, 3837, 99999, 104583, 3849, 1773, 99601, 113841, 44931, 68756, 17254, 5370, 15946, 3837, 103944, 16530, 102298, 92894, 87335, 66394, 3837, 91680, 31526, 5370, 64429, 1773, 101071, 107060, 107189, 114078, 3837, 81167, 103991, 44931, 71268, 88991, 3837, 80443, 115917, 44931, 8997, 151668, 271, 515, 220, 330, 9852, 2078, 788, 330, 17, 20, 15, 15, 15, 16, 2447, 33, 756, 220, 330, 9852, 675, 788, 330, 17, 20, 114418, 15, 16, 756, 220, 330, 376, 67, 16384, 788, 330, 108532, 756, 220, 330, 6045, 788, 330, 16, 15, 15, 15, 31207, 756, 220, 330, 7698, 788, 220, 18, 13, 21, 345, 220, 330, 6045, 27234, 12135, 788, 830, 345, 220, 330, 7698, 27234, 12135, 788, 895, 198, 92], "total_duration": 12741535868, "load_duration": 31857084, "prompt_eval_count": 270, "prompt_eval_duration": 32819094, "eval_count": 475, "eval_duration": 12675966265}
2025-06-10 03:00:55,695 - __main__ - INFO - Validating Ollama response: {"model": "qwen3:0.6b", "created_at": "2025-06-09T19:00:55.689218Z", "response": "<think>\n好的，我现在需要处理用户的请求，将债券交易文本解析为JSON格式，并特别注意标有*号的金额和利率，以及金额和利率是否需请示的字段。首先，用户提供的文本是：“250001.IB 25国债01 买入 *1000万 3.6% 景益货币 景顺货币”。我需要先理解每个字段的要求。\n\n首先，assetCode的要求是包含4位及以上纯数字，且不能被100整除，且不包含小数点或特殊字符。原文本中的250001符合这个条件，因为前四位是数字，且没有小数点。接下来，assetName是“25国债01”，没问题，因为没有关键字。\n\ntrdSide是买入，所以填入true。amount是*1000万，这里金额前有*号，所以amountReqFlag应该是true。而amount是1000万，用户要求金额前有*号或包含“可议价”等关键词时才需请示，这里金额前有*号，所以amountReqFlag是true。同样，rate是3.6%，但用户要求利率前有*号或包含关键词时才需请示，这里没有，所以rateReqFlag是false。需要检查是否还有其他字段，比如rateReqFlag是否正确，这里应该为false，因为利率没有标记。\n\n然后，金额是否需请示的字段，用户要求如果金额前有*号或包含关键词就为true，这里金额前有*号，所以amountReqFlag是true。同样，rateReqFlag是否正确，因为利率没有标记，所以应该是false。现在把这些字段填入JSON中，确保不包含其他文字说明，只返回JSON对象。检查一遍是否有遗漏，确认每个字段都正确，没有多余的字段。\n</think>\n\n{\n  \"assetCode\": \"250001.IB\",\n  \"assetName\": \"25国债01\",\n  \"trdSide\": \"买入\",\n  \"amount\": \"1000万\",\n  \"rate\": 3.6,\n  \"amountReqFlag\": true,\n  \"rateReqFlag\": false\n}", "done": true, "done_reason": "stop", "context": [151644, 872, 198, 14880, 44063, 87752, 104976, 99886, 108704, 106637, 17714, 5370, 68805, 3837, 100654, 60533, 30844, 18830, 9, 17992, 9370, 80094, 33108, 102299, 85106, 14880, 19793, 3837, 91680, 31526, 5370, 64429, 3837, 100148, 102298, 92894, 87335, 66394, 28311, 17, 20, 15, 15, 15, 16, 2447, 33, 220, 17, 20, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 220, 18, 13, 21, 4, 220, 6567, 247, 107, 99419, 101406, 6567, 247, 107, 99683, 101406, 271, 85106, 107439, 9370, 44931, 28311, 12, 9329, 2078, 25, 4891, 222, 118, 100054, 46100, 17714, 102704, 220, 19, 220, 24156, 82587, 109887, 100073, 82587, 16530, 100630, 9909, 30709, 8863, 27442, 3837, 20929, 17992, 49567, 108112, 101167, 48391, 7552, 100136, 53153, 99250, 16, 15, 15, 63431, 20755, 100631, 102704, 48888, 14777, 118294, 29465, 3256, 17515, 8590, 17515, 61228, 49567, 3837, 75882, 118294, 100143, 85767, 8, 59217, 12, 9329, 675, 25, 4891, 222, 118, 100054, 29991, 198, 12, 489, 67, 16384, 25, 220, 99886, 100696, 9909, 108532, 14, 109430, 23083, 12, 3311, 25, 220, 99886, 80094, 9909, 82587, 23083, 12, 4379, 25, 19468, 102, 95355, 9909, 82587, 23083, 12, 3311, 27234, 12135, 25, 220, 80094, 64471, 58362, 14880, 19793, 9909, 117661, 25511, 3837, 39165, 80094, 24562, 18830, 9, 17992, 57191, 102298, 1, 30440, 96422, 50292, 1, 5373, 1, 97480, 30440, 96422, 1, 49567, 105291, 13343, 17714, 1866, 23083, 12, 4379, 27234, 12135, 25, 19468, 102, 95355, 64471, 58362, 14880, 19793, 9909, 117661, 25511, 3837, 39165, 102299, 24562, 18830, 9, 17992, 57191, 102298, 1, 30440, 96422, 50292, 1, 5373, 1, 97480, 30440, 96422, 1, 49567, 105291, 13343, 17714, 1866, 27866, 151645, 198, 151644, 77091, 198, 151667, 198, 99692, 3837, 107520, 85106, 54542, 107494, 34859, 3837, 44063, 104976, 99886, 108704, 106637, 17714, 5370, 68805, 90395, 100654, 60533, 30844, 18830, 9, 17992, 9370, 80094, 33108, 102299, 3837, 101034, 80094, 33108, 102299, 64471, 58362, 14880, 19793, 9370, 44931, 1773, 101140, 3837, 20002, 103008, 108704, 20412, 36987, 17, 20, 15, 15, 15, 16, 2447, 33, 220, 17, 20, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 220, 18, 13, 21, 4, 6567, 247, 107, 99419, 101406, 6567, 247, 107, 99683, 101406, 55807, 35946, 85106, 60726, 101128, 103991, 44931, 104272, 3407, 101140, 3837, 9852, 2078, 104272, 20412, 102298, 19, 24156, 109887, 100073, 82587, 3837, 100136, 53153, 99250, 16, 15, 15, 63431, 20755, 3837, 100136, 16530, 102298, 30709, 8863, 27442, 57191, 101167, 48391, 1773, 103283, 21894, 101047, 17, 20, 15, 15, 15, 16, 101137, 99487, 76095, 3837, 99519, 24562, 115605, 20412, 82587, 3837, 100136, 80443, 30709, 8863, 27442, 1773, 104326, 3837, 9852, 675, 20412, 2073, 17, 20, 114418, 15, 16, 33590, 114815, 3837, 99519, 80443, 118294, 3407, 376, 67, 16384, 20412, 108532, 3837, 99999, 68756, 17254, 1866, 1773, 6045, 20412, 9, 16, 15, 15, 15, 31207, 3837, 99817, 80094, 24562, 18830, 9, 17992, 3837, 99999, 6045, 27234, 12135, 104583, 1866, 1773, 68536, 6045, 20412, 16, 15, 15, 15, 31207, 3837, 20002, 101882, 80094, 24562, 18830, 9, 17992, 57191, 102298, 2073, 30440, 96422, 50292, 854, 49567, 105291, 13343, 99306, 58362, 14880, 19793, 3837, 99817, 80094, 24562, 18830, 9, 17992, 3837, 99999, 6045, 27234, 12135, 20412, 1866, 1773, 101165, 3837, 7698, 20412, 18, 13, 21, 69982, 77288, 20002, 101882, 102299, 24562, 18830, 9, 17992, 57191, 102298, 105291, 13343, 99306, 58362, 14880, 19793, 3837, 99817, 80443, 3837, 99999, 7698, 27234, 12135, 20412, 3849, 1773, 85106, 101071, 64471, 100626, 92894, 44931, 3837, 101912, 7698, 27234, 12135, 64471, 88991, 3837, 99817, 99730, 17714, 3849, 3837, 99519, 102299, 80443, 113743, 3407, 101889, 3837, 80094, 64471, 58362, 14880, 19793, 9370, 44931, 3837, 20002, 101882, 62244, 80094, 24562, 18830, 9, 17992, 57191, 102298, 105291, 80158, 17714, 1866, 3837, 99817, 80094, 24562, 18830, 9, 17992, 3837, 99999, 6045, 27234, 12135, 20412, 1866, 1773, 101165, 3837, 7698, 27234, 12135, 64471, 88991, 3837, 99519, 102299, 80443, 113743, 3837, 99999, 104583, 3849, 1773, 99601, 113841, 44931, 68756, 17254, 5370, 15946, 3837, 103944, 16530, 102298, 92894, 87335, 66394, 3837, 91680, 31526, 5370, 64429, 1773, 101071, 107060, 107189, 114078, 3837, 81167, 103991, 44931, 71268, 88991, 3837, 80443, 115917, 44931, 8997, 151668, 271, 515, 220, 330, 9852, 2078, 788, 330, 17, 20, 15, 15, 15, 16, 2447, 33, 756, 220, 330, 9852, 675, 788, 330, 17, 20, 114418, 15, 16, 756, 220, 330, 376, 67, 16384, 788, 330, 108532, 756, 220, 330, 6045, 788, 330, 16, 15, 15, 15, 31207, 756, 220, 330, 7698, 788, 220, 18, 13, 21, 345, 220, 330, 6045, 27234, 12135, 788, 830, 345, 220, 330, 7698, 27234, 12135, 788, 895, 198, 92], "total_duration": 12741535868, "load_duration": 31857084, "prompt_eval_count": 270, "prompt_eval_duration": 32819094, "eval_count": 475, "eval_duration": 12675966265}
2025-06-10 03:00:55,695 - __main__ - INFO - Raw model response: <think>
好的，我现在需要处理用户的请求，将债券交易文本解析为JSON格式，并特别注意标有*号的金额和利率，以及金额和利率是否需请示的字段。首先，用户提供的文本是：“250001.IB 25国债01 买入 *1000万 3.6% 景益货币 景顺货币”。我需要先理解每个字段的要求。

首先，assetCode的要求是包含4位及以上纯数字，且不能被100整除，且不包含小数点或特殊字符。原文本中的250001符合这个条件，因为前四位是数字，且没有小数点。接下来，assetName是“25国债01”，没问题，因为没有关键字。

trdSide是买入，所以填入true。amount是*1000万，这里金额前有*号，所以amountReqFlag应该是true。而amount是1000万，用户要求金额前有*号或包含“可议价”等关键词时才需请示，这里金额前有*号，所以amountReqFlag是true。同样，rate是3.6%，但用户要求利率前有*号或包含关键词时才需请示，这里没有，所以rateReqFlag是false。需要检查是否还有其他字段，比如rateReqFlag是否正确，这里应该为false，因为利率没有标记。

然后，金额是否需请示的字段，用户要求如果金额前有*号或包含关键词就为true，这里金额前有*号，所以amountReqFlag是true。同样，rateReqFlag是否正确，因为利率没有标记，所以应该是false。现在把这些字段填入JSON中，确保不包含其他文字说明，只返回JSON对象。检查一遍是否有遗漏，确认每个字段都正确，没有多余的字段。
</think>

{
  "assetCode": "250001.IB",
  "assetName": "25国债01",
  "trdSide": "买入",
  "amount": "1000万",
  "rate": 3.6,
  "amountReqFlag": true,
  "rateReqFlag": false
}
2025-06-10 03:00:55,695 - __main__ - ERROR - JSON decode error: Expecting value: line 1 column 1 (char 0)
2025-06-10 03:00:55,695 - __main__ - INFO - Extracted JSON string: {
  "assetCode": "250001.IB",
  "assetName": "25国债01",
  "trdSide": "买入",
  "amount": "1000万",
  "rate": 3.6,
  "amountReqFlag": true,
  "rateReqFlag": false
}
2025-06-10 03:00:55,696 - __main__ - INFO - Normalizing parsed data: {'assetCode': '250001.IB', 'assetName': '25国债01', 'trdSide': '买入', 'amount': '1000万', 'rate': 3.6, 'amountReqFlag': True, 'rateReqFlag': False}
2025-06-10 03:00:55,697 - __main__ - INFO - Normalized data: {'assetCode': '250001.IB', 'assetName': '25国债01', 'trdSide': '买入', 'amount': 10000000.0, 'rate': 3.6, 'amountReqFlag': True, 'rateReqFlag': False, 'fundName': []}
2025-06-10 03:00:55,697 - __main__ - INFO - Successfully parsed bond data: {'assetCode': '250001.IB', 'assetName': '25国债01', 'trdSide': '买入', 'amount': 10000000.0, 'rate': 3.6, 'amountReqFlag': True, 'rateReqFlag': False, 'fundName': []}
2025-06-10 03:00:55,698 - __main__ - INFO - Successfully completed smart parsing with AI analysis
2025-06-10 03:01:17,711 - __main__ - INFO - Received request to parse bond text: 250001.IB 25国债01 买入 *1000万 3.6%  景益货币 景顺货币, prompt_type: 多产品指令语料解析
2025-06-10 03:01:17,724 - __main__ - INFO - Calling Ollama model with text: 250001.IB 25国债01 买入 *1000万 3.6%  景益货币 景顺货币, prompt_type: 多产品指令语料解析
2025-06-10 03:01:17,728 - __main__ - INFO - Ollama service is available
2025-06-10 03:01:17,733 - __main__ - INFO - Available models: {"models": [{"name": "qwen3:0.6b", "model": "qwen3:0.6b", "modified_at": "2025-05-08T01:27:52.753829715+08:00", "size": 522653526, "digest": "3bae9c93586b27bedaa979979733c2b0edd1d0defc745e9638f2161192a0ccf0", "details": {"parent_model": "", "format": "gguf", "family": "qwen3", "families": ["qwen3"], "parameter_size": "751.63M", "quantization_level": "Q4_K_M"}}]}
2025-06-10 03:01:17,748 - __main__ - INFO - Sending request to Ollama: {"model": "qwen3:0.6b", "prompt": "请将以下包含多个债券产品的交易文本解析为JSON数组格式，每个产品对应一个JSON对象，只返回JSON数组，不要包含其他文字说明：\n250001.IB 25国债01 买入 *1000万 3.6%  景益货币 景顺货币\n\n每个产品需要提取的字段：\n- assetCode: 债券代码为含有 4 位数字及以上纯数字不包括（小数点，加号等任意特殊字符）且不能被100整除或者含有任一关键字 (.IB,.SH,.SZ等，该关键字支持配置)；\n- assetName: 债券名称\n- trdSide: 交易方向（买入/卖出）\n- amount: 交易金额（数字）\n- rate: 利率（数字）\n- amountReqFlag: 金额是否需请示（布尔值，当金额前有*号时为true）\n- rateReqFlag: 利率是否需请示（布尔值，当利率前有*号时为true）\n- fundName: 基金名称,这是个list,需要提取出基金名称,可能包含多个基金名称\n\n", "stream": false}
2025-06-10 03:01:32,511 - __main__ - INFO - Received response from Ollama: {"model": "qwen3:0.6b", "created_at": "2025-06-09T19:01:32.503651Z", "response": "<think>\n好的，我现在需要处理用户的查询，将包含多个债券产品的交易文本解析为JSON数组格式。首先，我需要仔细阅读用户提供的文本，并理解每个产品的结构和要求。\n\n用户给出的文本是：“250001.IB 25国债01 买入 *1000万 3.6% 景益货币 景顺货币”。看起来每个产品有多个基金名称，比如“景益货币”和“景顺货币”。这些基金名称需要提取到JSON数组中，可能每个基金名称是一个单独的条目。\n\n首先，我需要确认每个产品的字段。用户要求每个产品对应一个JSON对象，包含assetCode、assetName、trdSide、amount、rate、amountReqFlag、rateReqFlag、fundName。这里需要注意的是，assetCode需要是4位数字及以上纯数字，不能被100整除，且不能包含小数点或特殊字符。检查原文中的资产代码，250001看起来是四位数字，符合要求，且没有特殊字符，所以没问题。\n\n接下来是资产名称，这里看起来是“25国债01”，需要确认是否正确。用户提到的字段包括assetName，所以正确提取这个名称。\n\n交易方向是买入，所以trdSide设为“买入”。\n\n金额是*1000万，这里金额前有*号，所以amountReqFlag设为true。金额是否需请示，是的，所以amountReqFlag是true。\n\n利率是3.6%，所以rate设为3.6。利率是否需请示，这里没有*号，所以rateReqFlag是false。\n\n基金名称是景益货币和景顺货币，可能需要提取到JSON数组中。这里可能用户希望每个基金名称作为一个条目，所以需要将这两个名称作为数组中的元素。\n\n现在需要检查是否有遗漏的字段或错误。例如，金额是否需要请示，这里明确是true，正确。利率是否需要请示，这里没有，所以正确。资产代码正确，没有特殊字符，正确。\n\n最后，确保所有字段都正确解析，并且JSON数组格式正确，没有多余的文字说明。确认无误后，将结果整理成数组格式返回。\n</think>\n\n[\n  {\n    \"assetCode\": \"250001\",\n    \"assetName\": \"25国债01\",\n    \"trdSide\": \"买入\",\n    \"amount\": \"10000000\",\n    \"rate\": 3.6,\n    \"amountReqFlag\": true,\n    \"rateReqFlag\": false,\n    \"fundName\": [\"景益货币\", \"景顺货币\"]\n  }\n]", "done": true, "done_reason": "stop", "context": [151644, 872, 198, 14880, 44063, 87752, 102298, 101213, 104976, 104703, 99886, 108704, 106637, 17714, 5370, 69824, 68805, 3837, 103991, 82700, 103124, 46944, 5370, 64429, 3837, 91680, 31526, 5370, 69824, 3837, 100148, 102298, 92894, 87335, 66394, 28311, 17, 20, 15, 15, 15, 16, 2447, 33, 220, 17, 20, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 220, 18, 13, 21, 4, 220, 6567, 247, 107, 99419, 101406, 6567, 247, 107, 99683, 101406, 271, 103991, 82700, 85106, 107439, 9370, 44931, 28311, 12, 9329, 2078, 25, 4891, 222, 118, 100054, 46100, 17714, 102704, 220, 19, 220, 24156, 82587, 109887, 100073, 82587, 16530, 100630, 9909, 30709, 8863, 27442, 3837, 20929, 17992, 49567, 108112, 101167, 48391, 7552, 100136, 53153, 99250, 16, 15, 15, 63431, 20755, 100631, 102704, 48888, 14777, 118294, 29465, 3256, 17515, 8590, 17515, 61228, 49567, 3837, 75882, 118294, 100143, 85767, 8, 59217, 12, 9329, 675, 25, 4891, 222, 118, 100054, 29991, 198, 12, 489, 67, 16384, 25, 220, 99886, 100696, 9909, 108532, 14, 109430, 23083, 12, 3311, 25, 220, 99886, 80094, 9909, 82587, 23083, 12, 4379, 25, 19468, 102, 95355, 9909, 82587, 23083, 12, 3311, 27234, 12135, 25, 220, 80094, 64471, 58362, 14880, 19793, 9909, 117661, 25511, 3837, 39165, 80094, 24562, 18830, 9, 17992, 13343, 17714, 1866, 23083, 12, 4379, 27234, 12135, 25, 19468, 102, 95355, 64471, 58362, 14880, 19793, 9909, 117661, 25511, 3837, 39165, 102299, 24562, 18830, 9, 17992, 13343, 17714, 1866, 23083, 12, 3802, 675, 25, 4891, 253, 118, 34230, 29991, 11, 100346, 18947, 1607, 11, 85106, 107439, 20221, 100025, 29991, 11, 87267, 102298, 101213, 100025, 29991, 271, 151645, 198, 151644, 77091, 198, 151667, 198, 99692, 3837, 107520, 85106, 54542, 107494, 51154, 3837, 44063, 102298, 101213, 104976, 104703, 99886, 108704, 106637, 17714, 5370, 69824, 68805, 1773, 101140, 3837, 35946, 85106, 104857, 101113, 20002, 103008, 108704, 90395, 101128, 103991, 104703, 100166, 33108, 101882, 3407, 20002, 107485, 9370, 108704, 20412, 36987, 17, 20, 15, 15, 15, 16, 2447, 33, 220, 17, 20, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 220, 18, 13, 21, 4, 6567, 247, 107, 99419, 101406, 6567, 247, 107, 99683, 101406, 55807, 104544, 103991, 82700, 18830, 101213, 100025, 29991, 3837, 101912, 2073, 85254, 99419, 101406, 854, 33108, 2073, 85254, 99683, 101406, 55807, 100001, 100025, 29991, 85106, 107439, 26939, 5370, 69824, 15946, 3837, 87267, 103991, 100025, 29991, 101909, 105818, 9370, 38989, 29732, 3407, 101140, 3837, 35946, 85106, 81167, 103991, 104703, 44931, 1773, 20002, 101882, 103991, 82700, 103124, 46944, 5370, 64429, 3837, 102298, 9852, 2078, 5373, 9852, 675, 5373, 376, 67, 16384, 5373, 6045, 5373, 7698, 5373, 6045, 27234, 12135, 5373, 7698, 27234, 12135, 5373, 57603, 675, 1773, 99817, 107916, 100146, 3837, 9852, 2078, 85106, 20412, 19, 24156, 82587, 109887, 100073, 82587, 3837, 53153, 99250, 16, 15, 15, 63431, 20755, 3837, 100136, 53153, 102298, 30709, 8863, 27442, 57191, 101167, 48391, 1773, 101071, 103283, 101047, 99814, 46100, 3837, 17, 20, 15, 15, 15, 16, 104544, 20412, 115605, 82587, 3837, 101137, 101882, 3837, 100136, 80443, 101167, 48391, 3837, 99999, 114815, 3407, 104326, 20412, 99814, 29991, 3837, 99817, 104544, 20412, 2073, 17, 20, 114418, 15, 16, 33590, 85106, 81167, 64471, 88991, 1773, 20002, 104496, 9370, 44931, 100630, 9852, 675, 3837, 99999, 88991, 107439, 99487, 29991, 3407, 99886, 100696, 20412, 108532, 3837, 99999, 376, 67, 16384, 29635, 17714, 2073, 108532, 96332, 80094, 20412, 9, 16, 15, 15, 15, 31207, 3837, 99817, 80094, 24562, 18830, 9, 17992, 3837, 99999, 6045, 27234, 12135, 29635, 17714, 1866, 1773, 80094, 64471, 58362, 14880, 19793, 3837, 20412, 9370, 3837, 99999, 6045, 27234, 12135, 20412, 1866, 3407, 102299, 20412, 18, 13, 21, 69982, 99999, 7698, 29635, 17714, 18, 13, 21, 1773, 102299, 64471, 58362, 14880, 19793, 3837, 99817, 80443, 9, 17992, 3837, 99999, 7698, 27234, 12135, 20412, 3849, 3407, 100025, 29991, 20412, 85254, 99419, 101406, 33108, 85254, 99683, 101406, 3837, 87267, 85106, 107439, 26939, 5370, 69824, 15946, 1773, 99817, 87267, 20002, 99880, 103991, 100025, 29991, 106249, 38989, 29732, 3837, 99999, 85106, 44063, 105932, 29991, 100622, 69824, 101047, 102268, 3407, 99601, 85106, 101071, 107189, 114078, 9370, 44931, 57191, 32100, 1773, 77557, 3837, 80094, 64471, 85106, 14880, 19793, 3837, 99817, 100692, 20412, 1866, 3837, 88991, 1773, 102299, 64471, 85106, 14880, 19793, 3837, 99817, 80443, 3837, 99999, 88991, 1773, 99814, 46100, 88991, 3837, 80443, 101167, 48391, 3837, 88991, 3407, 100161, 3837, 103944, 55338, 44931, 71268, 88991, 106637, 90395, 100136, 5370, 69824, 68805, 88991, 3837, 80443, 115916, 109502, 66394, 1773, 81167, 42192, 29056, 33447, 3837, 44063, 59151, 104387, 12857, 69824, 68805, 31526, 8997, 151668, 271, 9640, 220, 341, 262, 330, 9852, 2078, 788, 330, 17, 20, 15, 15, 15, 16, 756, 262, 330, 9852, 675, 788, 330, 17, 20, 114418, 15, 16, 756, 262, 330, 376, 67, 16384, 788, 330, 108532, 756, 262, 330, 6045, 788, 330, 16, 15, 15, 15, 15, 15, 15, 15, 756, 262, 330, 7698, 788, 220, 18, 13, 21, 345, 262, 330, 6045, 27234, 12135, 788, 830, 345, 262, 330, 7698, 27234, 12135, 788, 895, 345, 262, 330, 57603, 675, 788, 4383, 85254, 99419, 101406, 497, 330, 85254, 99683, 101406, 7026, 220, 456, 60], "total_duration": 14752141602, "load_duration": 24392741, "prompt_eval_count": 265, "prompt_eval_duration": 2178072784, "eval_count": 566, "eval_duration": 12548757214}
2025-06-10 03:01:32,511 - __main__ - INFO - Validating Ollama response: {"model": "qwen3:0.6b", "created_at": "2025-06-09T19:01:32.503651Z", "response": "<think>\n好的，我现在需要处理用户的查询，将包含多个债券产品的交易文本解析为JSON数组格式。首先，我需要仔细阅读用户提供的文本，并理解每个产品的结构和要求。\n\n用户给出的文本是：“250001.IB 25国债01 买入 *1000万 3.6% 景益货币 景顺货币”。看起来每个产品有多个基金名称，比如“景益货币”和“景顺货币”。这些基金名称需要提取到JSON数组中，可能每个基金名称是一个单独的条目。\n\n首先，我需要确认每个产品的字段。用户要求每个产品对应一个JSON对象，包含assetCode、assetName、trdSide、amount、rate、amountReqFlag、rateReqFlag、fundName。这里需要注意的是，assetCode需要是4位数字及以上纯数字，不能被100整除，且不能包含小数点或特殊字符。检查原文中的资产代码，250001看起来是四位数字，符合要求，且没有特殊字符，所以没问题。\n\n接下来是资产名称，这里看起来是“25国债01”，需要确认是否正确。用户提到的字段包括assetName，所以正确提取这个名称。\n\n交易方向是买入，所以trdSide设为“买入”。\n\n金额是*1000万，这里金额前有*号，所以amountReqFlag设为true。金额是否需请示，是的，所以amountReqFlag是true。\n\n利率是3.6%，所以rate设为3.6。利率是否需请示，这里没有*号，所以rateReqFlag是false。\n\n基金名称是景益货币和景顺货币，可能需要提取到JSON数组中。这里可能用户希望每个基金名称作为一个条目，所以需要将这两个名称作为数组中的元素。\n\n现在需要检查是否有遗漏的字段或错误。例如，金额是否需要请示，这里明确是true，正确。利率是否需要请示，这里没有，所以正确。资产代码正确，没有特殊字符，正确。\n\n最后，确保所有字段都正确解析，并且JSON数组格式正确，没有多余的文字说明。确认无误后，将结果整理成数组格式返回。\n</think>\n\n[\n  {\n    \"assetCode\": \"250001\",\n    \"assetName\": \"25国债01\",\n    \"trdSide\": \"买入\",\n    \"amount\": \"10000000\",\n    \"rate\": 3.6,\n    \"amountReqFlag\": true,\n    \"rateReqFlag\": false,\n    \"fundName\": [\"景益货币\", \"景顺货币\"]\n  }\n]", "done": true, "done_reason": "stop", "context": [151644, 872, 198, 14880, 44063, 87752, 102298, 101213, 104976, 104703, 99886, 108704, 106637, 17714, 5370, 69824, 68805, 3837, 103991, 82700, 103124, 46944, 5370, 64429, 3837, 91680, 31526, 5370, 69824, 3837, 100148, 102298, 92894, 87335, 66394, 28311, 17, 20, 15, 15, 15, 16, 2447, 33, 220, 17, 20, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 220, 18, 13, 21, 4, 220, 6567, 247, 107, 99419, 101406, 6567, 247, 107, 99683, 101406, 271, 103991, 82700, 85106, 107439, 9370, 44931, 28311, 12, 9329, 2078, 25, 4891, 222, 118, 100054, 46100, 17714, 102704, 220, 19, 220, 24156, 82587, 109887, 100073, 82587, 16530, 100630, 9909, 30709, 8863, 27442, 3837, 20929, 17992, 49567, 108112, 101167, 48391, 7552, 100136, 53153, 99250, 16, 15, 15, 63431, 20755, 100631, 102704, 48888, 14777, 118294, 29465, 3256, 17515, 8590, 17515, 61228, 49567, 3837, 75882, 118294, 100143, 85767, 8, 59217, 12, 9329, 675, 25, 4891, 222, 118, 100054, 29991, 198, 12, 489, 67, 16384, 25, 220, 99886, 100696, 9909, 108532, 14, 109430, 23083, 12, 3311, 25, 220, 99886, 80094, 9909, 82587, 23083, 12, 4379, 25, 19468, 102, 95355, 9909, 82587, 23083, 12, 3311, 27234, 12135, 25, 220, 80094, 64471, 58362, 14880, 19793, 9909, 117661, 25511, 3837, 39165, 80094, 24562, 18830, 9, 17992, 13343, 17714, 1866, 23083, 12, 4379, 27234, 12135, 25, 19468, 102, 95355, 64471, 58362, 14880, 19793, 9909, 117661, 25511, 3837, 39165, 102299, 24562, 18830, 9, 17992, 13343, 17714, 1866, 23083, 12, 3802, 675, 25, 4891, 253, 118, 34230, 29991, 11, 100346, 18947, 1607, 11, 85106, 107439, 20221, 100025, 29991, 11, 87267, 102298, 101213, 100025, 29991, 271, 151645, 198, 151644, 77091, 198, 151667, 198, 99692, 3837, 107520, 85106, 54542, 107494, 51154, 3837, 44063, 102298, 101213, 104976, 104703, 99886, 108704, 106637, 17714, 5370, 69824, 68805, 1773, 101140, 3837, 35946, 85106, 104857, 101113, 20002, 103008, 108704, 90395, 101128, 103991, 104703, 100166, 33108, 101882, 3407, 20002, 107485, 9370, 108704, 20412, 36987, 17, 20, 15, 15, 15, 16, 2447, 33, 220, 17, 20, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 220, 18, 13, 21, 4, 6567, 247, 107, 99419, 101406, 6567, 247, 107, 99683, 101406, 55807, 104544, 103991, 82700, 18830, 101213, 100025, 29991, 3837, 101912, 2073, 85254, 99419, 101406, 854, 33108, 2073, 85254, 99683, 101406, 55807, 100001, 100025, 29991, 85106, 107439, 26939, 5370, 69824, 15946, 3837, 87267, 103991, 100025, 29991, 101909, 105818, 9370, 38989, 29732, 3407, 101140, 3837, 35946, 85106, 81167, 103991, 104703, 44931, 1773, 20002, 101882, 103991, 82700, 103124, 46944, 5370, 64429, 3837, 102298, 9852, 2078, 5373, 9852, 675, 5373, 376, 67, 16384, 5373, 6045, 5373, 7698, 5373, 6045, 27234, 12135, 5373, 7698, 27234, 12135, 5373, 57603, 675, 1773, 99817, 107916, 100146, 3837, 9852, 2078, 85106, 20412, 19, 24156, 82587, 109887, 100073, 82587, 3837, 53153, 99250, 16, 15, 15, 63431, 20755, 3837, 100136, 53153, 102298, 30709, 8863, 27442, 57191, 101167, 48391, 1773, 101071, 103283, 101047, 99814, 46100, 3837, 17, 20, 15, 15, 15, 16, 104544, 20412, 115605, 82587, 3837, 101137, 101882, 3837, 100136, 80443, 101167, 48391, 3837, 99999, 114815, 3407, 104326, 20412, 99814, 29991, 3837, 99817, 104544, 20412, 2073, 17, 20, 114418, 15, 16, 33590, 85106, 81167, 64471, 88991, 1773, 20002, 104496, 9370, 44931, 100630, 9852, 675, 3837, 99999, 88991, 107439, 99487, 29991, 3407, 99886, 100696, 20412, 108532, 3837, 99999, 376, 67, 16384, 29635, 17714, 2073, 108532, 96332, 80094, 20412, 9, 16, 15, 15, 15, 31207, 3837, 99817, 80094, 24562, 18830, 9, 17992, 3837, 99999, 6045, 27234, 12135, 29635, 17714, 1866, 1773, 80094, 64471, 58362, 14880, 19793, 3837, 20412, 9370, 3837, 99999, 6045, 27234, 12135, 20412, 1866, 3407, 102299, 20412, 18, 13, 21, 69982, 99999, 7698, 29635, 17714, 18, 13, 21, 1773, 102299, 64471, 58362, 14880, 19793, 3837, 99817, 80443, 9, 17992, 3837, 99999, 7698, 27234, 12135, 20412, 3849, 3407, 100025, 29991, 20412, 85254, 99419, 101406, 33108, 85254, 99683, 101406, 3837, 87267, 85106, 107439, 26939, 5370, 69824, 15946, 1773, 99817, 87267, 20002, 99880, 103991, 100025, 29991, 106249, 38989, 29732, 3837, 99999, 85106, 44063, 105932, 29991, 100622, 69824, 101047, 102268, 3407, 99601, 85106, 101071, 107189, 114078, 9370, 44931, 57191, 32100, 1773, 77557, 3837, 80094, 64471, 85106, 14880, 19793, 3837, 99817, 100692, 20412, 1866, 3837, 88991, 1773, 102299, 64471, 85106, 14880, 19793, 3837, 99817, 80443, 3837, 99999, 88991, 1773, 99814, 46100, 88991, 3837, 80443, 101167, 48391, 3837, 88991, 3407, 100161, 3837, 103944, 55338, 44931, 71268, 88991, 106637, 90395, 100136, 5370, 69824, 68805, 88991, 3837, 80443, 115916, 109502, 66394, 1773, 81167, 42192, 29056, 33447, 3837, 44063, 59151, 104387, 12857, 69824, 68805, 31526, 8997, 151668, 271, 9640, 220, 341, 262, 330, 9852, 2078, 788, 330, 17, 20, 15, 15, 15, 16, 756, 262, 330, 9852, 675, 788, 330, 17, 20, 114418, 15, 16, 756, 262, 330, 376, 67, 16384, 788, 330, 108532, 756, 262, 330, 6045, 788, 330, 16, 15, 15, 15, 15, 15, 15, 15, 756, 262, 330, 7698, 788, 220, 18, 13, 21, 345, 262, 330, 6045, 27234, 12135, 788, 830, 345, 262, 330, 7698, 27234, 12135, 788, 895, 345, 262, 330, 57603, 675, 788, 4383, 85254, 99419, 101406, 497, 330, 85254, 99683, 101406, 7026, 220, 456, 60], "total_duration": 14752141602, "load_duration": 24392741, "prompt_eval_count": 265, "prompt_eval_duration": 2178072784, "eval_count": 566, "eval_duration": 12548757214}
2025-06-10 03:01:32,511 - __main__ - INFO - Raw model response: <think>
好的，我现在需要处理用户的查询，将包含多个债券产品的交易文本解析为JSON数组格式。首先，我需要仔细阅读用户提供的文本，并理解每个产品的结构和要求。

用户给出的文本是：“250001.IB 25国债01 买入 *1000万 3.6% 景益货币 景顺货币”。看起来每个产品有多个基金名称，比如“景益货币”和“景顺货币”。这些基金名称需要提取到JSON数组中，可能每个基金名称是一个单独的条目。

首先，我需要确认每个产品的字段。用户要求每个产品对应一个JSON对象，包含assetCode、assetName、trdSide、amount、rate、amountReqFlag、rateReqFlag、fundName。这里需要注意的是，assetCode需要是4位数字及以上纯数字，不能被100整除，且不能包含小数点或特殊字符。检查原文中的资产代码，250001看起来是四位数字，符合要求，且没有特殊字符，所以没问题。

接下来是资产名称，这里看起来是“25国债01”，需要确认是否正确。用户提到的字段包括assetName，所以正确提取这个名称。

交易方向是买入，所以trdSide设为“买入”。

金额是*1000万，这里金额前有*号，所以amountReqFlag设为true。金额是否需请示，是的，所以amountReqFlag是true。

利率是3.6%，所以rate设为3.6。利率是否需请示，这里没有*号，所以rateReqFlag是false。

基金名称是景益货币和景顺货币，可能需要提取到JSON数组中。这里可能用户希望每个基金名称作为一个条目，所以需要将这两个名称作为数组中的元素。

现在需要检查是否有遗漏的字段或错误。例如，金额是否需要请示，这里明确是true，正确。利率是否需要请示，这里没有，所以正确。资产代码正确，没有特殊字符，正确。

最后，确保所有字段都正确解析，并且JSON数组格式正确，没有多余的文字说明。确认无误后，将结果整理成数组格式返回。
</think>

[
  {
    "assetCode": "250001",
    "assetName": "25国债01",
    "trdSide": "买入",
    "amount": "10000000",
    "rate": 3.6,
    "amountReqFlag": true,
    "rateReqFlag": false,
    "fundName": ["景益货币", "景顺货币"]
  }
]
2025-06-10 03:01:32,512 - __main__ - ERROR - JSON decode error: Expecting value: line 1 column 1 (char 0)
2025-06-10 03:01:32,512 - __main__ - INFO - Extracted JSON string: {
    "assetCode": "250001",
    "assetName": "25国债01",
    "trdSide": "买入",
    "amount": "10000000",
    "rate": 3.6,
    "amountReqFlag": true,
    "rateReqFlag": false,
    "fundName": ["景益货币", "景顺货币"]
  }
2025-06-10 03:01:32,512 - __main__ - INFO - Normalizing parsed data: {'assetCode': '250001', 'assetName': '25国债01', 'trdSide': '买入', 'amount': '10000000', 'rate': 3.6, 'amountReqFlag': True, 'rateReqFlag': False, 'fundName': ['景益货币', '景顺货币']}
2025-06-10 03:01:32,512 - __main__ - INFO - Normalized data: {'assetCode': '250001', 'assetName': '25国债01', 'trdSide': '买入', 'amount': 10000000.0, 'rate': 3.6, 'amountReqFlag': True, 'rateReqFlag': False, 'fundName': ['景益货币', '景顺货币']}
2025-06-10 03:01:32,512 - __main__ - INFO - Successfully parsed bond data: {'assetCode': '250001', 'assetName': '25国债01', 'trdSide': '买入', 'amount': 10000000.0, 'rate': 3.6, 'amountReqFlag': True, 'rateReqFlag': False, 'fundName': ['景益货币', '景顺货币']}
2025-06-10 03:01:32,512 - __main__ - INFO - Successfully validated and returned parsed data: assetCode='250001' assetName='25国债01' trdSide='买入' amount=10000000.0 rate=3.6 amountReqFlag=True rateReqFlag=False fundName=['景益货币', '景顺货币']
2025-06-10 03:02:03,575 - __main__ - INFO - Received smart parse request: 250001.IB 25国债01 买入 *1000万 3.6%  景益货币、景顺货币, context: 
2025-06-10 03:02:03,576 - __main__ - INFO - AI recommended prompt type: 带请示单一指令解析
2025-06-10 03:02:03,577 - __main__ - INFO - AI reasoning: 基于以下特征选择了'带请示单一指令解析'模板：包含*号=True, 多产品=False, 是问题=False, 产品数量=1
2025-06-10 03:02:03,577 - __main__ - INFO - Calling Ollama model with text: 250001.IB 25国债01 买入 *1000万 3.6%  景益货币、景顺货币, prompt_type: 带请示单一指令解析
2025-06-10 03:02:03,582 - __main__ - INFO - Ollama service is available
2025-06-10 03:02:03,605 - __main__ - INFO - Available models: {"models": [{"name": "qwen3:0.6b", "model": "qwen3:0.6b", "modified_at": "2025-05-08T01:27:52.753829715+08:00", "size": 522653526, "digest": "3bae9c93586b27bedaa979979733c2b0edd1d0defc745e9638f2161192a0ccf0", "details": {"parent_model": "", "format": "gguf", "family": "qwen3", "families": ["qwen3"], "parameter_size": "751.63M", "quantization_level": "Q4_K_M"}}]}
2025-06-10 03:02:03,605 - __main__ - INFO - Sending request to Ollama: {"model": "qwen3:0.6b", "prompt": "请将以下债券交易文本解析为JSON格式，特别注意标有*号的金额和利率需要请示，只返回JSON对象，不要包含其他文字说明：\n250001.IB 25国债01 买入 *1000万 3.6%  景益货币、景顺货币\n\n需要提取的字段：\n- assetCode: 债券代码为含有 4 位数字及以上纯数字不包括（小数点，加号等任意特殊字符）且不能被100整除或者含有任一关键字 (.IB,.SH,.SZ等，该关键字支持配置)；\n- assetName: 债券名称\n- trdSide: 交易方向（买入/卖出）\n- amount: 交易金额（数字）\n- rate: 利率（数字）\n- amountReqFlag: 金额是否需请示（布尔值，当金额前有*号或包含\"可议价\"、\"价格可议\"等关键词时为true）\n- rateReqFlag: 利率是否需请示（布尔值，当利率前有*号或包含\"可议价\"、\"价格可议\"等关键词时为true）\n\n", "stream": false}
2025-06-10 03:02:20,140 - __main__ - INFO - Received response from Ollama: {"model": "qwen3:0.6b", "created_at": "2025-06-09T19:02:20.134588Z", "response": "<think>\n好的，我现在需要处理用户的请求，将债券交易文本解析为JSON格式，并且特别注意标有*号的金额和利率，以及金额是否需请示的字段。首先，我需要仔细阅读用户的指示，确保完全理解每个要求。\n\n用户提供的文本是：“250001.IB 25国债01 买入 *1000万 3.6% 景益货币、景顺货币”。我需要提取的字段包括assetCode、assetName、trdSide、amount、rate、amountReqFlag、rateReqFlag。同时，标有*号的金额和利率需要请示，而金额是否需请示的字段要设置布尔值，根据金额前有*号或者包含“可议价”等关键词来判断。\n\n首先，检查资产代码。用户提到资产代码需要是4位数字及以上纯数字，不能被100整除，且不能包含小数点或特殊字符。当前资产代码是“250001.IB”，看起来是10位，但可能需要验证是否符合要求。这里可能有问题，因为10位数字，但可能不够，比如是否被100整除？不过用户可能希望资产代码是纯数字，所以可能需要检查是否符合该条件。不过用户可能已经处理过，所以暂时假设正确。\n\n接下来是资产名称，是“25国债01”，没问题。交易方向是“买入”。金额是*1000万，这里需要判断是否需请示，金额前有*号，所以amountReqFlag设为true。利率是3.6%，同样需要判断是否需请示，利率前没有*号或关键词，所以rateReqFlag设为false。其他字段如trdSide、rate都正确。\n\n现在检查是否所有要求都满足，特别是金额和利率是否需请示。确认无误后，将结果整理成JSON对象，确保不包含其他文字说明，并且字段正确对应。\n</think>\n\n{\n  \"assetCode\": \"250001.IB\",\n  \"assetName\": \"25国债01\",\n  \"trdSide\": \"买入\",\n  \"amount\": 1000000,\n  \"rate\": 3.6,\n  \"amountReqFlag\": true,\n  \"rateReqFlag\": false\n}", "done": true, "done_reason": "stop", "context": [151644, 872, 198, 14880, 44063, 87752, 104976, 99886, 108704, 106637, 17714, 5370, 68805, 3837, 100654, 60533, 30844, 18830, 9, 17992, 9370, 80094, 33108, 102299, 85106, 14880, 19793, 3837, 91680, 31526, 5370, 64429, 3837, 100148, 102298, 92894, 87335, 66394, 28311, 17, 20, 15, 15, 15, 16, 2447, 33, 220, 17, 20, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 220, 18, 13, 21, 4, 220, 6567, 247, 107, 99419, 101406, 5373, 85254, 99683, 101406, 271, 85106, 107439, 9370, 44931, 28311, 12, 9329, 2078, 25, 4891, 222, 118, 100054, 46100, 17714, 102704, 220, 19, 220, 24156, 82587, 109887, 100073, 82587, 16530, 100630, 9909, 30709, 8863, 27442, 3837, 20929, 17992, 49567, 108112, 101167, 48391, 7552, 100136, 53153, 99250, 16, 15, 15, 63431, 20755, 100631, 102704, 48888, 14777, 118294, 29465, 3256, 17515, 8590, 17515, 61228, 49567, 3837, 75882, 118294, 100143, 85767, 8, 59217, 12, 9329, 675, 25, 4891, 222, 118, 100054, 29991, 198, 12, 489, 67, 16384, 25, 220, 99886, 100696, 9909, 108532, 14, 109430, 23083, 12, 3311, 25, 220, 99886, 80094, 9909, 82587, 23083, 12, 4379, 25, 19468, 102, 95355, 9909, 82587, 23083, 12, 3311, 27234, 12135, 25, 220, 80094, 64471, 58362, 14880, 19793, 9909, 117661, 25511, 3837, 39165, 80094, 24562, 18830, 9, 17992, 57191, 102298, 1, 30440, 96422, 50292, 1, 5373, 1, 97480, 30440, 96422, 1, 49567, 105291, 13343, 17714, 1866, 23083, 12, 4379, 27234, 12135, 25, 19468, 102, 95355, 64471, 58362, 14880, 19793, 9909, 117661, 25511, 3837, 39165, 102299, 24562, 18830, 9, 17992, 57191, 102298, 1, 30440, 96422, 50292, 1, 5373, 1, 97480, 30440, 96422, 1, 49567, 105291, 13343, 17714, 1866, 27866, 151645, 198, 151644, 77091, 198, 151667, 198, 99692, 3837, 107520, 85106, 54542, 107494, 34859, 3837, 44063, 104976, 99886, 108704, 106637, 17714, 5370, 68805, 90395, 100136, 100654, 60533, 30844, 18830, 9, 17992, 9370, 80094, 33108, 102299, 3837, 101034, 80094, 64471, 58362, 14880, 19793, 9370, 44931, 1773, 101140, 3837, 35946, 85106, 104857, 101113, 107494, 102857, 3837, 103944, 100372, 101128, 103991, 101882, 3407, 20002, 103008, 108704, 20412, 36987, 17, 20, 15, 15, 15, 16, 2447, 33, 220, 17, 20, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 220, 18, 13, 21, 4, 6567, 247, 107, 99419, 101406, 5373, 85254, 99683, 101406, 55807, 35946, 85106, 107439, 9370, 44931, 100630, 9852, 2078, 5373, 9852, 675, 5373, 376, 67, 16384, 5373, 6045, 5373, 7698, 5373, 6045, 27234, 12135, 5373, 7698, 27234, 12135, 1773, 91572, 3837, 30844, 18830, 9, 17992, 9370, 80094, 33108, 102299, 85106, 14880, 19793, 3837, 68536, 80094, 64471, 58362, 14880, 19793, 9370, 44931, 30534, 43918, 117661, 25511, 3837, 100345, 80094, 24562, 18830, 9, 17992, 100631, 102298, 2073, 30440, 96422, 50292, 854, 49567, 105291, 36407, 104317, 3407, 101140, 3837, 101071, 99814, 46100, 1773, 20002, 104496, 99814, 46100, 85106, 20412, 19, 24156, 82587, 109887, 100073, 82587, 3837, 53153, 99250, 16, 15, 15, 63431, 20755, 3837, 100136, 53153, 102298, 30709, 8863, 27442, 57191, 101167, 48391, 1773, 67949, 99814, 46100, 20412, 2073, 17, 20, 15, 15, 15, 16, 2447, 33, 33590, 104544, 20412, 16, 15, 24156, 3837, 77288, 87267, 85106, 48927, 64471, 101137, 101882, 1773, 99817, 87267, 110686, 3837, 99519, 16, 15, 24156, 82587, 3837, 77288, 87267, 104222, 3837, 101912, 64471, 99250, 16, 15, 15, 63431, 20755, 11319, 100632, 20002, 87267, 99880, 99814, 46100, 20412, 100073, 82587, 3837, 99999, 87267, 85106, 101071, 64471, 101137, 75882, 76095, 1773, 100632, 20002, 87267, 99461, 54542, 38182, 3837, 99999, 105253, 108140, 88991, 3407, 104326, 20412, 99814, 29991, 3837, 20412, 2073, 17, 20, 114418, 15, 16, 33590, 114815, 1773, 99886, 100696, 20412, 2073, 108532, 55807, 80094, 20412, 9, 16, 15, 15, 15, 31207, 3837, 99817, 85106, 104317, 64471, 58362, 14880, 19793, 3837, 80094, 24562, 18830, 9, 17992, 3837, 99999, 6045, 27234, 12135, 29635, 17714, 1866, 1773, 102299, 20412, 18, 13, 21, 69982, 101165, 85106, 104317, 64471, 58362, 14880, 19793, 3837, 102299, 24562, 80443, 9, 17992, 57191, 105291, 3837, 99999, 7698, 27234, 12135, 29635, 17714, 3849, 1773, 92894, 44931, 29524, 376, 67, 16384, 5373, 7698, 71268, 88991, 3407, 99601, 101071, 64471, 55338, 101882, 71268, 101929, 3837, 104050, 80094, 33108, 102299, 64471, 58362, 14880, 19793, 1773, 81167, 42192, 29056, 33447, 3837, 44063, 59151, 104387, 12857, 5370, 64429, 3837, 103944, 16530, 102298, 92894, 87335, 66394, 90395, 100136, 44931, 88991, 103124, 8997, 151668, 271, 515, 220, 330, 9852, 2078, 788, 330, 17, 20, 15, 15, 15, 16, 2447, 33, 756, 220, 330, 9852, 675, 788, 330, 17, 20, 114418, 15, 16, 756, 220, 330, 376, 67, 16384, 788, 330, 108532, 756, 220, 330, 6045, 788, 220, 16, 15, 15, 15, 15, 15, 15, 345, 220, 330, 7698, 788, 220, 18, 13, 21, 345, 220, 330, 6045, 27234, 12135, 788, 830, 345, 220, 330, 7698, 27234, 12135, 788, 895, 198, 92], "total_duration": 16526011035, "load_duration": 32411842, "prompt_eval_count": 269, "prompt_eval_duration": 2485004734, "eval_count": 502, "eval_duration": 14007893301}
2025-06-10 03:02:20,140 - __main__ - INFO - Validating Ollama response: {"model": "qwen3:0.6b", "created_at": "2025-06-09T19:02:20.134588Z", "response": "<think>\n好的，我现在需要处理用户的请求，将债券交易文本解析为JSON格式，并且特别注意标有*号的金额和利率，以及金额是否需请示的字段。首先，我需要仔细阅读用户的指示，确保完全理解每个要求。\n\n用户提供的文本是：“250001.IB 25国债01 买入 *1000万 3.6% 景益货币、景顺货币”。我需要提取的字段包括assetCode、assetName、trdSide、amount、rate、amountReqFlag、rateReqFlag。同时，标有*号的金额和利率需要请示，而金额是否需请示的字段要设置布尔值，根据金额前有*号或者包含“可议价”等关键词来判断。\n\n首先，检查资产代码。用户提到资产代码需要是4位数字及以上纯数字，不能被100整除，且不能包含小数点或特殊字符。当前资产代码是“250001.IB”，看起来是10位，但可能需要验证是否符合要求。这里可能有问题，因为10位数字，但可能不够，比如是否被100整除？不过用户可能希望资产代码是纯数字，所以可能需要检查是否符合该条件。不过用户可能已经处理过，所以暂时假设正确。\n\n接下来是资产名称，是“25国债01”，没问题。交易方向是“买入”。金额是*1000万，这里需要判断是否需请示，金额前有*号，所以amountReqFlag设为true。利率是3.6%，同样需要判断是否需请示，利率前没有*号或关键词，所以rateReqFlag设为false。其他字段如trdSide、rate都正确。\n\n现在检查是否所有要求都满足，特别是金额和利率是否需请示。确认无误后，将结果整理成JSON对象，确保不包含其他文字说明，并且字段正确对应。\n</think>\n\n{\n  \"assetCode\": \"250001.IB\",\n  \"assetName\": \"25国债01\",\n  \"trdSide\": \"买入\",\n  \"amount\": 1000000,\n  \"rate\": 3.6,\n  \"amountReqFlag\": true,\n  \"rateReqFlag\": false\n}", "done": true, "done_reason": "stop", "context": [151644, 872, 198, 14880, 44063, 87752, 104976, 99886, 108704, 106637, 17714, 5370, 68805, 3837, 100654, 60533, 30844, 18830, 9, 17992, 9370, 80094, 33108, 102299, 85106, 14880, 19793, 3837, 91680, 31526, 5370, 64429, 3837, 100148, 102298, 92894, 87335, 66394, 28311, 17, 20, 15, 15, 15, 16, 2447, 33, 220, 17, 20, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 220, 18, 13, 21, 4, 220, 6567, 247, 107, 99419, 101406, 5373, 85254, 99683, 101406, 271, 85106, 107439, 9370, 44931, 28311, 12, 9329, 2078, 25, 4891, 222, 118, 100054, 46100, 17714, 102704, 220, 19, 220, 24156, 82587, 109887, 100073, 82587, 16530, 100630, 9909, 30709, 8863, 27442, 3837, 20929, 17992, 49567, 108112, 101167, 48391, 7552, 100136, 53153, 99250, 16, 15, 15, 63431, 20755, 100631, 102704, 48888, 14777, 118294, 29465, 3256, 17515, 8590, 17515, 61228, 49567, 3837, 75882, 118294, 100143, 85767, 8, 59217, 12, 9329, 675, 25, 4891, 222, 118, 100054, 29991, 198, 12, 489, 67, 16384, 25, 220, 99886, 100696, 9909, 108532, 14, 109430, 23083, 12, 3311, 25, 220, 99886, 80094, 9909, 82587, 23083, 12, 4379, 25, 19468, 102, 95355, 9909, 82587, 23083, 12, 3311, 27234, 12135, 25, 220, 80094, 64471, 58362, 14880, 19793, 9909, 117661, 25511, 3837, 39165, 80094, 24562, 18830, 9, 17992, 57191, 102298, 1, 30440, 96422, 50292, 1, 5373, 1, 97480, 30440, 96422, 1, 49567, 105291, 13343, 17714, 1866, 23083, 12, 4379, 27234, 12135, 25, 19468, 102, 95355, 64471, 58362, 14880, 19793, 9909, 117661, 25511, 3837, 39165, 102299, 24562, 18830, 9, 17992, 57191, 102298, 1, 30440, 96422, 50292, 1, 5373, 1, 97480, 30440, 96422, 1, 49567, 105291, 13343, 17714, 1866, 27866, 151645, 198, 151644, 77091, 198, 151667, 198, 99692, 3837, 107520, 85106, 54542, 107494, 34859, 3837, 44063, 104976, 99886, 108704, 106637, 17714, 5370, 68805, 90395, 100136, 100654, 60533, 30844, 18830, 9, 17992, 9370, 80094, 33108, 102299, 3837, 101034, 80094, 64471, 58362, 14880, 19793, 9370, 44931, 1773, 101140, 3837, 35946, 85106, 104857, 101113, 107494, 102857, 3837, 103944, 100372, 101128, 103991, 101882, 3407, 20002, 103008, 108704, 20412, 36987, 17, 20, 15, 15, 15, 16, 2447, 33, 220, 17, 20, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 220, 18, 13, 21, 4, 6567, 247, 107, 99419, 101406, 5373, 85254, 99683, 101406, 55807, 35946, 85106, 107439, 9370, 44931, 100630, 9852, 2078, 5373, 9852, 675, 5373, 376, 67, 16384, 5373, 6045, 5373, 7698, 5373, 6045, 27234, 12135, 5373, 7698, 27234, 12135, 1773, 91572, 3837, 30844, 18830, 9, 17992, 9370, 80094, 33108, 102299, 85106, 14880, 19793, 3837, 68536, 80094, 64471, 58362, 14880, 19793, 9370, 44931, 30534, 43918, 117661, 25511, 3837, 100345, 80094, 24562, 18830, 9, 17992, 100631, 102298, 2073, 30440, 96422, 50292, 854, 49567, 105291, 36407, 104317, 3407, 101140, 3837, 101071, 99814, 46100, 1773, 20002, 104496, 99814, 46100, 85106, 20412, 19, 24156, 82587, 109887, 100073, 82587, 3837, 53153, 99250, 16, 15, 15, 63431, 20755, 3837, 100136, 53153, 102298, 30709, 8863, 27442, 57191, 101167, 48391, 1773, 67949, 99814, 46100, 20412, 2073, 17, 20, 15, 15, 15, 16, 2447, 33, 33590, 104544, 20412, 16, 15, 24156, 3837, 77288, 87267, 85106, 48927, 64471, 101137, 101882, 1773, 99817, 87267, 110686, 3837, 99519, 16, 15, 24156, 82587, 3837, 77288, 87267, 104222, 3837, 101912, 64471, 99250, 16, 15, 15, 63431, 20755, 11319, 100632, 20002, 87267, 99880, 99814, 46100, 20412, 100073, 82587, 3837, 99999, 87267, 85106, 101071, 64471, 101137, 75882, 76095, 1773, 100632, 20002, 87267, 99461, 54542, 38182, 3837, 99999, 105253, 108140, 88991, 3407, 104326, 20412, 99814, 29991, 3837, 20412, 2073, 17, 20, 114418, 15, 16, 33590, 114815, 1773, 99886, 100696, 20412, 2073, 108532, 55807, 80094, 20412, 9, 16, 15, 15, 15, 31207, 3837, 99817, 85106, 104317, 64471, 58362, 14880, 19793, 3837, 80094, 24562, 18830, 9, 17992, 3837, 99999, 6045, 27234, 12135, 29635, 17714, 1866, 1773, 102299, 20412, 18, 13, 21, 69982, 101165, 85106, 104317, 64471, 58362, 14880, 19793, 3837, 102299, 24562, 80443, 9, 17992, 57191, 105291, 3837, 99999, 7698, 27234, 12135, 29635, 17714, 3849, 1773, 92894, 44931, 29524, 376, 67, 16384, 5373, 7698, 71268, 88991, 3407, 99601, 101071, 64471, 55338, 101882, 71268, 101929, 3837, 104050, 80094, 33108, 102299, 64471, 58362, 14880, 19793, 1773, 81167, 42192, 29056, 33447, 3837, 44063, 59151, 104387, 12857, 5370, 64429, 3837, 103944, 16530, 102298, 92894, 87335, 66394, 90395, 100136, 44931, 88991, 103124, 8997, 151668, 271, 515, 220, 330, 9852, 2078, 788, 330, 17, 20, 15, 15, 15, 16, 2447, 33, 756, 220, 330, 9852, 675, 788, 330, 17, 20, 114418, 15, 16, 756, 220, 330, 376, 67, 16384, 788, 330, 108532, 756, 220, 330, 6045, 788, 220, 16, 15, 15, 15, 15, 15, 15, 345, 220, 330, 7698, 788, 220, 18, 13, 21, 345, 220, 330, 6045, 27234, 12135, 788, 830, 345, 220, 330, 7698, 27234, 12135, 788, 895, 198, 92], "total_duration": 16526011035, "load_duration": 32411842, "prompt_eval_count": 269, "prompt_eval_duration": 2485004734, "eval_count": 502, "eval_duration": 14007893301}
2025-06-10 03:02:20,140 - __main__ - INFO - Raw model response: <think>
好的，我现在需要处理用户的请求，将债券交易文本解析为JSON格式，并且特别注意标有*号的金额和利率，以及金额是否需请示的字段。首先，我需要仔细阅读用户的指示，确保完全理解每个要求。

用户提供的文本是：“250001.IB 25国债01 买入 *1000万 3.6% 景益货币、景顺货币”。我需要提取的字段包括assetCode、assetName、trdSide、amount、rate、amountReqFlag、rateReqFlag。同时，标有*号的金额和利率需要请示，而金额是否需请示的字段要设置布尔值，根据金额前有*号或者包含“可议价”等关键词来判断。

首先，检查资产代码。用户提到资产代码需要是4位数字及以上纯数字，不能被100整除，且不能包含小数点或特殊字符。当前资产代码是“250001.IB”，看起来是10位，但可能需要验证是否符合要求。这里可能有问题，因为10位数字，但可能不够，比如是否被100整除？不过用户可能希望资产代码是纯数字，所以可能需要检查是否符合该条件。不过用户可能已经处理过，所以暂时假设正确。

接下来是资产名称，是“25国债01”，没问题。交易方向是“买入”。金额是*1000万，这里需要判断是否需请示，金额前有*号，所以amountReqFlag设为true。利率是3.6%，同样需要判断是否需请示，利率前没有*号或关键词，所以rateReqFlag设为false。其他字段如trdSide、rate都正确。

现在检查是否所有要求都满足，特别是金额和利率是否需请示。确认无误后，将结果整理成JSON对象，确保不包含其他文字说明，并且字段正确对应。
</think>

{
  "assetCode": "250001.IB",
  "assetName": "25国债01",
  "trdSide": "买入",
  "amount": 1000000,
  "rate": 3.6,
  "amountReqFlag": true,
  "rateReqFlag": false
}
2025-06-10 03:02:20,140 - __main__ - ERROR - JSON decode error: Expecting value: line 1 column 1 (char 0)
2025-06-10 03:02:20,141 - __main__ - INFO - Extracted JSON string: {
  "assetCode": "250001.IB",
  "assetName": "25国债01",
  "trdSide": "买入",
  "amount": 1000000,
  "rate": 3.6,
  "amountReqFlag": true,
  "rateReqFlag": false
}
2025-06-10 03:02:20,141 - __main__ - INFO - Normalizing parsed data: {'assetCode': '250001.IB', 'assetName': '25国债01', 'trdSide': '买入', 'amount': 1000000, 'rate': 3.6, 'amountReqFlag': True, 'rateReqFlag': False}
2025-06-10 03:02:20,141 - __main__ - INFO - Normalized data: {'assetCode': '250001.IB', 'assetName': '25国债01', 'trdSide': '买入', 'amount': 1000000.0, 'rate': 3.6, 'amountReqFlag': True, 'rateReqFlag': False, 'fundName': []}
2025-06-10 03:02:20,141 - __main__ - INFO - Successfully parsed bond data: {'assetCode': '250001.IB', 'assetName': '25国债01', 'trdSide': '买入', 'amount': 1000000.0, 'rate': 3.6, 'amountReqFlag': True, 'rateReqFlag': False, 'fundName': []}
2025-06-10 03:02:20,142 - __main__ - INFO - Successfully completed smart parsing with AI analysis
2025-06-10 03:15:31,561 - __main__ - INFO - Starting bond text parsing service...
2025-06-10 03:16:08,039 - __main__ - INFO - Received smart parse request: 250001.IB 25国债01 买入 *1000万 3.6%  景益货币、景顺货币, context: 
2025-06-10 03:16:08,043 - __main__ - INFO - AI recommended prompt type: 带请示单一指令解析
2025-06-10 03:16:08,061 - __main__ - INFO - AI reasoning: 基于以下特征选择了'带请示单一指令解析'模板：包含*号=True, 多基金名称=False, 是问题=False, 基金数量=1, 检测到的基金=['景益货币、景顺货币']
2025-06-10 03:16:08,061 - __main__ - INFO - Calling Ollama model with text: 250001.IB 25国债01 买入 *1000万 3.6%  景益货币、景顺货币, prompt_type: 带请示单一指令解析
2025-06-10 03:16:08,076 - __main__ - INFO - Ollama service is available
2025-06-10 03:16:08,092 - __main__ - INFO - Available models: {"models": [{"name": "qwen3:0.6b", "model": "qwen3:0.6b", "modified_at": "2025-05-08T01:27:52.753829715+08:00", "size": 522653526, "digest": "3bae9c93586b27bedaa979979733c2b0edd1d0defc745e9638f2161192a0ccf0", "details": {"parent_model": "", "format": "gguf", "family": "qwen3", "families": ["qwen3"], "parameter_size": "751.63M", "quantization_level": "Q4_K_M"}}]}
2025-06-10 03:16:08,093 - __main__ - INFO - Sending request to Ollama: {"model": "qwen3:0.6b", "prompt": "请将以下债券交易文本解析为JSON格式，特别注意标有*号的金额和利率需要请示，只返回JSON对象，不要包含其他文字说明：\n250001.IB 25国债01 买入 *1000万 3.6%  景益货币、景顺货币\n\n需要提取的字段：\n- assetCode: 债券代码为含有 4 位数字及以上纯数字不包括（小数点，加号等任意特殊字符）且不能被100整除或者含有任一关键字 (.IB,.SH,.SZ等，该关键字支持配置)；\n- assetName: 债券名称\n- trdSide: 交易方向（买入/卖出）\n- amount: 交易金额（数字）\n- rate: 利率（数字）\n- amountReqFlag: 金额是否需请示（布尔值，当金额前有*号或包含\"可议价\"、\"价格可议\"等关键词时为true）\n- rateReqFlag: 利率是否需请示（布尔值，当利率前有*号或包含\"可议价\"、\"价格可议\"等关键词时为true）\n\n", "stream": false}
2025-06-10 03:16:26,096 - __main__ - INFO - Received response from Ollama: {"model": "qwen3:0.6b", "created_at": "2025-06-09T19:16:26.089038Z", "response": "<think>\n好的，我现在需要处理用户提供的债券交易文本，并将其解析为JSON格式，特别注意标有*号的金额和利率，以及金额和利率是否需请示的字段。首先，我需要仔细阅读用户提供的文本，并识别出所有需要提取的字段。\n\n用户给出的文本是：“250001.IB 25国债01 买入 *1000万 3.6% 景益货币、景顺货币”。我需要逐个字段检查，确保不包含其他文字说明，并正确处理特殊字符。\n\n首先，assetCode的字段需要符合四个数字及以上纯数字，且不能被100整除或含有关键字如IB、SH、SZ。原文本中的assetCode是250001，看起来是8位数字，符合要求。接下来是assetName，这里应该是25国债01，没问题。trdSide是买入，正确。amount是*1000万，这里需要检查金额是否需请示。金额前有*号，所以amountReqFlag设为true。rate是3.6%，但注意是否需要请示，原信息中没有提到请示，所以rateReqFlag设为false。另外，金额是否需请示的条件是当金额前有*号或包含“可议价”等关键词，这里确实有*号，所以设置为true。利率前没有*号，但可能需要检查是否有请示关键词，这里没有，所以rateReqFlag设为false。最后，所有字段都正确提取，没有多余的文字说明，确保JSON对象只包含指定的字段。\n</think>\n\n{\n  \"assetCode\": \"250001\",\n  \"assetName\": \"25国债01\",\n  \"trdSide\": \"买入\",\n  \"amount\": 1000000,\n  \"rate\": 3.6,\n  \"amountReqFlag\": true,\n  \"rateReqFlag\": false\n}", "done": true, "done_reason": "stop", "context": [151644, 872, 198, 14880, 44063, 87752, 104976, 99886, 108704, 106637, 17714, 5370, 68805, 3837, 100654, 60533, 30844, 18830, 9, 17992, 9370, 80094, 33108, 102299, 85106, 14880, 19793, 3837, 91680, 31526, 5370, 64429, 3837, 100148, 102298, 92894, 87335, 66394, 28311, 17, 20, 15, 15, 15, 16, 2447, 33, 220, 17, 20, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 220, 18, 13, 21, 4, 220, 6567, 247, 107, 99419, 101406, 5373, 85254, 99683, 101406, 271, 85106, 107439, 9370, 44931, 28311, 12, 9329, 2078, 25, 4891, 222, 118, 100054, 46100, 17714, 102704, 220, 19, 220, 24156, 82587, 109887, 100073, 82587, 16530, 100630, 9909, 30709, 8863, 27442, 3837, 20929, 17992, 49567, 108112, 101167, 48391, 7552, 100136, 53153, 99250, 16, 15, 15, 63431, 20755, 100631, 102704, 48888, 14777, 118294, 29465, 3256, 17515, 8590, 17515, 61228, 49567, 3837, 75882, 118294, 100143, 85767, 8, 59217, 12, 9329, 675, 25, 4891, 222, 118, 100054, 29991, 198, 12, 489, 67, 16384, 25, 220, 99886, 100696, 9909, 108532, 14, 109430, 23083, 12, 3311, 25, 220, 99886, 80094, 9909, 82587, 23083, 12, 4379, 25, 19468, 102, 95355, 9909, 82587, 23083, 12, 3311, 27234, 12135, 25, 220, 80094, 64471, 58362, 14880, 19793, 9909, 117661, 25511, 3837, 39165, 80094, 24562, 18830, 9, 17992, 57191, 102298, 1, 30440, 96422, 50292, 1, 5373, 1, 97480, 30440, 96422, 1, 49567, 105291, 13343, 17714, 1866, 23083, 12, 4379, 27234, 12135, 25, 19468, 102, 95355, 64471, 58362, 14880, 19793, 9909, 117661, 25511, 3837, 39165, 102299, 24562, 18830, 9, 17992, 57191, 102298, 1, 30440, 96422, 50292, 1, 5373, 1, 97480, 30440, 96422, 1, 49567, 105291, 13343, 17714, 1866, 27866, 151645, 198, 151644, 77091, 198, 151667, 198, 99692, 3837, 107520, 85106, 54542, 20002, 103008, 104976, 99886, 108704, 90395, 105278, 106637, 17714, 5370, 68805, 3837, 100654, 60533, 30844, 18830, 9, 17992, 9370, 80094, 33108, 102299, 3837, 101034, 80094, 33108, 102299, 64471, 58362, 14880, 19793, 9370, 44931, 1773, 101140, 3837, 35946, 85106, 104857, 101113, 20002, 103008, 108704, 90395, 102450, 20221, 55338, 85106, 107439, 9370, 44931, 3407, 20002, 107485, 9370, 108704, 20412, 36987, 17, 20, 15, 15, 15, 16, 2447, 33, 220, 17, 20, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 220, 18, 13, 21, 4, 6567, 247, 107, 99419, 101406, 5373, 85254, 99683, 101406, 55807, 35946, 85106, 100062, 18947, 44931, 101071, 3837, 103944, 16530, 102298, 92894, 87335, 66394, 90395, 88991, 54542, 101167, 48391, 3407, 101140, 3837, 9852, 2078, 9370, 44931, 85106, 101137, 100802, 82587, 109887, 100073, 82587, 3837, 100136, 53153, 99250, 16, 15, 15, 63431, 20755, 57191, 102704, 118294, 29524, 3256, 5373, 8590, 5373, 61228, 1773, 103283, 21894, 101047, 9852, 2078, 20412, 17, 20, 15, 15, 15, 16, 3837, 104544, 20412, 23, 24156, 82587, 3837, 101137, 101882, 1773, 104326, 20412, 9852, 675, 3837, 99817, 104583, 17, 20, 114418, 15, 16, 3837, 114815, 1773, 376, 67, 16384, 20412, 108532, 3837, 88991, 1773, 6045, 20412, 9, 16, 15, 15, 15, 31207, 3837, 99817, 85106, 101071, 80094, 64471, 58362, 14880, 19793, 1773, 80094, 24562, 18830, 9, 17992, 3837, 99999, 6045, 27234, 12135, 29635, 17714, 1866, 1773, 7698, 20412, 18, 13, 21, 69982, 77288, 60533, 64471, 85106, 14880, 19793, 3837, 52129, 27369, 15946, 80443, 104496, 14880, 19793, 3837, 99999, 7698, 27234, 12135, 29635, 17714, 3849, 1773, 101948, 3837, 80094, 64471, 58362, 14880, 19793, 9370, 76095, 20412, 39165, 80094, 24562, 18830, 9, 17992, 57191, 102298, 2073, 30440, 96422, 50292, 854, 49567, 105291, 3837, 99817, 102068, 18830, 9, 17992, 3837, 99999, 43918, 17714, 1866, 1773, 102299, 24562, 80443, 9, 17992, 3837, 77288, 87267, 85106, 101071, 107189, 14880, 19793, 105291, 3837, 99817, 80443, 3837, 99999, 7698, 27234, 12135, 29635, 17714, 3849, 1773, 100161, 3837, 55338, 44931, 71268, 88991, 107439, 3837, 80443, 115916, 109502, 66394, 3837, 103944, 5370, 64429, 91680, 102298, 105146, 9370, 44931, 8997, 151668, 271, 515, 220, 330, 9852, 2078, 788, 330, 17, 20, 15, 15, 15, 16, 756, 220, 330, 9852, 675, 788, 330, 17, 20, 114418, 15, 16, 756, 220, 330, 376, 67, 16384, 788, 330, 108532, 756, 220, 330, 6045, 788, 220, 16, 15, 15, 15, 15, 15, 15, 345, 220, 330, 7698, 788, 220, 18, 13, 21, 345, 220, 330, 6045, 27234, 12135, 788, 830, 345, 220, 330, 7698, 27234, 12135, 788, 895, 198, 92], "total_duration": 17974196172, "load_duration": 2522143722, "prompt_eval_count": 269, "prompt_eval_duration": 4077983091, "eval_count": 421, "eval_duration": 11371534015}
2025-06-10 03:16:26,096 - __main__ - INFO - Validating Ollama response: {"model": "qwen3:0.6b", "created_at": "2025-06-09T19:16:26.089038Z", "response": "<think>\n好的，我现在需要处理用户提供的债券交易文本，并将其解析为JSON格式，特别注意标有*号的金额和利率，以及金额和利率是否需请示的字段。首先，我需要仔细阅读用户提供的文本，并识别出所有需要提取的字段。\n\n用户给出的文本是：“250001.IB 25国债01 买入 *1000万 3.6% 景益货币、景顺货币”。我需要逐个字段检查，确保不包含其他文字说明，并正确处理特殊字符。\n\n首先，assetCode的字段需要符合四个数字及以上纯数字，且不能被100整除或含有关键字如IB、SH、SZ。原文本中的assetCode是250001，看起来是8位数字，符合要求。接下来是assetName，这里应该是25国债01，没问题。trdSide是买入，正确。amount是*1000万，这里需要检查金额是否需请示。金额前有*号，所以amountReqFlag设为true。rate是3.6%，但注意是否需要请示，原信息中没有提到请示，所以rateReqFlag设为false。另外，金额是否需请示的条件是当金额前有*号或包含“可议价”等关键词，这里确实有*号，所以设置为true。利率前没有*号，但可能需要检查是否有请示关键词，这里没有，所以rateReqFlag设为false。最后，所有字段都正确提取，没有多余的文字说明，确保JSON对象只包含指定的字段。\n</think>\n\n{\n  \"assetCode\": \"250001\",\n  \"assetName\": \"25国债01\",\n  \"trdSide\": \"买入\",\n  \"amount\": 1000000,\n  \"rate\": 3.6,\n  \"amountReqFlag\": true,\n  \"rateReqFlag\": false\n}", "done": true, "done_reason": "stop", "context": [151644, 872, 198, 14880, 44063, 87752, 104976, 99886, 108704, 106637, 17714, 5370, 68805, 3837, 100654, 60533, 30844, 18830, 9, 17992, 9370, 80094, 33108, 102299, 85106, 14880, 19793, 3837, 91680, 31526, 5370, 64429, 3837, 100148, 102298, 92894, 87335, 66394, 28311, 17, 20, 15, 15, 15, 16, 2447, 33, 220, 17, 20, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 220, 18, 13, 21, 4, 220, 6567, 247, 107, 99419, 101406, 5373, 85254, 99683, 101406, 271, 85106, 107439, 9370, 44931, 28311, 12, 9329, 2078, 25, 4891, 222, 118, 100054, 46100, 17714, 102704, 220, 19, 220, 24156, 82587, 109887, 100073, 82587, 16530, 100630, 9909, 30709, 8863, 27442, 3837, 20929, 17992, 49567, 108112, 101167, 48391, 7552, 100136, 53153, 99250, 16, 15, 15, 63431, 20755, 100631, 102704, 48888, 14777, 118294, 29465, 3256, 17515, 8590, 17515, 61228, 49567, 3837, 75882, 118294, 100143, 85767, 8, 59217, 12, 9329, 675, 25, 4891, 222, 118, 100054, 29991, 198, 12, 489, 67, 16384, 25, 220, 99886, 100696, 9909, 108532, 14, 109430, 23083, 12, 3311, 25, 220, 99886, 80094, 9909, 82587, 23083, 12, 4379, 25, 19468, 102, 95355, 9909, 82587, 23083, 12, 3311, 27234, 12135, 25, 220, 80094, 64471, 58362, 14880, 19793, 9909, 117661, 25511, 3837, 39165, 80094, 24562, 18830, 9, 17992, 57191, 102298, 1, 30440, 96422, 50292, 1, 5373, 1, 97480, 30440, 96422, 1, 49567, 105291, 13343, 17714, 1866, 23083, 12, 4379, 27234, 12135, 25, 19468, 102, 95355, 64471, 58362, 14880, 19793, 9909, 117661, 25511, 3837, 39165, 102299, 24562, 18830, 9, 17992, 57191, 102298, 1, 30440, 96422, 50292, 1, 5373, 1, 97480, 30440, 96422, 1, 49567, 105291, 13343, 17714, 1866, 27866, 151645, 198, 151644, 77091, 198, 151667, 198, 99692, 3837, 107520, 85106, 54542, 20002, 103008, 104976, 99886, 108704, 90395, 105278, 106637, 17714, 5370, 68805, 3837, 100654, 60533, 30844, 18830, 9, 17992, 9370, 80094, 33108, 102299, 3837, 101034, 80094, 33108, 102299, 64471, 58362, 14880, 19793, 9370, 44931, 1773, 101140, 3837, 35946, 85106, 104857, 101113, 20002, 103008, 108704, 90395, 102450, 20221, 55338, 85106, 107439, 9370, 44931, 3407, 20002, 107485, 9370, 108704, 20412, 36987, 17, 20, 15, 15, 15, 16, 2447, 33, 220, 17, 20, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 220, 18, 13, 21, 4, 6567, 247, 107, 99419, 101406, 5373, 85254, 99683, 101406, 55807, 35946, 85106, 100062, 18947, 44931, 101071, 3837, 103944, 16530, 102298, 92894, 87335, 66394, 90395, 88991, 54542, 101167, 48391, 3407, 101140, 3837, 9852, 2078, 9370, 44931, 85106, 101137, 100802, 82587, 109887, 100073, 82587, 3837, 100136, 53153, 99250, 16, 15, 15, 63431, 20755, 57191, 102704, 118294, 29524, 3256, 5373, 8590, 5373, 61228, 1773, 103283, 21894, 101047, 9852, 2078, 20412, 17, 20, 15, 15, 15, 16, 3837, 104544, 20412, 23, 24156, 82587, 3837, 101137, 101882, 1773, 104326, 20412, 9852, 675, 3837, 99817, 104583, 17, 20, 114418, 15, 16, 3837, 114815, 1773, 376, 67, 16384, 20412, 108532, 3837, 88991, 1773, 6045, 20412, 9, 16, 15, 15, 15, 31207, 3837, 99817, 85106, 101071, 80094, 64471, 58362, 14880, 19793, 1773, 80094, 24562, 18830, 9, 17992, 3837, 99999, 6045, 27234, 12135, 29635, 17714, 1866, 1773, 7698, 20412, 18, 13, 21, 69982, 77288, 60533, 64471, 85106, 14880, 19793, 3837, 52129, 27369, 15946, 80443, 104496, 14880, 19793, 3837, 99999, 7698, 27234, 12135, 29635, 17714, 3849, 1773, 101948, 3837, 80094, 64471, 58362, 14880, 19793, 9370, 76095, 20412, 39165, 80094, 24562, 18830, 9, 17992, 57191, 102298, 2073, 30440, 96422, 50292, 854, 49567, 105291, 3837, 99817, 102068, 18830, 9, 17992, 3837, 99999, 43918, 17714, 1866, 1773, 102299, 24562, 80443, 9, 17992, 3837, 77288, 87267, 85106, 101071, 107189, 14880, 19793, 105291, 3837, 99817, 80443, 3837, 99999, 7698, 27234, 12135, 29635, 17714, 3849, 1773, 100161, 3837, 55338, 44931, 71268, 88991, 107439, 3837, 80443, 115916, 109502, 66394, 3837, 103944, 5370, 64429, 91680, 102298, 105146, 9370, 44931, 8997, 151668, 271, 515, 220, 330, 9852, 2078, 788, 330, 17, 20, 15, 15, 15, 16, 756, 220, 330, 9852, 675, 788, 330, 17, 20, 114418, 15, 16, 756, 220, 330, 376, 67, 16384, 788, 330, 108532, 756, 220, 330, 6045, 788, 220, 16, 15, 15, 15, 15, 15, 15, 345, 220, 330, 7698, 788, 220, 18, 13, 21, 345, 220, 330, 6045, 27234, 12135, 788, 830, 345, 220, 330, 7698, 27234, 12135, 788, 895, 198, 92], "total_duration": 17974196172, "load_duration": 2522143722, "prompt_eval_count": 269, "prompt_eval_duration": 4077983091, "eval_count": 421, "eval_duration": 11371534015}
2025-06-10 03:16:26,096 - __main__ - INFO - Raw model response: <think>
好的，我现在需要处理用户提供的债券交易文本，并将其解析为JSON格式，特别注意标有*号的金额和利率，以及金额和利率是否需请示的字段。首先，我需要仔细阅读用户提供的文本，并识别出所有需要提取的字段。

用户给出的文本是：“250001.IB 25国债01 买入 *1000万 3.6% 景益货币、景顺货币”。我需要逐个字段检查，确保不包含其他文字说明，并正确处理特殊字符。

首先，assetCode的字段需要符合四个数字及以上纯数字，且不能被100整除或含有关键字如IB、SH、SZ。原文本中的assetCode是250001，看起来是8位数字，符合要求。接下来是assetName，这里应该是25国债01，没问题。trdSide是买入，正确。amount是*1000万，这里需要检查金额是否需请示。金额前有*号，所以amountReqFlag设为true。rate是3.6%，但注意是否需要请示，原信息中没有提到请示，所以rateReqFlag设为false。另外，金额是否需请示的条件是当金额前有*号或包含“可议价”等关键词，这里确实有*号，所以设置为true。利率前没有*号，但可能需要检查是否有请示关键词，这里没有，所以rateReqFlag设为false。最后，所有字段都正确提取，没有多余的文字说明，确保JSON对象只包含指定的字段。
</think>

{
  "assetCode": "250001",
  "assetName": "25国债01",
  "trdSide": "买入",
  "amount": 1000000,
  "rate": 3.6,
  "amountReqFlag": true,
  "rateReqFlag": false
}
2025-06-10 03:16:26,096 - __main__ - ERROR - JSON decode error: Expecting value: line 1 column 1 (char 0)
2025-06-10 03:16:26,097 - __main__ - INFO - Extracted JSON string: {
  "assetCode": "250001",
  "assetName": "25国债01",
  "trdSide": "买入",
  "amount": 1000000,
  "rate": 3.6,
  "amountReqFlag": true,
  "rateReqFlag": false
}
2025-06-10 03:16:26,097 - __main__ - INFO - Normalizing parsed data: {'assetCode': '250001', 'assetName': '25国债01', 'trdSide': '买入', 'amount': 1000000, 'rate': 3.6, 'amountReqFlag': True, 'rateReqFlag': False}
2025-06-10 03:16:26,097 - __main__ - INFO - Normalized data: {'assetCode': '250001', 'assetName': '25国债01', 'trdSide': '买入', 'amount': 1000000.0, 'rate': 3.6, 'amountReqFlag': True, 'rateReqFlag': False, 'fundName': []}
2025-06-10 03:16:26,097 - __main__ - INFO - Successfully parsed bond data: {'assetCode': '250001', 'assetName': '25国债01', 'trdSide': '买入', 'amount': 1000000.0, 'rate': 3.6, 'amountReqFlag': True, 'rateReqFlag': False, 'fundName': []}
2025-06-10 03:16:26,097 - __main__ - INFO - Successfully completed smart parsing with AI analysis
2025-06-10 03:24:39,297 - __main__ - INFO - Starting bond text parsing service...
2025-06-10 03:25:18,054 - __main__ - INFO - Received smart parse request: 250001.IB 25国债01 买入 *1000万 3.6%  景益货币、景顺货币, context: 
2025-06-10 03:25:18,060 - __main__ - INFO - AI recommended prompt type: 多产品指令语料解析
2025-06-10 03:25:18,060 - __main__ - INFO - AI reasoning: 基于以下特征选择了'多产品指令语料解析'模板：包含*号=True, 多基金名称=True, 是问题=False, 基金数量=3, 检测到的基金=['景益货币、景顺货币', '景益货币、', '景顺货币']
2025-06-10 03:25:18,060 - __main__ - INFO - Calling Ollama model with text: 250001.IB 25国债01 买入 *1000万 3.6%  景益货币、景顺货币, prompt_type: 多产品指令语料解析
2025-06-10 03:25:18,078 - __main__ - INFO - Ollama service is available
2025-06-10 03:25:18,083 - __main__ - INFO - Available models: {"models": [{"name": "qwen3:0.6b", "model": "qwen3:0.6b", "modified_at": "2025-05-08T01:27:52.753829715+08:00", "size": 522653526, "digest": "3bae9c93586b27bedaa979979733c2b0edd1d0defc745e9638f2161192a0ccf0", "details": {"parent_model": "", "format": "gguf", "family": "qwen3", "families": ["qwen3"], "parameter_size": "751.63M", "quantization_level": "Q4_K_M"}}]}
2025-06-10 03:25:18,083 - __main__ - INFO - Sending request to Ollama: {"model": "qwen3:0.6b", "prompt": "请将以下包含多个债券产品的交易文本解析为JSON数组格式，每个产品对应一个JSON对象，只返回JSON数组，不要包含其他文字说明：\n250001.IB 25国债01 买入 *1000万 3.6%  景益货币、景顺货币\n\n每个产品需要提取的字段：\n- assetCode: 债券代码为含有 4 位数字及以上纯数字不包括（小数点，加号等任意特殊字符）且不能被100整除或者含有任一关键字 (.IB,.SH,.SZ等，该关键字支持配置)；\n- assetName: 债券名称\n- trdSide: 交易方向（买入/卖出）\n- amount: 交易金额（数字）\n- rate: 利率（数字）\n- amountReqFlag: 金额是否需请示（布尔值，当金额前有*号时为true）\n- rateReqFlag: 利率是否需请示（布尔值，当利率前有*号时为true）\n- fundName: 基金名称,这是个list,需要提取出基金名称,可能包含多个基金名称\n\n", "stream": false}
2025-06-10 03:25:38,859 - __main__ - INFO - Received response from Ollama: {"model": "qwen3:0.6b", "created_at": "2025-06-09T19:25:38.850752Z", "response": "<think>\n好的，我现在需要处理用户的请求，将包含多个债券产品的交易文本解析为JSON数组格式。用户的要求很明确，每个产品对应一个JSON对象，结构要包括assetCode、assetName、trdSide等字段，且只能返回JSON数组，不能有其他文字说明。\n\n首先，我需要仔细阅读用户提供的文本，确保正确提取每个产品的信息。用户给出的文本是：“250001.IB 25国债01 买入 *1000万 3.6% 景益货币、景顺货币”。这里有几个需要注意的地方：每个产品需要提取的字段包括assetCode、assetName、trdSide、amount、rate、amountReqFlag、rateReqFlag、fundName。\n\n首先，assetCode。用户提到需要的是4位数字及以上纯数字，且不包含小数点、加号等特殊字符。这里看到的是“250001.IB”，看起来有10位数字，符合要求。但需要确认是否有其他关键字如IB、SH、SZ，但用户说这些关键字支持配置，所以可能不需要排除。因此，assetCode应该是“250001.IB”。\n\n接下来是assetName，这里应该是“25国债01”，没有问题，只包含数字。\n\ntrdSide是买入，所以填“买入”。\n\namount是*1000万，这里金额需要转换为数字，所以应该是1000万，即1000000。金额是否需请示的flag是true，因为有*号，所以amountReqFlag设为true。\n\nrate是3.6%，需要转换为数字，所以rate是3.6。\n\namountReqFlag和rateReqFlag都是布尔值，这里已经确认是true，所以填true。\n\n然后是fundName，这里有两个基金名称：“景益货币”和“景顺货币”，所以需要提取这两个，并作为fundName的列表。用户可能希望每个基金名称单独列出，所以这里需要将两个添加到数组中。\n\n现在检查是否有遗漏或错误。所有字段都正确提取了，没有多余的文字说明。确认每个产品对应一个JSON对象，结构正确，没有多余的字段。最后，确保输出是JSON数组，没有其他说明。这样应该满足用户的需求。\n</think>\n\n[\n  {\n    \"assetCode\": \"250001.IB\",\n    \"assetName\": \"25国债01\",\n    \"trdSide\": \"买入\",\n    \"amount\": 1000000,\n    \"rate\": 3.6,\n    \"amountReqFlag\": true,\n    \"rateReqFlag\": true,\n    \"fundName\": [\"景益货币\", \"景顺货币\"]\n  }\n]", "done": true, "done_reason": "stop", "context": [151644, 872, 198, 14880, 44063, 87752, 102298, 101213, 104976, 104703, 99886, 108704, 106637, 17714, 5370, 69824, 68805, 3837, 103991, 82700, 103124, 46944, 5370, 64429, 3837, 91680, 31526, 5370, 69824, 3837, 100148, 102298, 92894, 87335, 66394, 28311, 17, 20, 15, 15, 15, 16, 2447, 33, 220, 17, 20, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 220, 18, 13, 21, 4, 220, 6567, 247, 107, 99419, 101406, 5373, 85254, 99683, 101406, 271, 103991, 82700, 85106, 107439, 9370, 44931, 28311, 12, 9329, 2078, 25, 4891, 222, 118, 100054, 46100, 17714, 102704, 220, 19, 220, 24156, 82587, 109887, 100073, 82587, 16530, 100630, 9909, 30709, 8863, 27442, 3837, 20929, 17992, 49567, 108112, 101167, 48391, 7552, 100136, 53153, 99250, 16, 15, 15, 63431, 20755, 100631, 102704, 48888, 14777, 118294, 29465, 3256, 17515, 8590, 17515, 61228, 49567, 3837, 75882, 118294, 100143, 85767, 8, 59217, 12, 9329, 675, 25, 4891, 222, 118, 100054, 29991, 198, 12, 489, 67, 16384, 25, 220, 99886, 100696, 9909, 108532, 14, 109430, 23083, 12, 3311, 25, 220, 99886, 80094, 9909, 82587, 23083, 12, 4379, 25, 19468, 102, 95355, 9909, 82587, 23083, 12, 3311, 27234, 12135, 25, 220, 80094, 64471, 58362, 14880, 19793, 9909, 117661, 25511, 3837, 39165, 80094, 24562, 18830, 9, 17992, 13343, 17714, 1866, 23083, 12, 4379, 27234, 12135, 25, 19468, 102, 95355, 64471, 58362, 14880, 19793, 9909, 117661, 25511, 3837, 39165, 102299, 24562, 18830, 9, 17992, 13343, 17714, 1866, 23083, 12, 3802, 675, 25, 4891, 253, 118, 34230, 29991, 11, 100346, 18947, 1607, 11, 85106, 107439, 20221, 100025, 29991, 11, 87267, 102298, 101213, 100025, 29991, 271, 151645, 198, 151644, 77091, 198, 151667, 198, 99692, 3837, 107520, 85106, 54542, 107494, 34859, 3837, 44063, 102298, 101213, 104976, 104703, 99886, 108704, 106637, 17714, 5370, 69824, 68805, 1773, 20002, 104272, 99165, 100692, 3837, 103991, 82700, 103124, 46944, 5370, 64429, 3837, 100166, 30534, 100630, 9852, 2078, 5373, 9852, 675, 5373, 376, 67, 16384, 49567, 44931, 3837, 100136, 101097, 31526, 5370, 69824, 3837, 53153, 18830, 92894, 87335, 66394, 3407, 101140, 3837, 35946, 85106, 104857, 101113, 20002, 103008, 108704, 3837, 103944, 88991, 107439, 103991, 104703, 27369, 1773, 20002, 107485, 9370, 108704, 20412, 36987, 17, 20, 15, 15, 15, 16, 2447, 33, 220, 17, 20, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 220, 18, 13, 21, 4, 6567, 247, 107, 99419, 101406, 5373, 85254, 99683, 101406, 55807, 99817, 112485, 107916, 103958, 5122, 103991, 82700, 85106, 107439, 9370, 44931, 100630, 9852, 2078, 5373, 9852, 675, 5373, 376, 67, 16384, 5373, 6045, 5373, 7698, 5373, 6045, 27234, 12135, 5373, 7698, 27234, 12135, 5373, 57603, 675, 3407, 101140, 3837, 9852, 2078, 1773, 20002, 104496, 85106, 100146, 19, 24156, 82587, 109887, 100073, 82587, 3837, 100136, 16530, 102298, 30709, 8863, 27442, 5373, 20929, 17992, 49567, 101167, 48391, 1773, 99817, 101038, 100146, 2073, 17, 20, 15, 15, 15, 16, 2447, 33, 33590, 104544, 18830, 16, 15, 24156, 82587, 3837, 101137, 101882, 1773, 77288, 85106, 81167, 107189, 92894, 118294, 29524, 3256, 5373, 8590, 5373, 61228, 3837, 77288, 20002, 36587, 100001, 118294, 100143, 85767, 3837, 99999, 87267, 104689, 102945, 1773, 101886, 3837, 9852, 2078, 104583, 2073, 17, 20, 15, 15, 15, 16, 2447, 33, 96332, 104326, 20412, 9852, 675, 3837, 99817, 104583, 2073, 17, 20, 114418, 15, 16, 33590, 80443, 86119, 3837, 91680, 102298, 82587, 3407, 376, 67, 16384, 20412, 108532, 3837, 99999, 68756, 2073, 108532, 96332, 6045, 20412, 9, 16, 15, 15, 15, 31207, 3837, 99817, 80094, 85106, 105359, 17714, 82587, 3837, 99999, 104583, 16, 15, 15, 15, 31207, 3837, 91676, 16, 15, 15, 15, 15, 15, 15, 1773, 80094, 64471, 58362, 14880, 19793, 9370, 9903, 20412, 1866, 3837, 99519, 18830, 9, 17992, 3837, 99999, 6045, 27234, 12135, 29635, 17714, 1866, 3407, 7698, 20412, 18, 13, 21, 69982, 85106, 105359, 17714, 82587, 3837, 99999, 7698, 20412, 18, 13, 21, 3407, 6045, 27234, 12135, 33108, 7698, 27234, 12135, 100132, 117661, 25511, 3837, 99817, 99461, 81167, 20412, 1866, 3837, 99999, 68756, 1866, 3407, 101889, 20412, 57603, 675, 3837, 99817, 108534, 100025, 29991, 36987, 85254, 99419, 101406, 854, 33108, 2073, 85254, 99683, 101406, 33590, 99999, 85106, 107439, 105932, 90395, 100622, 57603, 675, 9370, 44177, 1773, 20002, 87267, 99880, 103991, 100025, 29991, 105818, 114116, 3837, 99999, 99817, 85106, 44063, 100369, 42855, 26939, 69824, 15946, 3407, 99601, 101071, 107189, 114078, 57191, 32100, 1773, 55338, 44931, 71268, 88991, 107439, 34187, 3837, 80443, 115916, 109502, 66394, 1773, 81167, 103991, 82700, 103124, 46944, 5370, 64429, 3837, 100166, 88991, 3837, 80443, 115917, 44931, 1773, 100161, 3837, 103944, 66017, 20412, 5370, 69824, 3837, 80443, 92894, 66394, 1773, 99654, 99730, 101929, 20002, 104378, 8997, 151668, 271, 9640, 220, 341, 262, 330, 9852, 2078, 788, 330, 17, 20, 15, 15, 15, 16, 2447, 33, 756, 262, 330, 9852, 675, 788, 330, 17, 20, 114418, 15, 16, 756, 262, 330, 376, 67, 16384, 788, 330, 108532, 756, 262, 330, 6045, 788, 220, 16, 15, 15, 15, 15, 15, 15, 345, 262, 330, 7698, 788, 220, 18, 13, 21, 345, 262, 330, 6045, 27234, 12135, 788, 830, 345, 262, 330, 7698, 27234, 12135, 788, 830, 345, 262, 330, 57603, 675, 788, 4383, 85254, 99419, 101406, 497, 330, 85254, 99683, 101406, 7026, 220, 456, 60], "total_duration": 20764217022, "load_duration": 2645473682, "prompt_eval_count": 264, "prompt_eval_duration": 2436885961, "eval_count": 579, "eval_duration": 15679695979}
2025-06-10 03:25:38,859 - __main__ - INFO - Validating Ollama response: {"model": "qwen3:0.6b", "created_at": "2025-06-09T19:25:38.850752Z", "response": "<think>\n好的，我现在需要处理用户的请求，将包含多个债券产品的交易文本解析为JSON数组格式。用户的要求很明确，每个产品对应一个JSON对象，结构要包括assetCode、assetName、trdSide等字段，且只能返回JSON数组，不能有其他文字说明。\n\n首先，我需要仔细阅读用户提供的文本，确保正确提取每个产品的信息。用户给出的文本是：“250001.IB 25国债01 买入 *1000万 3.6% 景益货币、景顺货币”。这里有几个需要注意的地方：每个产品需要提取的字段包括assetCode、assetName、trdSide、amount、rate、amountReqFlag、rateReqFlag、fundName。\n\n首先，assetCode。用户提到需要的是4位数字及以上纯数字，且不包含小数点、加号等特殊字符。这里看到的是“250001.IB”，看起来有10位数字，符合要求。但需要确认是否有其他关键字如IB、SH、SZ，但用户说这些关键字支持配置，所以可能不需要排除。因此，assetCode应该是“250001.IB”。\n\n接下来是assetName，这里应该是“25国债01”，没有问题，只包含数字。\n\ntrdSide是买入，所以填“买入”。\n\namount是*1000万，这里金额需要转换为数字，所以应该是1000万，即1000000。金额是否需请示的flag是true，因为有*号，所以amountReqFlag设为true。\n\nrate是3.6%，需要转换为数字，所以rate是3.6。\n\namountReqFlag和rateReqFlag都是布尔值，这里已经确认是true，所以填true。\n\n然后是fundName，这里有两个基金名称：“景益货币”和“景顺货币”，所以需要提取这两个，并作为fundName的列表。用户可能希望每个基金名称单独列出，所以这里需要将两个添加到数组中。\n\n现在检查是否有遗漏或错误。所有字段都正确提取了，没有多余的文字说明。确认每个产品对应一个JSON对象，结构正确，没有多余的字段。最后，确保输出是JSON数组，没有其他说明。这样应该满足用户的需求。\n</think>\n\n[\n  {\n    \"assetCode\": \"250001.IB\",\n    \"assetName\": \"25国债01\",\n    \"trdSide\": \"买入\",\n    \"amount\": 1000000,\n    \"rate\": 3.6,\n    \"amountReqFlag\": true,\n    \"rateReqFlag\": true,\n    \"fundName\": [\"景益货币\", \"景顺货币\"]\n  }\n]", "done": true, "done_reason": "stop", "context": [151644, 872, 198, 14880, 44063, 87752, 102298, 101213, 104976, 104703, 99886, 108704, 106637, 17714, 5370, 69824, 68805, 3837, 103991, 82700, 103124, 46944, 5370, 64429, 3837, 91680, 31526, 5370, 69824, 3837, 100148, 102298, 92894, 87335, 66394, 28311, 17, 20, 15, 15, 15, 16, 2447, 33, 220, 17, 20, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 220, 18, 13, 21, 4, 220, 6567, 247, 107, 99419, 101406, 5373, 85254, 99683, 101406, 271, 103991, 82700, 85106, 107439, 9370, 44931, 28311, 12, 9329, 2078, 25, 4891, 222, 118, 100054, 46100, 17714, 102704, 220, 19, 220, 24156, 82587, 109887, 100073, 82587, 16530, 100630, 9909, 30709, 8863, 27442, 3837, 20929, 17992, 49567, 108112, 101167, 48391, 7552, 100136, 53153, 99250, 16, 15, 15, 63431, 20755, 100631, 102704, 48888, 14777, 118294, 29465, 3256, 17515, 8590, 17515, 61228, 49567, 3837, 75882, 118294, 100143, 85767, 8, 59217, 12, 9329, 675, 25, 4891, 222, 118, 100054, 29991, 198, 12, 489, 67, 16384, 25, 220, 99886, 100696, 9909, 108532, 14, 109430, 23083, 12, 3311, 25, 220, 99886, 80094, 9909, 82587, 23083, 12, 4379, 25, 19468, 102, 95355, 9909, 82587, 23083, 12, 3311, 27234, 12135, 25, 220, 80094, 64471, 58362, 14880, 19793, 9909, 117661, 25511, 3837, 39165, 80094, 24562, 18830, 9, 17992, 13343, 17714, 1866, 23083, 12, 4379, 27234, 12135, 25, 19468, 102, 95355, 64471, 58362, 14880, 19793, 9909, 117661, 25511, 3837, 39165, 102299, 24562, 18830, 9, 17992, 13343, 17714, 1866, 23083, 12, 3802, 675, 25, 4891, 253, 118, 34230, 29991, 11, 100346, 18947, 1607, 11, 85106, 107439, 20221, 100025, 29991, 11, 87267, 102298, 101213, 100025, 29991, 271, 151645, 198, 151644, 77091, 198, 151667, 198, 99692, 3837, 107520, 85106, 54542, 107494, 34859, 3837, 44063, 102298, 101213, 104976, 104703, 99886, 108704, 106637, 17714, 5370, 69824, 68805, 1773, 20002, 104272, 99165, 100692, 3837, 103991, 82700, 103124, 46944, 5370, 64429, 3837, 100166, 30534, 100630, 9852, 2078, 5373, 9852, 675, 5373, 376, 67, 16384, 49567, 44931, 3837, 100136, 101097, 31526, 5370, 69824, 3837, 53153, 18830, 92894, 87335, 66394, 3407, 101140, 3837, 35946, 85106, 104857, 101113, 20002, 103008, 108704, 3837, 103944, 88991, 107439, 103991, 104703, 27369, 1773, 20002, 107485, 9370, 108704, 20412, 36987, 17, 20, 15, 15, 15, 16, 2447, 33, 220, 17, 20, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 220, 18, 13, 21, 4, 6567, 247, 107, 99419, 101406, 5373, 85254, 99683, 101406, 55807, 99817, 112485, 107916, 103958, 5122, 103991, 82700, 85106, 107439, 9370, 44931, 100630, 9852, 2078, 5373, 9852, 675, 5373, 376, 67, 16384, 5373, 6045, 5373, 7698, 5373, 6045, 27234, 12135, 5373, 7698, 27234, 12135, 5373, 57603, 675, 3407, 101140, 3837, 9852, 2078, 1773, 20002, 104496, 85106, 100146, 19, 24156, 82587, 109887, 100073, 82587, 3837, 100136, 16530, 102298, 30709, 8863, 27442, 5373, 20929, 17992, 49567, 101167, 48391, 1773, 99817, 101038, 100146, 2073, 17, 20, 15, 15, 15, 16, 2447, 33, 33590, 104544, 18830, 16, 15, 24156, 82587, 3837, 101137, 101882, 1773, 77288, 85106, 81167, 107189, 92894, 118294, 29524, 3256, 5373, 8590, 5373, 61228, 3837, 77288, 20002, 36587, 100001, 118294, 100143, 85767, 3837, 99999, 87267, 104689, 102945, 1773, 101886, 3837, 9852, 2078, 104583, 2073, 17, 20, 15, 15, 15, 16, 2447, 33, 96332, 104326, 20412, 9852, 675, 3837, 99817, 104583, 2073, 17, 20, 114418, 15, 16, 33590, 80443, 86119, 3837, 91680, 102298, 82587, 3407, 376, 67, 16384, 20412, 108532, 3837, 99999, 68756, 2073, 108532, 96332, 6045, 20412, 9, 16, 15, 15, 15, 31207, 3837, 99817, 80094, 85106, 105359, 17714, 82587, 3837, 99999, 104583, 16, 15, 15, 15, 31207, 3837, 91676, 16, 15, 15, 15, 15, 15, 15, 1773, 80094, 64471, 58362, 14880, 19793, 9370, 9903, 20412, 1866, 3837, 99519, 18830, 9, 17992, 3837, 99999, 6045, 27234, 12135, 29635, 17714, 1866, 3407, 7698, 20412, 18, 13, 21, 69982, 85106, 105359, 17714, 82587, 3837, 99999, 7698, 20412, 18, 13, 21, 3407, 6045, 27234, 12135, 33108, 7698, 27234, 12135, 100132, 117661, 25511, 3837, 99817, 99461, 81167, 20412, 1866, 3837, 99999, 68756, 1866, 3407, 101889, 20412, 57603, 675, 3837, 99817, 108534, 100025, 29991, 36987, 85254, 99419, 101406, 854, 33108, 2073, 85254, 99683, 101406, 33590, 99999, 85106, 107439, 105932, 90395, 100622, 57603, 675, 9370, 44177, 1773, 20002, 87267, 99880, 103991, 100025, 29991, 105818, 114116, 3837, 99999, 99817, 85106, 44063, 100369, 42855, 26939, 69824, 15946, 3407, 99601, 101071, 107189, 114078, 57191, 32100, 1773, 55338, 44931, 71268, 88991, 107439, 34187, 3837, 80443, 115916, 109502, 66394, 1773, 81167, 103991, 82700, 103124, 46944, 5370, 64429, 3837, 100166, 88991, 3837, 80443, 115917, 44931, 1773, 100161, 3837, 103944, 66017, 20412, 5370, 69824, 3837, 80443, 92894, 66394, 1773, 99654, 99730, 101929, 20002, 104378, 8997, 151668, 271, 9640, 220, 341, 262, 330, 9852, 2078, 788, 330, 17, 20, 15, 15, 15, 16, 2447, 33, 756, 262, 330, 9852, 675, 788, 330, 17, 20, 114418, 15, 16, 756, 262, 330, 376, 67, 16384, 788, 330, 108532, 756, 262, 330, 6045, 788, 220, 16, 15, 15, 15, 15, 15, 15, 345, 262, 330, 7698, 788, 220, 18, 13, 21, 345, 262, 330, 6045, 27234, 12135, 788, 830, 345, 262, 330, 7698, 27234, 12135, 788, 830, 345, 262, 330, 57603, 675, 788, 4383, 85254, 99419, 101406, 497, 330, 85254, 99683, 101406, 7026, 220, 456, 60], "total_duration": 20764217022, "load_duration": 2645473682, "prompt_eval_count": 264, "prompt_eval_duration": 2436885961, "eval_count": 579, "eval_duration": 15679695979}
2025-06-10 03:25:38,859 - __main__ - INFO - Raw model response: <think>
好的，我现在需要处理用户的请求，将包含多个债券产品的交易文本解析为JSON数组格式。用户的要求很明确，每个产品对应一个JSON对象，结构要包括assetCode、assetName、trdSide等字段，且只能返回JSON数组，不能有其他文字说明。

首先，我需要仔细阅读用户提供的文本，确保正确提取每个产品的信息。用户给出的文本是：“250001.IB 25国债01 买入 *1000万 3.6% 景益货币、景顺货币”。这里有几个需要注意的地方：每个产品需要提取的字段包括assetCode、assetName、trdSide、amount、rate、amountReqFlag、rateReqFlag、fundName。

首先，assetCode。用户提到需要的是4位数字及以上纯数字，且不包含小数点、加号等特殊字符。这里看到的是“250001.IB”，看起来有10位数字，符合要求。但需要确认是否有其他关键字如IB、SH、SZ，但用户说这些关键字支持配置，所以可能不需要排除。因此，assetCode应该是“250001.IB”。

接下来是assetName，这里应该是“25国债01”，没有问题，只包含数字。

trdSide是买入，所以填“买入”。

amount是*1000万，这里金额需要转换为数字，所以应该是1000万，即1000000。金额是否需请示的flag是true，因为有*号，所以amountReqFlag设为true。

rate是3.6%，需要转换为数字，所以rate是3.6。

amountReqFlag和rateReqFlag都是布尔值，这里已经确认是true，所以填true。

然后是fundName，这里有两个基金名称：“景益货币”和“景顺货币”，所以需要提取这两个，并作为fundName的列表。用户可能希望每个基金名称单独列出，所以这里需要将两个添加到数组中。

现在检查是否有遗漏或错误。所有字段都正确提取了，没有多余的文字说明。确认每个产品对应一个JSON对象，结构正确，没有多余的字段。最后，确保输出是JSON数组，没有其他说明。这样应该满足用户的需求。
</think>

[
  {
    "assetCode": "250001.IB",
    "assetName": "25国债01",
    "trdSide": "买入",
    "amount": 1000000,
    "rate": 3.6,
    "amountReqFlag": true,
    "rateReqFlag": true,
    "fundName": ["景益货币", "景顺货币"]
  }
]
2025-06-10 03:25:38,859 - __main__ - ERROR - JSON decode error: Expecting value: line 1 column 1 (char 0)
2025-06-10 03:25:38,860 - __main__ - INFO - Extracted JSON string: {
    "assetCode": "250001.IB",
    "assetName": "25国债01",
    "trdSide": "买入",
    "amount": 1000000,
    "rate": 3.6,
    "amountReqFlag": true,
    "rateReqFlag": true,
    "fundName": ["景益货币", "景顺货币"]
  }
2025-06-10 03:25:38,860 - __main__ - INFO - Normalizing parsed data: {'assetCode': '250001.IB', 'assetName': '25国债01', 'trdSide': '买入', 'amount': 1000000, 'rate': 3.6, 'amountReqFlag': True, 'rateReqFlag': True, 'fundName': ['景益货币', '景顺货币']}
2025-06-10 03:25:38,860 - __main__ - INFO - Normalized data: {'assetCode': '250001.IB', 'assetName': '25国债01', 'trdSide': '买入', 'amount': 1000000.0, 'rate': 3.6, 'amountReqFlag': True, 'rateReqFlag': True, 'fundName': ['景益货币', '景顺货币']}
2025-06-10 03:25:38,860 - __main__ - INFO - Successfully parsed bond data: {'assetCode': '250001.IB', 'assetName': '25国债01', 'trdSide': '买入', 'amount': 1000000.0, 'rate': 3.6, 'amountReqFlag': True, 'rateReqFlag': True, 'fundName': ['景益货币', '景顺货币']}
2025-06-10 03:25:38,860 - __main__ - INFO - Successfully completed smart parsing with AI analysis
2025-06-10 03:26:02,515 - __main__ - INFO - Received smart parse request: 250001.IB 25国债01 买入 *1000万 3.6%  景益货币、景顺货币, context: 
2025-06-10 03:26:02,515 - __main__ - INFO - AI recommended prompt type: 多产品指令语料解析
2025-06-10 03:26:02,516 - __main__ - INFO - AI reasoning: 基于以下特征选择了'多产品指令语料解析'模板：包含*号=True, 多基金名称=True, 是问题=False, 基金数量=3, 检测到的基金=['景益货币、景顺货币', '景益货币、', '景顺货币']
2025-06-10 03:26:02,516 - __main__ - INFO - Calling Ollama model with text: 250001.IB 25国债01 买入 *1000万 3.6%  景益货币、景顺货币, prompt_type: 多产品指令语料解析
2025-06-10 03:26:02,520 - __main__ - INFO - Ollama service is available
2025-06-10 03:26:02,541 - __main__ - INFO - Available models: {"models": [{"name": "qwen3:0.6b", "model": "qwen3:0.6b", "modified_at": "2025-05-08T01:27:52.753829715+08:00", "size": 522653526, "digest": "3bae9c93586b27bedaa979979733c2b0edd1d0defc745e9638f2161192a0ccf0", "details": {"parent_model": "", "format": "gguf", "family": "qwen3", "families": ["qwen3"], "parameter_size": "751.63M", "quantization_level": "Q4_K_M"}}]}
2025-06-10 03:26:02,541 - __main__ - INFO - Sending request to Ollama: {"model": "qwen3:0.6b", "prompt": "请将以下包含多个债券产品的交易文本解析为JSON数组格式，每个产品对应一个JSON对象，只返回JSON数组，不要包含其他文字说明：\n250001.IB 25国债01 买入 *1000万 3.6%  景益货币、景顺货币\n\n每个产品需要提取的字段：\n- assetCode: 债券代码为含有 4 位数字及以上纯数字不包括（小数点，加号等任意特殊字符）且不能被100整除或者含有任一关键字 (.IB,.SH,.SZ等，该关键字支持配置)；\n- assetName: 债券名称\n- trdSide: 交易方向（买入/卖出）\n- amount: 交易金额（数字）\n- rate: 利率（数字）\n- amountReqFlag: 金额是否需请示（布尔值，当金额前有*号时为true）\n- rateReqFlag: 利率是否需请示（布尔值，当利率前有*号时为true）\n- fundName: 基金名称,这是个list,需要提取出基金名称,可能包含多个基金名称\n\n", "stream": false}
2025-06-10 03:26:20,266 - __main__ - INFO - Received response from Ollama: {"model": "qwen3:0.6b", "created_at": "2025-06-09T19:26:20.257708Z", "response": "<think>\n好的，我现在需要处理用户提供的交易文本，将它解析为JSON数组格式。首先，我要仔细阅读用户提供的示例，确保我理解他们的需求。用户要求每个产品对应一个JSON对象，包含assetCode、assetName、trdSide、amount、rate、amountReqFlag、rateReqFlag、fundName这些字段，且必须返回JSON数组，不能有其他文字说明。\n\n首先，我需要分析用户提供的文本。文本是：“250001.IB 25国债01 买入 *1000万 3.6% 景益货币、景顺货币”。看起来这是一个债券产品的交易信息，包含多个产品，但用户可能希望提取每个产品的信息。不过，用户可能希望将这些信息分组处理，或者每个产品单独作为一个元素。不过根据用户提供的示例，可能每个产品对应一个JSON对象，但需要检查是否有多个产品。\n\n接下来，我需要提取每个产品的字段。首先，assetCode需要满足四个数字及以上纯数字，且不能被100整除，并且不能包含IB、SH、SZ等关键字。例如，250001符合这个条件，因为它有四个数字，且没有这些关键字。另外，金额前如果有*号的话，amountReqFlag设为true，利率前有*号的话rateReqFlag设为true。例如，*1000万和*3.6%分别对应金额和利率请示。\n\n然后，fundName需要提取出基金名称，可能包含多个，这里用户给出的是景益货币和景顺货币，所以需要将这两个名称合并成一个列表。同时，trdSide是买入，amount是1000万，rate是3.6%。需要确保所有字段正确对应，没有遗漏。\n\n现在，我需要检查是否有其他关键字或条件需要特别注意。比如，检查金额是否被100整除，但用户可能已经过滤掉这种情况，所以可能不需要额外处理。另外，确认基金名称是否正确合并，可能需要处理多个名称，比如用户给出的两个，所以fundName是[\"景益货币\", \"景顺货币\"]。\n\n最后，确保输出的JSON数组中每个对象都包含正确的字段，并且没有多余的文字说明。同时，验证是否所有字段都正确提取，没有遗漏或错误。例如，金额是否正确转换为数字，利率是否正确处理，金额是否包含*号等。\n\n总结步骤：解析文本，提取每个产品的字段，检查条件，正确合并基金名称，生成JSON数组，确保格式正确。\n</think>\n\n[\n  {\n    \"assetCode\": \"250001\",\n    \"assetName\": \"25国债01\",\n    \"trdSide\": \"买入\",\n    \"amount\": 1000,\n    \"rate\": 3.6,\n    \"amountReqFlag\": true,\n    \"rateReqFlag\": true,\n    \"fundName\": [\"景益货币\", \"景顺货币\"]\n  }\n]", "done": true, "done_reason": "stop", "context": [151644, 872, 198, 14880, 44063, 87752, 102298, 101213, 104976, 104703, 99886, 108704, 106637, 17714, 5370, 69824, 68805, 3837, 103991, 82700, 103124, 46944, 5370, 64429, 3837, 91680, 31526, 5370, 69824, 3837, 100148, 102298, 92894, 87335, 66394, 28311, 17, 20, 15, 15, 15, 16, 2447, 33, 220, 17, 20, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 220, 18, 13, 21, 4, 220, 6567, 247, 107, 99419, 101406, 5373, 85254, 99683, 101406, 271, 103991, 82700, 85106, 107439, 9370, 44931, 28311, 12, 9329, 2078, 25, 4891, 222, 118, 100054, 46100, 17714, 102704, 220, 19, 220, 24156, 82587, 109887, 100073, 82587, 16530, 100630, 9909, 30709, 8863, 27442, 3837, 20929, 17992, 49567, 108112, 101167, 48391, 7552, 100136, 53153, 99250, 16, 15, 15, 63431, 20755, 100631, 102704, 48888, 14777, 118294, 29465, 3256, 17515, 8590, 17515, 61228, 49567, 3837, 75882, 118294, 100143, 85767, 8, 59217, 12, 9329, 675, 25, 4891, 222, 118, 100054, 29991, 198, 12, 489, 67, 16384, 25, 220, 99886, 100696, 9909, 108532, 14, 109430, 23083, 12, 3311, 25, 220, 99886, 80094, 9909, 82587, 23083, 12, 4379, 25, 19468, 102, 95355, 9909, 82587, 23083, 12, 3311, 27234, 12135, 25, 220, 80094, 64471, 58362, 14880, 19793, 9909, 117661, 25511, 3837, 39165, 80094, 24562, 18830, 9, 17992, 13343, 17714, 1866, 23083, 12, 4379, 27234, 12135, 25, 19468, 102, 95355, 64471, 58362, 14880, 19793, 9909, 117661, 25511, 3837, 39165, 102299, 24562, 18830, 9, 17992, 13343, 17714, 1866, 23083, 12, 3802, 675, 25, 4891, 253, 118, 34230, 29991, 11, 100346, 18947, 1607, 11, 85106, 107439, 20221, 100025, 29991, 11, 87267, 102298, 101213, 100025, 29991, 271, 151645, 198, 151644, 77091, 198, 151667, 198, 99692, 3837, 107520, 85106, 54542, 20002, 103008, 99886, 108704, 3837, 44063, 99652, 106637, 17714, 5370, 69824, 68805, 1773, 101140, 3837, 104515, 104857, 101113, 20002, 103008, 19793, 26355, 3837, 103944, 35946, 101128, 104056, 100354, 1773, 20002, 101882, 103991, 82700, 103124, 46944, 5370, 64429, 3837, 102298, 9852, 2078, 5373, 9852, 675, 5373, 376, 67, 16384, 5373, 6045, 5373, 7698, 5373, 6045, 27234, 12135, 5373, 7698, 27234, 12135, 5373, 57603, 675, 100001, 44931, 3837, 100136, 100645, 31526, 5370, 69824, 3837, 53153, 18830, 92894, 87335, 66394, 3407, 101140, 3837, 35946, 85106, 101042, 20002, 103008, 108704, 1773, 108704, 20412, 36987, 17, 20, 15, 15, 15, 16, 2447, 33, 220, 17, 20, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 220, 18, 13, 21, 4, 6567, 247, 107, 99419, 101406, 5373, 85254, 99683, 101406, 55807, 104544, 105464, 104976, 104703, 99886, 27369, 3837, 102298, 101213, 82700, 3837, 77288, 20002, 87267, 99880, 107439, 103991, 104703, 27369, 1773, 100632, 3837, 20002, 87267, 99880, 44063, 100001, 27369, 17177, 40027, 54542, 3837, 100631, 103991, 82700, 105818, 106249, 102268, 1773, 100632, 100345, 20002, 103008, 19793, 26355, 3837, 87267, 103991, 82700, 103124, 46944, 5370, 64429, 3837, 77288, 85106, 101071, 107189, 101213, 82700, 3407, 104326, 3837, 35946, 85106, 107439, 103991, 104703, 44931, 1773, 101140, 3837, 9852, 2078, 85106, 101929, 100802, 82587, 109887, 100073, 82587, 3837, 100136, 53153, 99250, 16, 15, 15, 63431, 20755, 90395, 100136, 53153, 102298, 3256, 5373, 8590, 5373, 61228, 49567, 118294, 1773, 77557, 3837, 17, 20, 15, 15, 15, 16, 101137, 99487, 76095, 3837, 108884, 18830, 100802, 82587, 3837, 100136, 80443, 100001, 118294, 1773, 101948, 3837, 80094, 24562, 107055, 9, 17992, 100363, 3837, 6045, 27234, 12135, 29635, 17714, 1866, 3837, 102299, 24562, 18830, 9, 17992, 100363, 7698, 27234, 12135, 29635, 17714, 1866, 1773, 77557, 3837, 9, 16, 15, 15, 15, 31207, 33108, 9, 18, 13, 21, 4, 101127, 103124, 80094, 33108, 102299, 14880, 19793, 3407, 101889, 3837, 57603, 675, 85106, 107439, 20221, 100025, 29991, 3837, 87267, 102298, 101213, 3837, 99817, 20002, 107485, 100146, 85254, 99419, 101406, 33108, 85254, 99683, 101406, 3837, 99999, 85106, 44063, 105932, 29991, 106080, 12857, 46944, 44177, 1773, 91572, 3837, 376, 67, 16384, 20412, 108532, 3837, 6045, 20412, 16, 15, 15, 15, 31207, 3837, 7698, 20412, 18, 13, 21, 4, 1773, 85106, 103944, 55338, 44931, 88991, 103124, 3837, 80443, 114078, 3407, 99601, 3837, 35946, 85106, 101071, 107189, 92894, 118294, 57191, 76095, 85106, 100654, 60533, 1773, 101912, 3837, 101071, 80094, 64471, 99250, 16, 15, 15, 63431, 20755, 3837, 77288, 20002, 87267, 99461, 108459, 100373, 106334, 3837, 99999, 87267, 104689, 108593, 54542, 1773, 101948, 3837, 81167, 100025, 29991, 64471, 88991, 106080, 3837, 87267, 85106, 54542, 101213, 29991, 3837, 101912, 20002, 107485, 9370, 100369, 3837, 99999, 57603, 675, 20412, 1183, 85254, 99419, 101406, 497, 330, 85254, 99683, 101406, 1341, 3407, 100161, 3837, 103944, 66017, 9370, 5370, 69824, 15946, 103991, 64429, 71268, 102298, 105045, 44931, 90395, 100136, 80443, 115916, 109502, 66394, 1773, 91572, 3837, 48927, 64471, 55338, 44931, 71268, 88991, 107439, 3837, 80443, 114078, 57191, 32100, 1773, 77557, 3837, 80094, 64471, 88991, 105359, 17714, 82587, 3837, 102299, 64471, 88991, 54542, 3837, 80094, 64471, 102298, 9, 17992, 49567, 3407, 102050, 105652, 5122, 106637, 108704, 3837, 107439, 103991, 104703, 44931, 3837, 101071, 76095, 3837, 88991, 106080, 100025, 29991, 3837, 43959, 5370, 69824, 3837, 103944, 68805, 88991, 8997, 151668, 271, 9640, 220, 341, 262, 330, 9852, 2078, 788, 330, 17, 20, 15, 15, 15, 16, 756, 262, 330, 9852, 675, 788, 330, 17, 20, 114418, 15, 16, 756, 262, 330, 376, 67, 16384, 788, 330, 108532, 756, 262, 330, 6045, 788, 220, 16, 15, 15, 15, 345, 262, 330, 7698, 788, 220, 18, 13, 21, 345, 262, 330, 6045, 27234, 12135, 788, 830, 345, 262, 330, 7698, 27234, 12135, 788, 830, 345, 262, 330, 57603, 675, 788, 4383, 85254, 99419, 101406, 497, 330, 85254, 99683, 101406, 7026, 220, 456, 60], "total_duration": 17713001674, "load_duration": 31652965, "prompt_eval_count": 264, "prompt_eval_duration": 40263656, "eval_count": 631, "eval_duration": 17639990879}
2025-06-10 03:26:20,266 - __main__ - INFO - Validating Ollama response: {"model": "qwen3:0.6b", "created_at": "2025-06-09T19:26:20.257708Z", "response": "<think>\n好的，我现在需要处理用户提供的交易文本，将它解析为JSON数组格式。首先，我要仔细阅读用户提供的示例，确保我理解他们的需求。用户要求每个产品对应一个JSON对象，包含assetCode、assetName、trdSide、amount、rate、amountReqFlag、rateReqFlag、fundName这些字段，且必须返回JSON数组，不能有其他文字说明。\n\n首先，我需要分析用户提供的文本。文本是：“250001.IB 25国债01 买入 *1000万 3.6% 景益货币、景顺货币”。看起来这是一个债券产品的交易信息，包含多个产品，但用户可能希望提取每个产品的信息。不过，用户可能希望将这些信息分组处理，或者每个产品单独作为一个元素。不过根据用户提供的示例，可能每个产品对应一个JSON对象，但需要检查是否有多个产品。\n\n接下来，我需要提取每个产品的字段。首先，assetCode需要满足四个数字及以上纯数字，且不能被100整除，并且不能包含IB、SH、SZ等关键字。例如，250001符合这个条件，因为它有四个数字，且没有这些关键字。另外，金额前如果有*号的话，amountReqFlag设为true，利率前有*号的话rateReqFlag设为true。例如，*1000万和*3.6%分别对应金额和利率请示。\n\n然后，fundName需要提取出基金名称，可能包含多个，这里用户给出的是景益货币和景顺货币，所以需要将这两个名称合并成一个列表。同时，trdSide是买入，amount是1000万，rate是3.6%。需要确保所有字段正确对应，没有遗漏。\n\n现在，我需要检查是否有其他关键字或条件需要特别注意。比如，检查金额是否被100整除，但用户可能已经过滤掉这种情况，所以可能不需要额外处理。另外，确认基金名称是否正确合并，可能需要处理多个名称，比如用户给出的两个，所以fundName是[\"景益货币\", \"景顺货币\"]。\n\n最后，确保输出的JSON数组中每个对象都包含正确的字段，并且没有多余的文字说明。同时，验证是否所有字段都正确提取，没有遗漏或错误。例如，金额是否正确转换为数字，利率是否正确处理，金额是否包含*号等。\n\n总结步骤：解析文本，提取每个产品的字段，检查条件，正确合并基金名称，生成JSON数组，确保格式正确。\n</think>\n\n[\n  {\n    \"assetCode\": \"250001\",\n    \"assetName\": \"25国债01\",\n    \"trdSide\": \"买入\",\n    \"amount\": 1000,\n    \"rate\": 3.6,\n    \"amountReqFlag\": true,\n    \"rateReqFlag\": true,\n    \"fundName\": [\"景益货币\", \"景顺货币\"]\n  }\n]", "done": true, "done_reason": "stop", "context": [151644, 872, 198, 14880, 44063, 87752, 102298, 101213, 104976, 104703, 99886, 108704, 106637, 17714, 5370, 69824, 68805, 3837, 103991, 82700, 103124, 46944, 5370, 64429, 3837, 91680, 31526, 5370, 69824, 3837, 100148, 102298, 92894, 87335, 66394, 28311, 17, 20, 15, 15, 15, 16, 2447, 33, 220, 17, 20, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 220, 18, 13, 21, 4, 220, 6567, 247, 107, 99419, 101406, 5373, 85254, 99683, 101406, 271, 103991, 82700, 85106, 107439, 9370, 44931, 28311, 12, 9329, 2078, 25, 4891, 222, 118, 100054, 46100, 17714, 102704, 220, 19, 220, 24156, 82587, 109887, 100073, 82587, 16530, 100630, 9909, 30709, 8863, 27442, 3837, 20929, 17992, 49567, 108112, 101167, 48391, 7552, 100136, 53153, 99250, 16, 15, 15, 63431, 20755, 100631, 102704, 48888, 14777, 118294, 29465, 3256, 17515, 8590, 17515, 61228, 49567, 3837, 75882, 118294, 100143, 85767, 8, 59217, 12, 9329, 675, 25, 4891, 222, 118, 100054, 29991, 198, 12, 489, 67, 16384, 25, 220, 99886, 100696, 9909, 108532, 14, 109430, 23083, 12, 3311, 25, 220, 99886, 80094, 9909, 82587, 23083, 12, 4379, 25, 19468, 102, 95355, 9909, 82587, 23083, 12, 3311, 27234, 12135, 25, 220, 80094, 64471, 58362, 14880, 19793, 9909, 117661, 25511, 3837, 39165, 80094, 24562, 18830, 9, 17992, 13343, 17714, 1866, 23083, 12, 4379, 27234, 12135, 25, 19468, 102, 95355, 64471, 58362, 14880, 19793, 9909, 117661, 25511, 3837, 39165, 102299, 24562, 18830, 9, 17992, 13343, 17714, 1866, 23083, 12, 3802, 675, 25, 4891, 253, 118, 34230, 29991, 11, 100346, 18947, 1607, 11, 85106, 107439, 20221, 100025, 29991, 11, 87267, 102298, 101213, 100025, 29991, 271, 151645, 198, 151644, 77091, 198, 151667, 198, 99692, 3837, 107520, 85106, 54542, 20002, 103008, 99886, 108704, 3837, 44063, 99652, 106637, 17714, 5370, 69824, 68805, 1773, 101140, 3837, 104515, 104857, 101113, 20002, 103008, 19793, 26355, 3837, 103944, 35946, 101128, 104056, 100354, 1773, 20002, 101882, 103991, 82700, 103124, 46944, 5370, 64429, 3837, 102298, 9852, 2078, 5373, 9852, 675, 5373, 376, 67, 16384, 5373, 6045, 5373, 7698, 5373, 6045, 27234, 12135, 5373, 7698, 27234, 12135, 5373, 57603, 675, 100001, 44931, 3837, 100136, 100645, 31526, 5370, 69824, 3837, 53153, 18830, 92894, 87335, 66394, 3407, 101140, 3837, 35946, 85106, 101042, 20002, 103008, 108704, 1773, 108704, 20412, 36987, 17, 20, 15, 15, 15, 16, 2447, 33, 220, 17, 20, 114418, 15, 16, 220, 108532, 353, 16, 15, 15, 15, 31207, 220, 18, 13, 21, 4, 6567, 247, 107, 99419, 101406, 5373, 85254, 99683, 101406, 55807, 104544, 105464, 104976, 104703, 99886, 27369, 3837, 102298, 101213, 82700, 3837, 77288, 20002, 87267, 99880, 107439, 103991, 104703, 27369, 1773, 100632, 3837, 20002, 87267, 99880, 44063, 100001, 27369, 17177, 40027, 54542, 3837, 100631, 103991, 82700, 105818, 106249, 102268, 1773, 100632, 100345, 20002, 103008, 19793, 26355, 3837, 87267, 103991, 82700, 103124, 46944, 5370, 64429, 3837, 77288, 85106, 101071, 107189, 101213, 82700, 3407, 104326, 3837, 35946, 85106, 107439, 103991, 104703, 44931, 1773, 101140, 3837, 9852, 2078, 85106, 101929, 100802, 82587, 109887, 100073, 82587, 3837, 100136, 53153, 99250, 16, 15, 15, 63431, 20755, 90395, 100136, 53153, 102298, 3256, 5373, 8590, 5373, 61228, 49567, 118294, 1773, 77557, 3837, 17, 20, 15, 15, 15, 16, 101137, 99487, 76095, 3837, 108884, 18830, 100802, 82587, 3837, 100136, 80443, 100001, 118294, 1773, 101948, 3837, 80094, 24562, 107055, 9, 17992, 100363, 3837, 6045, 27234, 12135, 29635, 17714, 1866, 3837, 102299, 24562, 18830, 9, 17992, 100363, 7698, 27234, 12135, 29635, 17714, 1866, 1773, 77557, 3837, 9, 16, 15, 15, 15, 31207, 33108, 9, 18, 13, 21, 4, 101127, 103124, 80094, 33108, 102299, 14880, 19793, 3407, 101889, 3837, 57603, 675, 85106, 107439, 20221, 100025, 29991, 3837, 87267, 102298, 101213, 3837, 99817, 20002, 107485, 100146, 85254, 99419, 101406, 33108, 85254, 99683, 101406, 3837, 99999, 85106, 44063, 105932, 29991, 106080, 12857, 46944, 44177, 1773, 91572, 3837, 376, 67, 16384, 20412, 108532, 3837, 6045, 20412, 16, 15, 15, 15, 31207, 3837, 7698, 20412, 18, 13, 21, 4, 1773, 85106, 103944, 55338, 44931, 88991, 103124, 3837, 80443, 114078, 3407, 99601, 3837, 35946, 85106, 101071, 107189, 92894, 118294, 57191, 76095, 85106, 100654, 60533, 1773, 101912, 3837, 101071, 80094, 64471, 99250, 16, 15, 15, 63431, 20755, 3837, 77288, 20002, 87267, 99461, 108459, 100373, 106334, 3837, 99999, 87267, 104689, 108593, 54542, 1773, 101948, 3837, 81167, 100025, 29991, 64471, 88991, 106080, 3837, 87267, 85106, 54542, 101213, 29991, 3837, 101912, 20002, 107485, 9370, 100369, 3837, 99999, 57603, 675, 20412, 1183, 85254, 99419, 101406, 497, 330, 85254, 99683, 101406, 1341, 3407, 100161, 3837, 103944, 66017, 9370, 5370, 69824, 15946, 103991, 64429, 71268, 102298, 105045, 44931, 90395, 100136, 80443, 115916, 109502, 66394, 1773, 91572, 3837, 48927, 64471, 55338, 44931, 71268, 88991, 107439, 3837, 80443, 114078, 57191, 32100, 1773, 77557, 3837, 80094, 64471, 88991, 105359, 17714, 82587, 3837, 102299, 64471, 88991, 54542, 3837, 80094, 64471, 102298, 9, 17992, 49567, 3407, 102050, 105652, 5122, 106637, 108704, 3837, 107439, 103991, 104703, 44931, 3837, 101071, 76095, 3837, 88991, 106080, 100025, 29991, 3837, 43959, 5370, 69824, 3837, 103944, 68805, 88991, 8997, 151668, 271, 9640, 220, 341, 262, 330, 9852, 2078, 788, 330, 17, 20, 15, 15, 15, 16, 756, 262, 330, 9852, 675, 788, 330, 17, 20, 114418, 15, 16, 756, 262, 330, 376, 67, 16384, 788, 330, 108532, 756, 262, 330, 6045, 788, 220, 16, 15, 15, 15, 345, 262, 330, 7698, 788, 220, 18, 13, 21, 345, 262, 330, 6045, 27234, 12135, 788, 830, 345, 262, 330, 7698, 27234, 12135, 788, 830, 345, 262, 330, 57603, 675, 788, 4383, 85254, 99419, 101406, 497, 330, 85254, 99683, 101406, 7026, 220, 456, 60], "total_duration": 17713001674, "load_duration": 31652965, "prompt_eval_count": 264, "prompt_eval_duration": 40263656, "eval_count": 631, "eval_duration": 17639990879}
2025-06-10 03:26:20,267 - __main__ - INFO - Raw model response: <think>
好的，我现在需要处理用户提供的交易文本，将它解析为JSON数组格式。首先，我要仔细阅读用户提供的示例，确保我理解他们的需求。用户要求每个产品对应一个JSON对象，包含assetCode、assetName、trdSide、amount、rate、amountReqFlag、rateReqFlag、fundName这些字段，且必须返回JSON数组，不能有其他文字说明。

首先，我需要分析用户提供的文本。文本是：“250001.IB 25国债01 买入 *1000万 3.6% 景益货币、景顺货币”。看起来这是一个债券产品的交易信息，包含多个产品，但用户可能希望提取每个产品的信息。不过，用户可能希望将这些信息分组处理，或者每个产品单独作为一个元素。不过根据用户提供的示例，可能每个产品对应一个JSON对象，但需要检查是否有多个产品。

接下来，我需要提取每个产品的字段。首先，assetCode需要满足四个数字及以上纯数字，且不能被100整除，并且不能包含IB、SH、SZ等关键字。例如，250001符合这个条件，因为它有四个数字，且没有这些关键字。另外，金额前如果有*号的话，amountReqFlag设为true，利率前有*号的话rateReqFlag设为true。例如，*1000万和*3.6%分别对应金额和利率请示。

然后，fundName需要提取出基金名称，可能包含多个，这里用户给出的是景益货币和景顺货币，所以需要将这两个名称合并成一个列表。同时，trdSide是买入，amount是1000万，rate是3.6%。需要确保所有字段正确对应，没有遗漏。

现在，我需要检查是否有其他关键字或条件需要特别注意。比如，检查金额是否被100整除，但用户可能已经过滤掉这种情况，所以可能不需要额外处理。另外，确认基金名称是否正确合并，可能需要处理多个名称，比如用户给出的两个，所以fundName是["景益货币", "景顺货币"]。

最后，确保输出的JSON数组中每个对象都包含正确的字段，并且没有多余的文字说明。同时，验证是否所有字段都正确提取，没有遗漏或错误。例如，金额是否正确转换为数字，利率是否正确处理，金额是否包含*号等。

总结步骤：解析文本，提取每个产品的字段，检查条件，正确合并基金名称，生成JSON数组，确保格式正确。
</think>

[
  {
    "assetCode": "250001",
    "assetName": "25国债01",
    "trdSide": "买入",
    "amount": 1000,
    "rate": 3.6,
    "amountReqFlag": true,
    "rateReqFlag": true,
    "fundName": ["景益货币", "景顺货币"]
  }
]
2025-06-10 03:26:20,267 - __main__ - ERROR - JSON decode error: Expecting value: line 1 column 1 (char 0)
2025-06-10 03:26:20,267 - __main__ - INFO - Extracted JSON string: {
    "assetCode": "250001",
    "assetName": "25国债01",
    "trdSide": "买入",
    "amount": 1000,
    "rate": 3.6,
    "amountReqFlag": true,
    "rateReqFlag": true,
    "fundName": ["景益货币", "景顺货币"]
  }
2025-06-10 03:26:20,267 - __main__ - INFO - Normalizing parsed data: {'assetCode': '250001', 'assetName': '25国债01', 'trdSide': '买入', 'amount': 1000, 'rate': 3.6, 'amountReqFlag': True, 'rateReqFlag': True, 'fundName': ['景益货币', '景顺货币']}
2025-06-10 03:26:20,267 - __main__ - INFO - Normalized data: {'assetCode': '250001', 'assetName': '25国债01', 'trdSide': '买入', 'amount': 1000.0, 'rate': 3.6, 'amountReqFlag': True, 'rateReqFlag': True, 'fundName': ['景益货币', '景顺货币']}
2025-06-10 03:26:20,267 - __main__ - INFO - Successfully parsed bond data: {'assetCode': '250001', 'assetName': '25国债01', 'trdSide': '买入', 'amount': 1000.0, 'rate': 3.6, 'amountReqFlag': True, 'rateReqFlag': True, 'fundName': ['景益货币', '景顺货币']}
2025-06-10 03:26:20,268 - __main__ - INFO - Successfully completed smart parsing with AI analysis
2025-06-10 03:26:45,411 - __main__ - INFO - Received smart parse request: 250001.IB 25国债01 买入 1000万 3.6%  景益货币、景顺货币, context: 
2025-06-10 03:26:45,411 - __main__ - INFO - AI recommended prompt type: 多产品指令语料解析
2025-06-10 03:26:45,411 - __main__ - INFO - AI reasoning: 基于以下特征选择了'多产品指令语料解析'模板：包含*号=False, 多基金名称=True, 是问题=False, 基金数量=3, 检测到的基金=['景益货币、景顺货币', '景益货币、', '景顺货币']
2025-06-10 03:26:45,412 - __main__ - INFO - Calling Ollama model with text: 250001.IB 25国债01 买入 1000万 3.6%  景益货币、景顺货币, prompt_type: 多产品指令语料解析
2025-06-10 03:26:45,416 - __main__ - INFO - Ollama service is available
2025-06-10 03:26:45,438 - __main__ - INFO - Available models: {"models": [{"name": "qwen3:0.6b", "model": "qwen3:0.6b", "modified_at": "2025-05-08T01:27:52.753829715+08:00", "size": 522653526, "digest": "3bae9c93586b27bedaa979979733c2b0edd1d0defc745e9638f2161192a0ccf0", "details": {"parent_model": "", "format": "gguf", "family": "qwen3", "families": ["qwen3"], "parameter_size": "751.63M", "quantization_level": "Q4_K_M"}}]}
2025-06-10 03:26:45,438 - __main__ - INFO - Sending request to Ollama: {"model": "qwen3:0.6b", "prompt": "请将以下包含多个债券产品的交易文本解析为JSON数组格式，每个产品对应一个JSON对象，只返回JSON数组，不要包含其他文字说明：\n250001.IB 25国债01 买入 1000万 3.6%  景益货币、景顺货币\n\n每个产品需要提取的字段：\n- assetCode: 债券代码为含有 4 位数字及以上纯数字不包括（小数点，加号等任意特殊字符）且不能被100整除或者含有任一关键字 (.IB,.SH,.SZ等，该关键字支持配置)；\n- assetName: 债券名称\n- trdSide: 交易方向（买入/卖出）\n- amount: 交易金额（数字）\n- rate: 利率（数字）\n- amountReqFlag: 金额是否需请示（布尔值，当金额前有*号时为true）\n- rateReqFlag: 利率是否需请示（布尔值，当利率前有*号时为true）\n- fundName: 基金名称,这是个list,需要提取出基金名称,可能包含多个基金名称\n\n", "stream": false}
2025-06-10 03:27:02,524 - __main__ - INFO - Received response from Ollama: {"model": "qwen3:0.6b", "created_at": "2025-06-09T19:27:02.517945Z", "response": "<think>\n好的，我现在需要处理用户的请求，将包含多个债券产品的交易文本解析为JSON数组格式。首先，我要仔细阅读用户提供的文本，确保理解每个产品的结构和要求。\n\n用户给出的文本是：“250001.IB 25国债01 买入 1000万 3.6% 景益货币、景顺货币”。每个产品需要提取的字段包括assetCode、assetName、trdSide、amount、rate、amountReqFlag、rateReqFlag、fundName。其中fundName是一个列表，可能包含多个基金名称。\n\n首先，我需要确定每个产品的字段。对于assetCode，用户要求是4位数字及以上纯数字，并且不能被100整除，且不能包含关键字(.IB,.SH,.SZ等，这些关键字支持配置)。这里的assetCode是250001，看起来符合条件，因为它有四位，且没有特殊字符，也不能被100整除。不过需要检查一下250001是否被100整除，250001除以100是2500.01，显然不是整数，所以没问题。\n\n接下来是assetName，用户提供的文本中是“25国债01”，所以直接提取即可。trdSide是买入，amount是1000万，即10000000元，rate是3.6%，amountReqFlag是false，因为没有*号，rateReqFlag也是false，因为没有*号。fundName是景益货币、景顺货币，这里可能需要确认是否每个都是单独的基金名称，但用户可能希望每个基金名称作为一个元素，所以需要分开处理。\n\n需要注意的是，用户提到基金名称可能包含多个，所以需要确保列表中有多个元素。此外，检查是否有遗漏的字段或错误。例如，金额是否正确转换为数字，利率是否正确处理。确保所有字段都符合要求，并且没有额外的文字说明。最后，将结果整理为JSON数组，并确保格式正确，没有多余的内容。\n</think>\n\n[\n  {\n    \"assetCode\": \"250001\",\n    \"assetName\": \"25国债01\",\n    \"trdSide\": \"买入\",\n    \"amount\": 10000000,\n    \"rate\": 3.6,\n    \"amountReqFlag\": false,\n    \"rateReqFlag\": false,\n    \"fundName\": [\"景益货币\", \"景顺货币\"]\n  }\n]", "done": true, "done_reason": "stop", "context": [151644, 872, 198, 14880, 44063, 87752, 102298, 101213, 104976, 104703, 99886, 108704, 106637, 17714, 5370, 69824, 68805, 3837, 103991, 82700, 103124, 46944, 5370, 64429, 3837, 91680, 31526, 5370, 69824, 3837, 100148, 102298, 92894, 87335, 66394, 28311, 17, 20, 15, 15, 15, 16, 2447, 33, 220, 17, 20, 114418, 15, 16, 220, 108532, 220, 16, 15, 15, 15, 31207, 220, 18, 13, 21, 4, 220, 6567, 247, 107, 99419, 101406, 5373, 85254, 99683, 101406, 271, 103991, 82700, 85106, 107439, 9370, 44931, 28311, 12, 9329, 2078, 25, 4891, 222, 118, 100054, 46100, 17714, 102704, 220, 19, 220, 24156, 82587, 109887, 100073, 82587, 16530, 100630, 9909, 30709, 8863, 27442, 3837, 20929, 17992, 49567, 108112, 101167, 48391, 7552, 100136, 53153, 99250, 16, 15, 15, 63431, 20755, 100631, 102704, 48888, 14777, 118294, 29465, 3256, 17515, 8590, 17515, 61228, 49567, 3837, 75882, 118294, 100143, 85767, 8, 59217, 12, 9329, 675, 25, 4891, 222, 118, 100054, 29991, 198, 12, 489, 67, 16384, 25, 220, 99886, 100696, 9909, 108532, 14, 109430, 23083, 12, 3311, 25, 220, 99886, 80094, 9909, 82587, 23083, 12, 4379, 25, 19468, 102, 95355, 9909, 82587, 23083, 12, 3311, 27234, 12135, 25, 220, 80094, 64471, 58362, 14880, 19793, 9909, 117661, 25511, 3837, 39165, 80094, 24562, 18830, 9, 17992, 13343, 17714, 1866, 23083, 12, 4379, 27234, 12135, 25, 19468, 102, 95355, 64471, 58362, 14880, 19793, 9909, 117661, 25511, 3837, 39165, 102299, 24562, 18830, 9, 17992, 13343, 17714, 1866, 23083, 12, 3802, 675, 25, 4891, 253, 118, 34230, 29991, 11, 100346, 18947, 1607, 11, 85106, 107439, 20221, 100025, 29991, 11, 87267, 102298, 101213, 100025, 29991, 271, 151645, 198, 151644, 77091, 198, 151667, 198, 99692, 3837, 107520, 85106, 54542, 107494, 34859, 3837, 44063, 102298, 101213, 104976, 104703, 99886, 108704, 106637, 17714, 5370, 69824, 68805, 1773, 101140, 3837, 104515, 104857, 101113, 20002, 103008, 108704, 3837, 103944, 101128, 103991, 104703, 100166, 33108, 101882, 3407, 20002, 107485, 9370, 108704, 20412, 36987, 17, 20, 15, 15, 15, 16, 2447, 33, 220, 17, 20, 114418, 15, 16, 220, 108532, 220, 16, 15, 15, 15, 31207, 220, 18, 13, 21, 4, 6567, 247, 107, 99419, 101406, 5373, 85254, 99683, 101406, 55807, 103991, 82700, 85106, 107439, 9370, 44931, 100630, 9852, 2078, 5373, 9852, 675, 5373, 376, 67, 16384, 5373, 6045, 5373, 7698, 5373, 6045, 27234, 12135, 5373, 7698, 27234, 12135, 5373, 57603, 675, 1773, 90919, 57603, 675, 101909, 44177, 3837, 87267, 102298, 101213, 100025, 29991, 3407, 101140, 3837, 35946, 85106, 60610, 103991, 104703, 44931, 1773, 100002, 9852, 2078, 3837, 20002, 101882, 20412, 19, 24156, 82587, 109887, 100073, 82587, 90395, 100136, 53153, 99250, 16, 15, 15, 63431, 20755, 3837, 100136, 53153, 102298, 118294, 14618, 3256, 17515, 8590, 17515, 61228, 49567, 3837, 100001, 118294, 100143, 85767, 8, 1773, 106370, 9852, 2078, 20412, 17, 20, 15, 15, 15, 16, 3837, 104544, 113954, 3837, 108884, 18830, 115605, 3837, 100136, 80443, 101167, 48391, 3837, 105827, 99250, 16, 15, 15, 63431, 20755, 1773, 100632, 85106, 101071, 100158, 17, 20, 15, 15, 15, 16, 64471, 99250, 16, 15, 15, 63431, 20755, 3837, 17, 20, 15, 15, 15, 16, 20755, 23031, 16, 15, 15, 20412, 17, 20, 15, 15, 13, 15, 16, 3837, 105092, 99520, 63431, 8863, 3837, 99999, 114815, 3407, 104326, 20412, 9852, 675, 3837, 20002, 103008, 108704, 15946, 20412, 2073, 17, 20, 114418, 15, 16, 33590, 99999, 101041, 107439, 104180, 1773, 376, 67, 16384, 20412, 108532, 3837, 6045, 20412, 16, 15, 15, 15, 31207, 3837, 91676, 16, 15, 15, 15, 15, 15, 15, 15, 23305, 3837, 7698, 20412, 18, 13, 21, 69982, 6045, 27234, 12135, 20412, 3849, 3837, 99519, 80443, 9, 17992, 3837, 7698, 27234, 12135, 100000, 3849, 3837, 99519, 80443, 9, 17992, 1773, 57603, 675, 20412, 85254, 99419, 101406, 5373, 85254, 99683, 101406, 3837, 99817, 87267, 85106, 81167, 64471, 103991, 100132, 105818, 9370, 100025, 29991, 3837, 77288, 20002, 87267, 99880, 103991, 100025, 29991, 106249, 102268, 3837, 99999, 85106, 107878, 54542, 3407, 107916, 100146, 3837, 20002, 104496, 100025, 29991, 87267, 102298, 101213, 3837, 99999, 85106, 103944, 44177, 105656, 101213, 102268, 1773, 104043, 3837, 101071, 107189, 114078, 9370, 44931, 57191, 32100, 1773, 77557, 3837, 80094, 64471, 88991, 105359, 17714, 82587, 3837, 102299, 64471, 88991, 54542, 1773, 103944, 55338, 44931, 71268, 101137, 101882, 90395, 100136, 80443, 108593, 109502, 66394, 1773, 100161, 3837, 44063, 59151, 104387, 17714, 5370, 69824, 90395, 103944, 68805, 88991, 3837, 80443, 115916, 104597, 8997, 151668, 271, 9640, 220, 341, 262, 330, 9852, 2078, 788, 330, 17, 20, 15, 15, 15, 16, 756, 262, 330, 9852, 675, 788, 330, 17, 20, 114418, 15, 16, 756, 262, 330, 376, 67, 16384, 788, 330, 108532, 756, 262, 330, 6045, 788, 220, 16, 15, 15, 15, 15, 15, 15, 15, 345, 262, 330, 7698, 788, 220, 18, 13, 21, 345, 262, 330, 6045, 27234, 12135, 788, 895, 345, 262, 330, 7698, 27234, 12135, 788, 895, 345, 262, 330, 57603, 675, 788, 4383, 85254, 99419, 101406, 497, 330, 85254, 99683, 101406, 7026, 220, 456, 60], "total_duration": 17076587811, "load_duration": 25227427, "prompt_eval_count": 264, "prompt_eval_duration": 2065232992, "eval_count": 537, "eval_duration": 14985440736}
2025-06-10 03:27:02,524 - __main__ - INFO - Validating Ollama response: {"model": "qwen3:0.6b", "created_at": "2025-06-09T19:27:02.517945Z", "response": "<think>\n好的，我现在需要处理用户的请求，将包含多个债券产品的交易文本解析为JSON数组格式。首先，我要仔细阅读用户提供的文本，确保理解每个产品的结构和要求。\n\n用户给出的文本是：“250001.IB 25国债01 买入 1000万 3.6% 景益货币、景顺货币”。每个产品需要提取的字段包括assetCode、assetName、trdSide、amount、rate、amountReqFlag、rateReqFlag、fundName。其中fundName是一个列表，可能包含多个基金名称。\n\n首先，我需要确定每个产品的字段。对于assetCode，用户要求是4位数字及以上纯数字，并且不能被100整除，且不能包含关键字(.IB,.SH,.SZ等，这些关键字支持配置)。这里的assetCode是250001，看起来符合条件，因为它有四位，且没有特殊字符，也不能被100整除。不过需要检查一下250001是否被100整除，250001除以100是2500.01，显然不是整数，所以没问题。\n\n接下来是assetName，用户提供的文本中是“25国债01”，所以直接提取即可。trdSide是买入，amount是1000万，即10000000元，rate是3.6%，amountReqFlag是false，因为没有*号，rateReqFlag也是false，因为没有*号。fundName是景益货币、景顺货币，这里可能需要确认是否每个都是单独的基金名称，但用户可能希望每个基金名称作为一个元素，所以需要分开处理。\n\n需要注意的是，用户提到基金名称可能包含多个，所以需要确保列表中有多个元素。此外，检查是否有遗漏的字段或错误。例如，金额是否正确转换为数字，利率是否正确处理。确保所有字段都符合要求，并且没有额外的文字说明。最后，将结果整理为JSON数组，并确保格式正确，没有多余的内容。\n</think>\n\n[\n  {\n    \"assetCode\": \"250001\",\n    \"assetName\": \"25国债01\",\n    \"trdSide\": \"买入\",\n    \"amount\": 10000000,\n    \"rate\": 3.6,\n    \"amountReqFlag\": false,\n    \"rateReqFlag\": false,\n    \"fundName\": [\"景益货币\", \"景顺货币\"]\n  }\n]", "done": true, "done_reason": "stop", "context": [151644, 872, 198, 14880, 44063, 87752, 102298, 101213, 104976, 104703, 99886, 108704, 106637, 17714, 5370, 69824, 68805, 3837, 103991, 82700, 103124, 46944, 5370, 64429, 3837, 91680, 31526, 5370, 69824, 3837, 100148, 102298, 92894, 87335, 66394, 28311, 17, 20, 15, 15, 15, 16, 2447, 33, 220, 17, 20, 114418, 15, 16, 220, 108532, 220, 16, 15, 15, 15, 31207, 220, 18, 13, 21, 4, 220, 6567, 247, 107, 99419, 101406, 5373, 85254, 99683, 101406, 271, 103991, 82700, 85106, 107439, 9370, 44931, 28311, 12, 9329, 2078, 25, 4891, 222, 118, 100054, 46100, 17714, 102704, 220, 19, 220, 24156, 82587, 109887, 100073, 82587, 16530, 100630, 9909, 30709, 8863, 27442, 3837, 20929, 17992, 49567, 108112, 101167, 48391, 7552, 100136, 53153, 99250, 16, 15, 15, 63431, 20755, 100631, 102704, 48888, 14777, 118294, 29465, 3256, 17515, 8590, 17515, 61228, 49567, 3837, 75882, 118294, 100143, 85767, 8, 59217, 12, 9329, 675, 25, 4891, 222, 118, 100054, 29991, 198, 12, 489, 67, 16384, 25, 220, 99886, 100696, 9909, 108532, 14, 109430, 23083, 12, 3311, 25, 220, 99886, 80094, 9909, 82587, 23083, 12, 4379, 25, 19468, 102, 95355, 9909, 82587, 23083, 12, 3311, 27234, 12135, 25, 220, 80094, 64471, 58362, 14880, 19793, 9909, 117661, 25511, 3837, 39165, 80094, 24562, 18830, 9, 17992, 13343, 17714, 1866, 23083, 12, 4379, 27234, 12135, 25, 19468, 102, 95355, 64471, 58362, 14880, 19793, 9909, 117661, 25511, 3837, 39165, 102299, 24562, 18830, 9, 17992, 13343, 17714, 1866, 23083, 12, 3802, 675, 25, 4891, 253, 118, 34230, 29991, 11, 100346, 18947, 1607, 11, 85106, 107439, 20221, 100025, 29991, 11, 87267, 102298, 101213, 100025, 29991, 271, 151645, 198, 151644, 77091, 198, 151667, 198, 99692, 3837, 107520, 85106, 54542, 107494, 34859, 3837, 44063, 102298, 101213, 104976, 104703, 99886, 108704, 106637, 17714, 5370, 69824, 68805, 1773, 101140, 3837, 104515, 104857, 101113, 20002, 103008, 108704, 3837, 103944, 101128, 103991, 104703, 100166, 33108, 101882, 3407, 20002, 107485, 9370, 108704, 20412, 36987, 17, 20, 15, 15, 15, 16, 2447, 33, 220, 17, 20, 114418, 15, 16, 220, 108532, 220, 16, 15, 15, 15, 31207, 220, 18, 13, 21, 4, 6567, 247, 107, 99419, 101406, 5373, 85254, 99683, 101406, 55807, 103991, 82700, 85106, 107439, 9370, 44931, 100630, 9852, 2078, 5373, 9852, 675, 5373, 376, 67, 16384, 5373, 6045, 5373, 7698, 5373, 6045, 27234, 12135, 5373, 7698, 27234, 12135, 5373, 57603, 675, 1773, 90919, 57603, 675, 101909, 44177, 3837, 87267, 102298, 101213, 100025, 29991, 3407, 101140, 3837, 35946, 85106, 60610, 103991, 104703, 44931, 1773, 100002, 9852, 2078, 3837, 20002, 101882, 20412, 19, 24156, 82587, 109887, 100073, 82587, 90395, 100136, 53153, 99250, 16, 15, 15, 63431, 20755, 3837, 100136, 53153, 102298, 118294, 14618, 3256, 17515, 8590, 17515, 61228, 49567, 3837, 100001, 118294, 100143, 85767, 8, 1773, 106370, 9852, 2078, 20412, 17, 20, 15, 15, 15, 16, 3837, 104544, 113954, 3837, 108884, 18830, 115605, 3837, 100136, 80443, 101167, 48391, 3837, 105827, 99250, 16, 15, 15, 63431, 20755, 1773, 100632, 85106, 101071, 100158, 17, 20, 15, 15, 15, 16, 64471, 99250, 16, 15, 15, 63431, 20755, 3837, 17, 20, 15, 15, 15, 16, 20755, 23031, 16, 15, 15, 20412, 17, 20, 15, 15, 13, 15, 16, 3837, 105092, 99520, 63431, 8863, 3837, 99999, 114815, 3407, 104326, 20412, 9852, 675, 3837, 20002, 103008, 108704, 15946, 20412, 2073, 17, 20, 114418, 15, 16, 33590, 99999, 101041, 107439, 104180, 1773, 376, 67, 16384, 20412, 108532, 3837, 6045, 20412, 16, 15, 15, 15, 31207, 3837, 91676, 16, 15, 15, 15, 15, 15, 15, 15, 23305, 3837, 7698, 20412, 18, 13, 21, 69982, 6045, 27234, 12135, 20412, 3849, 3837, 99519, 80443, 9, 17992, 3837, 7698, 27234, 12135, 100000, 3849, 3837, 99519, 80443, 9, 17992, 1773, 57603, 675, 20412, 85254, 99419, 101406, 5373, 85254, 99683, 101406, 3837, 99817, 87267, 85106, 81167, 64471, 103991, 100132, 105818, 9370, 100025, 29991, 3837, 77288, 20002, 87267, 99880, 103991, 100025, 29991, 106249, 102268, 3837, 99999, 85106, 107878, 54542, 3407, 107916, 100146, 3837, 20002, 104496, 100025, 29991, 87267, 102298, 101213, 3837, 99999, 85106, 103944, 44177, 105656, 101213, 102268, 1773, 104043, 3837, 101071, 107189, 114078, 9370, 44931, 57191, 32100, 1773, 77557, 3837, 80094, 64471, 88991, 105359, 17714, 82587, 3837, 102299, 64471, 88991, 54542, 1773, 103944, 55338, 44931, 71268, 101137, 101882, 90395, 100136, 80443, 108593, 109502, 66394, 1773, 100161, 3837, 44063, 59151, 104387, 17714, 5370, 69824, 90395, 103944, 68805, 88991, 3837, 80443, 115916, 104597, 8997, 151668, 271, 9640, 220, 341, 262, 330, 9852, 2078, 788, 330, 17, 20, 15, 15, 15, 16, 756, 262, 330, 9852, 675, 788, 330, 17, 20, 114418, 15, 16, 756, 262, 330, 376, 67, 16384, 788, 330, 108532, 756, 262, 330, 6045, 788, 220, 16, 15, 15, 15, 15, 15, 15, 15, 345, 262, 330, 7698, 788, 220, 18, 13, 21, 345, 262, 330, 6045, 27234, 12135, 788, 895, 345, 262, 330, 7698, 27234, 12135, 788, 895, 345, 262, 330, 57603, 675, 788, 4383, 85254, 99419, 101406, 497, 330, 85254, 99683, 101406, 7026, 220, 456, 60], "total_duration": 17076587811, "load_duration": 25227427, "prompt_eval_count": 264, "prompt_eval_duration": 2065232992, "eval_count": 537, "eval_duration": 14985440736}
2025-06-10 03:27:02,524 - __main__ - INFO - Raw model response: <think>
好的，我现在需要处理用户的请求，将包含多个债券产品的交易文本解析为JSON数组格式。首先，我要仔细阅读用户提供的文本，确保理解每个产品的结构和要求。

用户给出的文本是：“250001.IB 25国债01 买入 1000万 3.6% 景益货币、景顺货币”。每个产品需要提取的字段包括assetCode、assetName、trdSide、amount、rate、amountReqFlag、rateReqFlag、fundName。其中fundName是一个列表，可能包含多个基金名称。

首先，我需要确定每个产品的字段。对于assetCode，用户要求是4位数字及以上纯数字，并且不能被100整除，且不能包含关键字(.IB,.SH,.SZ等，这些关键字支持配置)。这里的assetCode是250001，看起来符合条件，因为它有四位，且没有特殊字符，也不能被100整除。不过需要检查一下250001是否被100整除，250001除以100是2500.01，显然不是整数，所以没问题。

接下来是assetName，用户提供的文本中是“25国债01”，所以直接提取即可。trdSide是买入，amount是1000万，即10000000元，rate是3.6%，amountReqFlag是false，因为没有*号，rateReqFlag也是false，因为没有*号。fundName是景益货币、景顺货币，这里可能需要确认是否每个都是单独的基金名称，但用户可能希望每个基金名称作为一个元素，所以需要分开处理。

需要注意的是，用户提到基金名称可能包含多个，所以需要确保列表中有多个元素。此外，检查是否有遗漏的字段或错误。例如，金额是否正确转换为数字，利率是否正确处理。确保所有字段都符合要求，并且没有额外的文字说明。最后，将结果整理为JSON数组，并确保格式正确，没有多余的内容。
</think>

[
  {
    "assetCode": "250001",
    "assetName": "25国债01",
    "trdSide": "买入",
    "amount": 10000000,
    "rate": 3.6,
    "amountReqFlag": false,
    "rateReqFlag": false,
    "fundName": ["景益货币", "景顺货币"]
  }
]
2025-06-10 03:27:02,524 - __main__ - ERROR - JSON decode error: Expecting value: line 1 column 1 (char 0)
2025-06-10 03:27:02,524 - __main__ - INFO - Extracted JSON string: {
    "assetCode": "250001",
    "assetName": "25国债01",
    "trdSide": "买入",
    "amount": 10000000,
    "rate": 3.6,
    "amountReqFlag": false,
    "rateReqFlag": false,
    "fundName": ["景益货币", "景顺货币"]
  }
2025-06-10 03:27:02,524 - __main__ - INFO - Normalizing parsed data: {'assetCode': '250001', 'assetName': '25国债01', 'trdSide': '买入', 'amount': 10000000, 'rate': 3.6, 'amountReqFlag': False, 'rateReqFlag': False, 'fundName': ['景益货币', '景顺货币']}
2025-06-10 03:27:02,524 - __main__ - INFO - Normalized data: {'assetCode': '250001', 'assetName': '25国债01', 'trdSide': '买入', 'amount': 10000000.0, 'rate': 3.6, 'amountReqFlag': False, 'rateReqFlag': False, 'fundName': ['景益货币', '景顺货币']}
2025-06-10 03:27:02,524 - __main__ - INFO - Successfully parsed bond data: {'assetCode': '250001', 'assetName': '25国债01', 'trdSide': '买入', 'amount': 10000000.0, 'rate': 3.6, 'amountReqFlag': False, 'rateReqFlag': False, 'fundName': ['景益货币', '景顺货币']}
2025-06-10 03:27:02,525 - __main__ - INFO - Successfully completed smart parsing with AI analysis
